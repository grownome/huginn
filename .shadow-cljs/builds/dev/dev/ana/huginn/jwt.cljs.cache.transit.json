["^ ","~:output",["^ ","~:js","goog.provide('huginn.jwt');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('promesa.core');\ngoog.require('cljs_node_io.core');\ngoog.require('cljs.nodejs');\ngoog.require('huginn.config');\ngoog.require('shadow.js.shim.module$jsonwebtoken');\nhuginn.jwt.round_now = (function huginn$jwt$round_now(){\nreturn ((Date.now() / (1000)) | (0));\n});\n/**\n * becuase env vars don't get assinged with newlines in resin\n */\nhuginn.jwt.clean_env_key = (function huginn$jwt$clean_env_key(private_key){\nif(cljs.core.truth_(private_key)){\nvar split = clojure.string.split.cljs$core$IFn$_invoke$arity$2(private_key,/ /);\nvar header = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),split));\nvar footer = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.take_last((3),split));\nvar body = cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((3),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),split));\nvar joined_body = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",body);\nvar joined_text = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [header,joined_body,footer], null));\nreturn joined_text;\n} else {\nreturn null;\n}\n});\n/**\n * Builds a jwt with an experation\n */\nhuginn.jwt.create_jwt = (function huginn$jwt$create_jwt(p__19821){\nvar map__19822 = p__19821;\nvar map__19822__$1 = ((((!((map__19822 == null)))?(((((map__19822.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__19822.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__19822):map__19822);\nvar opts = map__19822__$1;\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19822__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar tokenExpMins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19822__$1,new cljs.core.Keyword(null,\"tokenExpMins\",\"tokenExpMins\",-1638711857));\nvar privateKey = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19822__$1,new cljs.core.Keyword(null,\"privateKey\",\"privateKey\",1845961641));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19822__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nvar algorithm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19822__$1,new cljs.core.Keyword(null,\"algorithm\",\"algorithm\",739262820));\nvar token = ({\"iat\": huginn.jwt.round_now(), \"exp\": ((tokenExpMins * (60)) + huginn.jwt.round_now()), \"aud\": projectId});\nvar privKey = (function (){var or__3949__auto__ = huginn.jwt.clean_env_key(privateKey);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn cljs_node_io.core.slurp(privateKeyFile);\n}\n})();\nvar G__19824 = token;\nvar G__19825 = privKey;\nvar G__19826 = ({\"algorithm\": algorithm});\nreturn shadow.js.shim.module$jsonwebtoken.sign(G__19824,G__19825,G__19826);\n});\nhuginn.jwt.client_id = (function huginn$jwt$client_id(p__19827){\nvar map__19828 = p__19827;\nvar map__19828__$1 = ((((!((map__19828 == null)))?(((((map__19828.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__19828.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__19828):map__19828);\nvar opts = map__19828__$1;\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19828__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar registryId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19828__$1,new cljs.core.Keyword(null,\"registryId\",\"registryId\",-1767694006));\nvar cloudRegion = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19828__$1,new cljs.core.Keyword(null,\"cloudRegion\",\"cloudRegion\",-857757214));\nvar deviceId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19828__$1,new cljs.core.Keyword(null,\"deviceId\",\"deviceId\",1909987208));\nreturn [\"projects/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(projectId),\"/locations/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cloudRegion),\"/registries/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(registryId),\"/devices/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(deviceId)].join('');\n});\nhuginn.jwt.google_iot_conn_args = (function huginn$jwt$google_iot_conn_args(p__19830){\nvar map__19831 = p__19830;\nvar map__19831__$1 = ((((!((map__19831 == null)))?(((((map__19831.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__19831.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__19831):map__19831);\nvar opts = map__19831__$1;\nvar registryId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19831__$1,new cljs.core.Keyword(null,\"registryId\",\"registryId\",-1767694006));\nvar deviceId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19831__$1,new cljs.core.Keyword(null,\"deviceId\",\"deviceId\",1909987208));\nvar cloudRegion = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19831__$1,new cljs.core.Keyword(null,\"cloudRegion\",\"cloudRegion\",-857757214));\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19831__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar privateKey = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19831__$1,new cljs.core.Keyword(null,\"privateKey\",\"privateKey\",1845961641));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19831__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nreturn ({\"projectId\": projectId, \"registryId\": registryId, \"deviceId\": deviceId, \"cloudRegion\": cloudRegion, \"privateKey\": (function (){var or__3949__auto__ = huginn.jwt.clean_env_key(privateKey);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn cljs_node_io.core.slurp(privateKeyFile);\n}\n})()});\n});\n/**\n * builds connection args for connecting to mqtt\n *   The same args are used no matter what topic you\n *   are connecting too\n */\nhuginn.jwt.connection_args = (function huginn$jwt$connection_args(p__19833){\nvar map__19834 = p__19833;\nvar map__19834__$1 = ((((!((map__19834 == null)))?(((((map__19834.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__19834.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__19834):map__19834);\nvar opts = map__19834__$1;\nvar mqttBridgeHostname = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19834__$1,new cljs.core.Keyword(null,\"mqttBridgeHostname\",\"mqttBridgeHostname\",1814277029));\nvar tokenExpMins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19834__$1,new cljs.core.Keyword(null,\"tokenExpMins\",\"tokenExpMins\",-1638711857));\nvar mqttBridgePort = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19834__$1,new cljs.core.Keyword(null,\"mqttBridgePort\",\"mqttBridgePort\",1181584124));\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19834__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19834__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nvar algorithm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19834__$1,new cljs.core.Keyword(null,\"algorithm\",\"algorithm\",739262820));\nreturn ({\"clientId\": huginn.jwt.client_id(opts), \"protocol\": \"mqtts\", \"password\": huginn.jwt.create_jwt(opts), \"username\": \"unused\", \"port\": mqttBridgePort, \"host\": mqttBridgeHostname, \"onConfiguration\": ((function (map__19834,map__19834__$1,opts,mqttBridgeHostname,tokenExpMins,mqttBridgePort,projectId,privateKeyFile,algorithm){\nreturn (function (config){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(huginn.config.iot_config,cljs.core.merge,cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(config));\n});})(map__19834,map__19834__$1,opts,mqttBridgeHostname,tokenExpMins,mqttBridgePort,projectId,privateKeyFile,algorithm))\n, \"secureProtocol\": \"TLSv1_2_method\", \"keepAlive\": (60), \"tokenLifecycle\": (tokenExpMins * (60)), \"clean\": true});\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","huginn/jwt.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$jsonwebtoken","~$shadow.js.shim.module$jsonwebtoken","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$huginn.jwt","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$p","~$promesa.core","^M","^M","~$huginn.config","^N","^<","^=","~$cljs.core","^O","~$io","~$cljs-node-io.core","~$goog","^R","~$config","^N","~$cljs.nodejs","^T","^=","^=","~$nodejs","^T","^Q","^Q","~$jwt","^=","~$clojure.string","^W","~$st","^W"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^H",["^12",["^Z",["^W","~:as","^X"],["^M","^14","~$p"],["^Q","^14","^P"],["^T","^14","^U"],["^N","^14","^S"],["^<","^14","^V"]]]]],"~:flags",["^ ","^Z",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^R","^O","^W","^M","^Q","^T","^N","^="]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","huginn/jwt.cljs"],"~:compiled-at",1540191514532,"~:resource-name","huginn/jwt.cljs","~:warnings",[],"~:source","(ns huginn.jwt\n  (:require\n   [clojure.string :as st]\n   [promesa.core :as p]\n   [cljs-node-io.core :as io]\n   [cljs.nodejs :as nodejs]\n   [huginn.config :as config]\n   [jsonwebtoken :as jwt]))\n\n(defn round-now []\n  (int (/ (js/Date.now) 1000)))\n\n(defn clean-env-key\n  \"becuase env vars don't get assinged with newlines in resin\"\n  [private-key]\n  (when private-key\n    (let [split  (st/split private-key  #\" \")\n          header (st/join \" \" (take 3 split))\n          footer (st/join \" \" (take-last 3 split))\n          body   (drop-last 3 (drop 3 split))\n          joined-body (st/join \"\\n\" body)\n          joined-text (st/join \"\\n\" [header joined-body footer])]\n      joined-text)))\n\n(defn create-jwt\n  \"Builds a jwt with an experation\"\n  [{:keys [projectId tokenExpMins privateKey privateKeyFile algorithm] :as opts}]\n  (let [token\n        #js {:iat (round-now)\n             :exp (+ (* tokenExpMins 60) (round-now)) ;now + 20 min\n             :aud projectId}\n        privKey (or (clean-env-key privateKey) (io/slurp privateKeyFile))]\n    (jwt/sign token privKey #js {:algorithm algorithm })))\n\n(defn client-id\n  [{:keys [projectId registryId cloudRegion deviceId] :as opts}]\n  (str \"projects/\" projectId\n       \"/locations/\" cloudRegion\n       \"/registries/\" registryId\n       \"/devices/\" deviceId))\n\n(defn google-iot-conn-args\n  [{:keys [registryId\n           deviceId\n           cloudRegion\n           projectId\n           privateKey\n           privateKeyFile] :as opts}]\n  #js {:projectId projectId\n       :registryId registryId\n       :deviceId deviceId\n       :cloudRegion cloudRegion\n       :privateKey (or (clean-env-key privateKey) (io/slurp privateKeyFile))})\n\n(defn connection-args\n  \"builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too\"\n  [{:keys [mqttBridgeHostname tokenExpMins mqttBridgePort projectId privateKeyFile algorithm] :as opts}]\n  #js {:host mqttBridgeHostname\n       :port mqttBridgePort\n       :clean true\n       :clientId (client-id opts)\n       :keepAlive 60\n       :tokenLifecycle (* tokenExpMins 60)\n       :username \"unused\"\n       :password (create-jwt opts)\n       :protocol \"mqtts\"\n       :onConfiguration (fn [config] (swap! config/iot-config  merge (js->clj config)))\n       :secureProtocol \"TLSv1_2_method\"})\n\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["huginn.jwt/round-now","js/Date.now","huginn.jwt/clean-env-key","private-key","split","clojure.string.split.cljs$core$IFn$_invoke$arity$2","header","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","footer","cljs.core/take-last","body","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","joined-body","joined-text","p__19821","map__19822","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","huginn.jwt/create-jwt","projectId","tokenExpMins","privateKey","privateKeyFile","algorithm","opts","token","privKey","or__3949__auto__","cljs-node-io.core/slurp","G__19824","G__19825","G__19826","js/shadow.js.shim.module$jsonwebtoken.sign","p__19827","map__19828","huginn.jwt/client-id","registryId","cloudRegion","deviceId","p__19830","map__19831","huginn.jwt/google-iot-conn-args","p__19833","map__19834","huginn.jwt/connection-args","mqttBridgeHostname","mqttBridgePort","config","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","huginn.config/iot-config","cljs.core/merge","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1"]]],"~:cache-keys",["~#cmap",[["^19","cljs_node_io/file.cljs"],[1537666007418,"^R","^O","~$goog.Uri","~$cljs-node-io.streams","~$cljs-node-io.fs","~$cljs-node-io.protocols"],["^19","goog/dom/tagname.js"],[1530991559994,"^R","~$goog.dom.HtmlElement"],["^19","cljs/core/async/impl/ioc_helpers.cljs"],[1534380136417,"^R","^O","~$cljs.core.async.impl.protocols"],["~:macro","^O"],[1534380137000],["^19","cljs/core/async.cljs"],[1534380136417,"^R","^O","^1K","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers"],["^19","cljs/nodejs.cljs"],[1534380137690,"^R","^O"],["^19","cljs_node_io/fs.cljs"],[1537666007418,"^R","^O","^A","^1K"],["^19","cljs_node_io/core.cljs"],[1537666007418,"^R","^O","^A","^1K","~$cljs-node-io.file","^1G","^1I","^1F"],["^19","goog/math/math.js"],[1530991559994,"^R","~$goog.array","~$goog.asserts"],["^19","goog/labs/useragent/browser.js"],[1530991559994,"^R","^1S","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^19","goog/array/array.js"],[1530991559994,"^R","^1T"],["^19","cljs_node_io/protocols.cljs"],[1537666007418,"^R","^O"],["^1L","~$cljs.core.async.macros"],[1534380136000],["^19","cljs_node_io/streams.cljs"],[1537666007418,"^R","^O","^1F","^A","^1I"],["^19","huginn/config.cljs"],[1540191354853,"^R","^O"],["^19","goog/debug/error.js"],[1530991559994,"^R"],["^19","huginn/jwt.cljs"],[1540191479814,"^R","^O","^W","^M","^Q","^T","^N","^="],["^19","promesa/impl/scheduler.cljc"],[1535586406328,"^R","^O","~$promesa.protocols"],["^19","promesa/impl.cljc"],[1535586406328,"^R","^O","^1Y","~$org.bluebird"],["^19","goog/dom/nodetype.js"],[1530991559994,"^R"],["^19","goog/object/object.js"],[1530991559994,"^R"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^19","goog/math/long.js"],[1530991559994,"^R","^1T","~$goog.reflect"],["^19","cljs/core/async/impl/channels.cljs"],[1534380136417,"^R","^O","^1K","^1P","^1N"],["^19","goog/functions/functions.js"],[1530991559994,"^R"],["^19","cljs/core/async/impl/dispatch.cljs"],[1534380136417,"^R","^O","^1N","~$goog.async.nextTick"],["^19","cljs/core/async/impl/protocols.cljs"],[1534380136417,"^R","^O"],["^19","goog/structs/map.js"],[1530991559994,"^R","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1V"],["^19","goog/labs/useragent/engine.js"],[1530991559994,"^R","^1S","^1U","^1W"],["~:shadow.build.js-support/require","bluebird"],["~$shadow.js.shim.module$bluebird","shadow.js.shim.module$bluebird.js","^R"],["^1L","~$cljs-node-io.macros"],[1537666007000],["^19","goog/asserts/asserts.js"],[1530991559994,"^R","~$goog.debug.Error","~$goog.dom.NodeType","^1W"],["^19","cljs/core/async/impl/buffers.cljs"],[1534380136417,"^R","^O","^1K"],["^24","jsonwebtoken"],["^=","shadow.js.shim.module$jsonwebtoken.js","^R"],["^19","goog/uri/uri.js"],[1530991559994,"^R","^1S","^1T","^1W","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1L","^A"],[1534380136000],["^19","cljs/core/async/impl/timers.cljs"],[1534380136417,"^R","^O","^1K","^1M","^1P"],["^19","goog/base.js"],[1530991559994],["^19","promesa/core.cljc"],[1535586406328,"^R","^O","^1Y","~$promesa.impl","~$promesa.impl.scheduler"],["^19","goog/structs/structs.js"],[1530991559994,"^R","^1S","^1V"],["^19","org/bluebird.cljs"],[1535669979047,"^R","^O","^25"],["^19","clojure/string.cljs"],[1534380137690,"^R","^O","^1W","~$goog.string.StringBuffer"],["^19","goog/debug/entrypointregistry.js"],[1530991559994,"^R","^1T"],["^19","goog/string/string.js"],[1530991559994,"^R"],["^19","goog/reflect/reflect.js"],[1530991559994,"^R"],["^19","goog/labs/useragent/util.js"],[1530991559994,"^R","^1W"],["^1L","~$cljs.core.async.impl.ioc-macros"],[1534380136000],["^19","goog/string/stringbuffer.js"],[1530991559994,"^R"],["^19","promesa/protocols.cljc"],[1535586406328,"^R","^O"],["^19","goog/iter/iter.js"],[1530991559994,"^R","^1S","^1T","~$goog.functions","~$goog.math"],["^19","goog/async/nexttick.js"],[1530991559994,"^R","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2B","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^19","goog/dom/htmlelement.js"],[1530991559994,"^R"],["^19","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1W","^1V","^1S","^1F","^2@"],["^19","goog/math/integer.js"],[1530991559994,"^R"],["^19","goog/uri/utils.js"],[1530991559994,"^R","^1S","^1T","^1W"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","huginn/jwt.cljs","^7",1,"^8",5,"^9",1,"^:",15],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"~:shadow/js-access-properties",["^F",["now","sign"]],"^G","^H","^K",null,"^L",["^ ","~$p","^M","^M","^M","^N","^N","^<","^=","^O","^O","^P","^Q","^R","^R","^S","^N","^T","^T","^=","^=","^U","^T","^Q","^Q","^V","^=","^W","^W","^X","^W"],"^Y",["^F",["^Z"]],"~:shadow/js-access-global",["^F",["Date"]],"^[",null,"~:defs",["^ ","~$round-now",["^ ","~:protocol-inline",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",10,"^8",7,"^9",10,"^:",16,"~:arglists",["^12",["~$quote",["^12",[[]]]]]],"^G","~$huginn.jwt/round-now","~:variadic",false,"^6","huginn/jwt.cljs","^:",16,"~:method-params",["^12",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"^7",10,"^9",10,"~:max-fixed-arity",0,"~:fn-var",true,"^2P",["^12",["^2Q",["^12",[[]]]]]],"~$clean-env-key",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",13,"^8",7,"^9",13,"^:",20,"^2P",["^12",["^2Q",["^12",[["~$private-key"]]]]],"~:doc","becuase env vars don't get assinged with newlines in resin"],"^G","~$huginn.jwt/clean-env-key","^2S",false,"^6","huginn/jwt.cljs","^:",20,"^2T",["^12",[["^2Z"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",13,"^9",13,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[["^2Z"]]]]],"^2[","becuase env vars don't get assinged with newlines in resin"],"~$create-jwt",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",25,"^8",7,"^9",25,"^:",17,"^2P",["^12",["^2Q",["^12",[[["^ ","~:keys",["~$projectId","~$tokenExpMins","~$privateKey","~$privateKeyFile","~$algorithm"],"^14","~$opts"]]]]]],"^2[","Builds a jwt with an experation"],"^G","~$huginn.jwt/create-jwt","^2S",false,"^6","huginn/jwt.cljs","^:",17,"^2T",["^12",[["~$p__19821"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",25,"^9",25,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^33","^34","^35","^36","^37"],"^14","^38"]]]]]],"^2[","Builds a jwt with an experation"],"~$client-id",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",35,"^8",7,"^9",35,"^:",16,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^33","~$registryId","~$cloudRegion","~$deviceId"],"^14","^38"]]]]]]],"^G","~$huginn.jwt/client-id","^2S",false,"^6","huginn/jwt.cljs","^:",16,"^2T",["^12",[["~$p__19827"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",35,"^9",35,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^33","^3<","^3=","^3>"],"^14","^38"]]]]]]],"~$google-iot-conn-args",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",42,"^8",7,"^9",42,"^:",27,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^3<","^3>","^3=","^33","^35","^36"],"^14","^38"]]]]]]],"^G","~$huginn.jwt/google-iot-conn-args","^2S",false,"^6","huginn/jwt.cljs","^:",27,"^2T",["^12",[["~$p__19830"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",42,"^9",42,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^3<","^3>","^3=","^33","^35","^36"],"^14","^38"]]]]]]],"~$connection-args",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",55,"^8",7,"^9",55,"^:",22,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["~$mqttBridgeHostname","^34","~$mqttBridgePort","^33","^36","^37"],"^14","^38"]]]]]],"^2[","builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too"],"^G","~$huginn.jwt/connection-args","^2S",false,"^6","huginn/jwt.cljs","^:",22,"^2T",["^12",[["~$p__19833"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",55,"^9",55,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^3E","^34","^3F","^33","^36","^37"],"^14","^38"]]]]]],"^2[","builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too"]],"^10",["^ ","^O","^O"],"~:cljs.analyzer/constants",["^ ","^Y",["^F",["~:cloudRegion","~:algorithm","~:mqttBridgeHostname","~:deviceId","~:privateKey","~:registryId","~:tokenExpMins","~:projectId","~:privateKeyFile","~:mqttBridgePort"]],"~:order",["^3Q","^3P","^3N","^3R","^3K","^3O","^3J","^3M","^3L","^3S"]],"^15",["^ ","^Z",["^F",[]]],"^16",["^ "],"^17",["^R","^O","^W","^M","^Q","^T","^N","^="]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^3W","~:static-fns"],true,["^3W","~:elide-asserts"],false,["^3W","~:optimize-constants"],null,["^3W","~:external-config"],null,["^3W","~:tooling-config"],null,["^3W","~:emit-constants"],null,["^3W","~:infer-externs"],true,["^3W","^1>"],null,["~:js-options","~:js-provider"],"^Z",["~:mode"],"~:dev",["^3W","~:fn-invoke-direct"],null,["^3W","~:source-map"],"/dev/null"]]]