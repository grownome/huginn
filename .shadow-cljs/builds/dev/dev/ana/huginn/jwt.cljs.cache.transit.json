["^ ","~:output",["^ ","~:js","goog.provide('huginn.jwt');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('promesa.core');\ngoog.require('cljs_node_io.core');\ngoog.require('cljs.nodejs');\ngoog.require('shadow.js.shim.module$jsonwebtoken');\nhuginn.jwt.round_now = (function huginn$jwt$round_now(){\nreturn ((Date.now() / (1000)) | (0));\n});\n/**\n * becuase env vars don't get assinged with newlines in resin\n */\nhuginn.jwt.clean_env_key = (function huginn$jwt$clean_env_key(private_key){\nif(cljs.core.truth_(private_key)){\nvar split = clojure.string.split.cljs$core$IFn$_invoke$arity$2(private_key,/ /);\nvar header = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),split));\nvar footer = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.take_last((3),split));\nvar body = cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((3),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),split));\nvar joined_body = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",body);\nvar joined_text = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [header,joined_body,footer], null));\nreturn joined_text;\n} else {\nreturn null;\n}\n});\n/**\n * Builds a jwt with an experation\n */\nhuginn.jwt.create_jwt = (function huginn$jwt$create_jwt(p__42701){\nvar map__42702 = p__42701;\nvar map__42702__$1 = ((((!((map__42702 == null)))?(((((map__42702.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42702.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42702):map__42702);\nvar opts = map__42702__$1;\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42702__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar tokenExpMins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42702__$1,new cljs.core.Keyword(null,\"tokenExpMins\",\"tokenExpMins\",-1638711857));\nvar privateKey = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42702__$1,new cljs.core.Keyword(null,\"privateKey\",\"privateKey\",1845961641));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42702__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nvar algorithm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42702__$1,new cljs.core.Keyword(null,\"algorithm\",\"algorithm\",739262820));\nvar token = ({\"iat\": huginn.jwt.round_now(), \"exp\": ((tokenExpMins * (60)) + huginn.jwt.round_now()), \"aud\": projectId});\nvar privKey = (function (){var or__3949__auto__ = huginn.jwt.clean_env_key(privateKey);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn cljs_node_io.core.slurp(privateKeyFile);\n}\n})();\nvar G__42708 = token;\nvar G__42709 = privKey;\nvar G__42710 = ({\"algorithm\": algorithm});\nreturn shadow.js.shim.module$jsonwebtoken.sign(G__42708,G__42709,G__42710);\n});\nhuginn.jwt.client_id = (function huginn$jwt$client_id(p__42711){\nvar map__42712 = p__42711;\nvar map__42712__$1 = ((((!((map__42712 == null)))?(((((map__42712.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42712.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42712):map__42712);\nvar opts = map__42712__$1;\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42712__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar registryId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42712__$1,new cljs.core.Keyword(null,\"registryId\",\"registryId\",-1767694006));\nvar cloudRegion = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42712__$1,new cljs.core.Keyword(null,\"cloudRegion\",\"cloudRegion\",-857757214));\nvar deviceId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42712__$1,new cljs.core.Keyword(null,\"deviceId\",\"deviceId\",1909987208));\nreturn [\"projects/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(projectId),\"/locations/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cloudRegion),\"/registries/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(registryId),\"/devices/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(deviceId)].join('');\n});\nhuginn.jwt.google_iot_conn_args = (function huginn$jwt$google_iot_conn_args(p__42716){\nvar map__42717 = p__42716;\nvar map__42717__$1 = ((((!((map__42717 == null)))?(((((map__42717.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42717.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42717):map__42717);\nvar opts = map__42717__$1;\nvar registryId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42717__$1,new cljs.core.Keyword(null,\"registryId\",\"registryId\",-1767694006));\nvar deviceId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42717__$1,new cljs.core.Keyword(null,\"deviceId\",\"deviceId\",1909987208));\nvar cloudRegion = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42717__$1,new cljs.core.Keyword(null,\"cloudRegion\",\"cloudRegion\",-857757214));\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42717__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar privateKey = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42717__$1,new cljs.core.Keyword(null,\"privateKey\",\"privateKey\",1845961641));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42717__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nreturn ({\"projectId\": projectId, \"registryId\": registryId, \"deviceId\": deviceId, \"cloudRegion\": cloudRegion, \"privateKey\": (function (){var or__3949__auto__ = huginn.jwt.clean_env_key(privateKey);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn cljs_node_io.core.slurp(privateKeyFile);\n}\n})()});\n});\n/**\n * builds connection args for connecting to mqtt\n *   The same args are used no matter what topic you\n *   are connecting too\n */\nhuginn.jwt.connection_args = (function huginn$jwt$connection_args(p__42719){\nvar map__42720 = p__42719;\nvar map__42720__$1 = ((((!((map__42720 == null)))?(((((map__42720.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__42720.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__42720):map__42720);\nvar opts = map__42720__$1;\nvar mqttBridgeHostname = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42720__$1,new cljs.core.Keyword(null,\"mqttBridgeHostname\",\"mqttBridgeHostname\",1814277029));\nvar mqttBridgePort = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42720__$1,new cljs.core.Keyword(null,\"mqttBridgePort\",\"mqttBridgePort\",1181584124));\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42720__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42720__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nvar algorithm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__42720__$1,new cljs.core.Keyword(null,\"algorithm\",\"algorithm\",739262820));\nreturn ({\"clientId\": huginn.jwt.client_id(opts), \"protocol\": \"mqtts\", \"password\": huginn.jwt.create_jwt(opts), \"username\": \"unused\", \"port\": mqttBridgePort, \"reconnectPeriod\": (10000), \"host\": mqttBridgeHostname, \"secureProtocol\": \"TLSv1_2_method\", \"keepAlive\": (60), \"clean\": true});\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","huginn/jwt.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$jsonwebtoken","~$shadow.js.shim.module$jsonwebtoken","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$huginn.jwt","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$p","~$promesa.core","^M","^M","^<","^=","~$cljs.core","^N","~$io","~$cljs-node-io.core","~$goog","^Q","~$cljs.nodejs","^R","^=","^=","~$nodejs","^R","^P","^P","~$jwt","^=","~$clojure.string","^U","~$st","^U"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^H",["^10",["^X",["^U","~:as","^V"],["^M","^12","~$p"],["^P","^12","^O"],["^R","^12","^S"],["^<","^12","^T"]]]]],"~:flags",["^ ","^X",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^N","^U","^M","^P","^R","^="]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","huginn/jwt.cljs"],"~:compiled-at",1540154953182,"~:resource-name","huginn/jwt.cljs","~:warnings",[],"~:source","(ns huginn.jwt\n  (:require\n   [clojure.string :as st]\n   [promesa.core :as p]\n   [cljs-node-io.core :as io]\n   [cljs.nodejs :as nodejs]\n   [jsonwebtoken :as jwt]))\n\n(defn round-now []\n  (int (/ (js/Date.now) 1000)))\n\n(defn clean-env-key\n  \"becuase env vars don't get assinged with newlines in resin\"\n  [private-key]\n  (when private-key\n    (let [split  (st/split private-key  #\" \")\n          header (st/join \" \" (take 3 split))\n          footer (st/join \" \" (take-last 3 split))\n          body   (drop-last 3 (drop 3 split))\n          joined-body (st/join \"\\n\" body)\n          joined-text (st/join \"\\n\" [header joined-body footer])]\n      joined-text)))\n\n(defn create-jwt\n  \"Builds a jwt with an experation\"\n  [{:keys [projectId tokenExpMins privateKey privateKeyFile algorithm] :as opts}]\n  (let [token\n        #js {:iat (round-now)\n             :exp (+ (* tokenExpMins 60) (round-now)) ;now + 20 min\n             :aud projectId}\n        privKey (or (clean-env-key privateKey) (io/slurp privateKeyFile))]\n    (jwt/sign token privKey #js {:algorithm algorithm })))\n\n(defn client-id\n  [{:keys [projectId registryId cloudRegion deviceId] :as opts}]\n  (str \"projects/\" projectId\n       \"/locations/\" cloudRegion\n       \"/registries/\" registryId\n       \"/devices/\" deviceId))\n\n(defn google-iot-conn-args\n  [{:keys [registryId\n           deviceId\n           cloudRegion\n           projectId\n           privateKey\n           privateKeyFile] :as opts}]\n  #js {:projectId projectId\n       :registryId registryId\n       :deviceId deviceId\n       :cloudRegion cloudRegion\n       :privateKey (or (clean-env-key privateKey) (io/slurp privateKeyFile))})\n\n(defn connection-args\n  \"builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too\"\n  [{:keys [mqttBridgeHostname mqttBridgePort projectId privateKeyFile algorithm] :as opts}]\n  #js {:host mqttBridgeHostname\n       :port mqttBridgePort\n       :clean true\n       :clientId (client-id opts)\n       :keepAlive 60\n       :reconnectPeriod 10000\n       :username \"unused\"\n       :password (create-jwt opts)\n       :protocol \"mqtts\"\n       :secureProtocol \"TLSv1_2_method\"})\n\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["huginn.jwt/round-now","js/Date.now","huginn.jwt/clean-env-key","private-key","split","clojure.string.split.cljs$core$IFn$_invoke$arity$2","header","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","footer","cljs.core/take-last","body","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","joined-body","joined-text","p__42701","map__42702","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","huginn.jwt/create-jwt","projectId","tokenExpMins","privateKey","privateKeyFile","algorithm","opts","token","privKey","or__3949__auto__","cljs-node-io.core/slurp","G__42708","G__42709","G__42710","js/shadow.js.shim.module$jsonwebtoken.sign","p__42711","map__42712","huginn.jwt/client-id","registryId","cloudRegion","deviceId","p__42716","map__42717","huginn.jwt/google-iot-conn-args","p__42719","map__42720","huginn.jwt/connection-args","mqttBridgeHostname","mqttBridgePort"]]],"~:cache-keys",["~#cmap",[["^17","cljs_node_io/file.cljs"],[1537666007418,"^Q","^N","~$goog.Uri","~$cljs-node-io.streams","~$cljs-node-io.fs","~$cljs-node-io.protocols"],["^17","goog/dom/tagname.js"],[1530991559994,"^Q","~$goog.dom.HtmlElement"],["^17","cljs/core/async/impl/ioc_helpers.cljs"],[1534380136417,"^Q","^N","~$cljs.core.async.impl.protocols"],["~:macro","^N"],[1534380137000],["^17","cljs/core/async.cljs"],[1534380136417,"^Q","^N","^1I","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers"],["^17","cljs/nodejs.cljs"],[1534380137690,"^Q","^N"],["^17","cljs_node_io/fs.cljs"],[1537666007418,"^Q","^N","^A","^1I"],["^17","cljs_node_io/core.cljs"],[1537666007418,"^Q","^N","^A","^1I","~$cljs-node-io.file","^1E","^1G","^1D"],["^17","goog/math/math.js"],[1530991559994,"^Q","~$goog.array","~$goog.asserts"],["^17","goog/labs/useragent/browser.js"],[1530991559994,"^Q","^1Q","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^17","goog/array/array.js"],[1530991559994,"^Q","^1R"],["^17","cljs_node_io/protocols.cljs"],[1537666007418,"^Q","^N"],["^1J","~$cljs.core.async.macros"],[1534380136000],["^17","cljs_node_io/streams.cljs"],[1537666007418,"^Q","^N","^1D","^A","^1G"],["^17","goog/debug/error.js"],[1530991559994,"^Q"],["^17","huginn/jwt.cljs"],[1540154806767,"^Q","^N","^U","^M","^P","^R","^="],["^17","promesa/impl/scheduler.cljc"],[1535586406328,"^Q","^N","~$promesa.protocols"],["^17","promesa/impl.cljc"],[1535586406328,"^Q","^N","^1W","~$org.bluebird"],["^17","goog/dom/nodetype.js"],[1530991559994,"^Q"],["^17","goog/object/object.js"],[1530991559994,"^Q"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^17","goog/math/long.js"],[1530991559994,"^Q","^1R","~$goog.reflect"],["^17","cljs/core/async/impl/channels.cljs"],[1534380136417,"^Q","^N","^1I","^1N","^1L"],["^17","goog/functions/functions.js"],[1530991559994,"^Q"],["^17","cljs/core/async/impl/dispatch.cljs"],[1534380136417,"^Q","^N","^1L","~$goog.async.nextTick"],["^17","cljs/core/async/impl/protocols.cljs"],[1534380136417,"^Q","^N"],["^17","goog/structs/map.js"],[1530991559994,"^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1T"],["^17","goog/labs/useragent/engine.js"],[1530991559994,"^Q","^1Q","^1S","^1U"],["~:shadow.build.js-support/require","bluebird"],["~$shadow.js.shim.module$bluebird","shadow.js.shim.module$bluebird.js","^Q"],["^1J","~$cljs-node-io.macros"],[1537666007000],["^17","goog/asserts/asserts.js"],[1530991559994,"^Q","~$goog.debug.Error","~$goog.dom.NodeType","^1U"],["^17","cljs/core/async/impl/buffers.cljs"],[1534380136417,"^Q","^N","^1I"],["^22","jsonwebtoken"],["^=","shadow.js.shim.module$jsonwebtoken.js","^Q"],["^17","goog/uri/uri.js"],[1530991559994,"^Q","^1Q","^1R","^1U","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1J","^A"],[1534380136000],["^17","cljs/core/async/impl/timers.cljs"],[1534380136417,"^Q","^N","^1I","^1K","^1N"],["^17","goog/base.js"],[1530991559994],["^17","promesa/core.cljc"],[1535586406328,"^Q","^N","^1W","~$promesa.impl","~$promesa.impl.scheduler"],["^17","goog/structs/structs.js"],[1530991559994,"^Q","^1Q","^1T"],["^17","org/bluebird.cljs"],[1535669979047,"^Q","^N","^23"],["^17","clojure/string.cljs"],[1534380137690,"^Q","^N","^1U","~$goog.string.StringBuffer"],["^17","goog/debug/entrypointregistry.js"],[1530991559994,"^Q","^1R"],["^17","goog/string/string.js"],[1530991559994,"^Q"],["^17","goog/reflect/reflect.js"],[1530991559994,"^Q"],["^17","goog/labs/useragent/util.js"],[1530991559994,"^Q","^1U"],["^1J","~$cljs.core.async.impl.ioc-macros"],[1534380136000],["^17","goog/string/stringbuffer.js"],[1530991559994,"^Q"],["^17","promesa/protocols.cljc"],[1535586406328,"^Q","^N"],["^17","goog/iter/iter.js"],[1530991559994,"^Q","^1Q","^1R","~$goog.functions","~$goog.math"],["^17","goog/async/nexttick.js"],[1530991559994,"^Q","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2@","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^17","goog/dom/htmlelement.js"],[1530991559994,"^Q"],["^17","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1U","^1T","^1Q","^1D","^2>"],["^17","goog/math/integer.js"],[1530991559994,"^Q"],["^17","goog/uri/utils.js"],[1530991559994,"^Q","^1Q","^1R","^1U"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","huginn/jwt.cljs","^7",1,"^8",5,"^9",1,"^:",15],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"~:shadow/js-access-properties",["^F",["now","sign"]],"^G","^H","^K",null,"^L",["^ ","~$p","^M","^M","^M","^<","^=","^N","^N","^O","^P","^Q","^Q","^R","^R","^=","^=","^S","^R","^P","^P","^T","^=","^U","^U","^V","^U"],"^W",["^F",["^X"]],"~:shadow/js-access-global",["^F",["Date"]],"^Y",null,"~:defs",["^ ","~$round-now",["^ ","~:protocol-inline",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",9,"^8",7,"^9",9,"^:",16,"~:arglists",["^10",["~$quote",["^10",[[]]]]]],"^G","~$huginn.jwt/round-now","~:variadic",false,"^6","huginn/jwt.cljs","^:",16,"~:method-params",["^10",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"^7",9,"^9",9,"~:max-fixed-arity",0,"~:fn-var",true,"^2N",["^10",["^2O",["^10",[[]]]]]],"~$clean-env-key",["^ ","^2M",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",12,"^8",7,"^9",12,"^:",20,"^2N",["^10",["^2O",["^10",[["~$private-key"]]]]],"~:doc","becuase env vars don't get assinged with newlines in resin"],"^G","~$huginn.jwt/clean-env-key","^2Q",false,"^6","huginn/jwt.cljs","^:",20,"^2R",["^10",[["^2X"]]],"^2S",null,"^2T",["^10",[null,null]],"^8",1,"^7",12,"^9",12,"^2U",1,"^2V",true,"^2N",["^10",["^2O",["^10",[["^2X"]]]]],"^2Y","becuase env vars don't get assinged with newlines in resin"],"~$create-jwt",["^ ","^2M",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",24,"^8",7,"^9",24,"^:",17,"^2N",["^10",["^2O",["^10",[[["^ ","~:keys",["~$projectId","~$tokenExpMins","~$privateKey","~$privateKeyFile","~$algorithm"],"^12","~$opts"]]]]]],"^2Y","Builds a jwt with an experation"],"^G","~$huginn.jwt/create-jwt","^2Q",false,"^6","huginn/jwt.cljs","^:",17,"^2R",["^10",[["~$p__42701"]]],"^2S",null,"^2T",["^10",[null,null]],"^8",1,"^7",24,"^9",24,"^2U",1,"^2V",true,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["^31","^32","^33","^34","^35"],"^12","^36"]]]]]],"^2Y","Builds a jwt with an experation"],"~$client-id",["^ ","^2M",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",34,"^8",7,"^9",34,"^:",16,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["^31","~$registryId","~$cloudRegion","~$deviceId"],"^12","^36"]]]]]]],"^G","~$huginn.jwt/client-id","^2Q",false,"^6","huginn/jwt.cljs","^:",16,"^2R",["^10",[["~$p__42711"]]],"^2S",null,"^2T",["^10",[null,null]],"^8",1,"^7",34,"^9",34,"^2U",1,"^2V",true,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["^31","^3:","^3;","^3<"],"^12","^36"]]]]]]],"~$google-iot-conn-args",["^ ","^2M",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",41,"^8",7,"^9",41,"^:",27,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["^3:","^3<","^3;","^31","^33","^34"],"^12","^36"]]]]]]],"^G","~$huginn.jwt/google-iot-conn-args","^2Q",false,"^6","huginn/jwt.cljs","^:",27,"^2R",["^10",[["~$p__42716"]]],"^2S",null,"^2T",["^10",[null,null]],"^8",1,"^7",41,"^9",41,"^2U",1,"^2V",true,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["^3:","^3<","^3;","^31","^33","^34"],"^12","^36"]]]]]]],"~$connection-args",["^ ","^2M",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",54,"^8",7,"^9",54,"^:",22,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["~$mqttBridgeHostname","~$mqttBridgePort","^31","^34","^35"],"^12","^36"]]]]]],"^2Y","builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too"],"^G","~$huginn.jwt/connection-args","^2Q",false,"^6","huginn/jwt.cljs","^:",22,"^2R",["^10",[["~$p__42719"]]],"^2S",null,"^2T",["^10",[null,null]],"^8",1,"^7",54,"^9",54,"^2U",1,"^2V",true,"^2N",["^10",["^2O",["^10",[[["^ ","^30",["^3C","^3D","^31","^34","^35"],"^12","^36"]]]]]],"^2Y","builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too"]],"^Z",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^W",["^F",["~:cloudRegion","~:algorithm","~:mqttBridgeHostname","~:deviceId","~:privateKey","~:registryId","~:tokenExpMins","~:projectId","~:privateKeyFile","~:mqttBridgePort"]],"~:order",["^3O","^3N","^3L","^3P","^3I","^3M","^3H","^3K","^3J","^3Q"]],"^13",["^ ","^X",["^F",[]]],"^14",["^ "],"^15",["^Q","^N","^U","^M","^P","^R","^="]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1C",[["^3U","~:static-fns"],true,["^3U","~:elide-asserts"],false,["^3U","~:optimize-constants"],null,["^3U","~:external-config"],null,["^3U","~:tooling-config"],null,["^3U","~:emit-constants"],null,["^3U","~:infer-externs"],true,["^3U","^1<"],null,["~:js-options","~:js-provider"],"^X",["~:mode"],"~:dev",["^3U","~:fn-invoke-direct"],null,["^3U","~:source-map"],"/dev/null"]]]