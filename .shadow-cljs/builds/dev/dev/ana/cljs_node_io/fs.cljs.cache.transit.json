["^ ","~:output",["^ ","~:js","goog.provide('cljs_node_io.fs');\ngoog.require('cljs.core');\ngoog.require('cljs.core.async');\ngoog.require('cljs.core.async.impl.protocols');\ncljs_node_io.fs.fs = require(\"fs\");\ncljs_node_io.fs.path = require(\"path\");\n/**\n * @type {!string}\n */\ncljs_node_io.fs.sep = cljs_node_io.fs.path.sep;\n/**\n * Synchronous stat\n * @param {!string} pathstring\n * @return {!fs.Stats} file stats object\n */\ncljs_node_io.fs.stat = (function cljs_node_io$fs$stat(pathstring){\nreturn cljs_node_io.fs.fs.statSync(pathstring);\n});\n/**\n * Asynchronous stat\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving [?err ?fs.Stats]\n */\ncljs_node_io.fs.astat = (function cljs_node_io$fs$astat(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.stat(pathstr,((function (c){\nreturn (function() { \nvar G__6668__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6668 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6670__i = 0, G__6670__a = new Array(arguments.length -  0);\nwhile (G__6670__i < G__6670__a.length) {G__6670__a[G__6670__i] = arguments[G__6670__i + 0]; ++G__6670__i;}\n  args = new cljs.core.IndexedSeq(G__6670__a,0,null);\n} \nreturn G__6668__delegate.call(this,args);};\nG__6668.cljs$lang$maxFixedArity = 0;\nG__6668.cljs$lang$applyTo = (function (arglist__6671){\nvar args = cljs.core.seq(arglist__6671);\nreturn G__6668__delegate(args);\n});\nG__6668.cljs$core$IFn$_invoke$arity$variadic = G__6668__delegate;\nreturn G__6668;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous lstat identical to stat(), except that if path is a symbolic link,\n * then the link itself is stat-ed, not the file that it refers to\n * @param {!string} pathstr\n * @return {!fs.Stats} file stats object\n */\ncljs_node_io.fs.lstat = (function cljs_node_io$fs$lstat(pathstr){\nreturn cljs_node_io.fs.fs.lstatSync(pathstr);\n});\n/**\n * Asynchronous lstat\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving [?err ?fs.Stats]\n */\ncljs_node_io.fs.alstat = (function cljs_node_io$fs$alstat(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.lstat(pathstr,((function (c){\nreturn (function() { \nvar G__6675__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6675 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6676__i = 0, G__6676__a = new Array(arguments.length -  0);\nwhile (G__6676__i < G__6676__a.length) {G__6676__a[G__6676__i] = arguments[G__6676__i + 0]; ++G__6676__i;}\n  args = new cljs.core.IndexedSeq(G__6676__a,0,null);\n} \nreturn G__6675__delegate.call(this,args);};\nG__6675.cljs$lang$maxFixedArity = 0;\nG__6675.cljs$lang$applyTo = (function (arglist__6678){\nvar args = cljs.core.seq(arglist__6678);\nreturn G__6675__delegate(args);\n});\nG__6675.cljs$core$IFn$_invoke$arity$variadic = G__6675__delegate;\nreturn G__6675;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Convert a fs.Stats object to edn. Function are swapped out for their return values.\n * This is useful at repl but not particularly efficient.\n * @param {!fs.Stats} st\n * @return {!IMap}\n */\ncljs_node_io.fs.stat__GT_clj = (function cljs_node_io$fs$stat__GT_clj(st){\nvar ks = goog.object.getKeys(st);\nvar vs = goog.object.getValues(st);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.remove.cljs$core$IFn$_invoke$arity$1(((function (ks,vs){\nreturn (function (p1__6178_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__6178_SHARP_,(0)),\"_checkModeProperty\");\n});})(ks,vs))\n),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (ks,vs){\nreturn (function (p__6186){\nvar vec__6187 = p__6186;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6187,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6187,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k),((cljs.core.fn_QMARK_(v))?v.apply(st):v)], null);\n});})(ks,vs))\n)),cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,ks,vs));\n});\n/**\n * @param {!Array<!Number>} bita :: an array of 1s an 0s\n * @return {!Number} integer\n */\ncljs_node_io.fs.bita__GT_int = (function cljs_node_io$fs$bita__GT_int(bita){\nreturn parseInt(bita.join(\"\"),(2));\n});\n/**\n * @param {!fs.Stats} s :: a fs.Stats object\n * @return {!Array<Number>}\n */\ncljs_node_io.fs.stat__GT_perm_bita = (function cljs_node_io$fs$stat__GT_perm_bita(s){\nvar mode = (s[\"mode\"]);\nvar ownr = (mode & (256));\nvar ownw = (mode & (128));\nvar ownx = (mode & (64));\nvar grpr = (mode & (32));\nvar grpw = (mode & (16));\nvar grpx = (mode & (8));\nvar othr = (mode & (4));\nvar othw = (mode & (2));\nvar othx = (mode & (1));\nvar a = [ownr,ownw,ownx,grpr,grpw,grpx,othr,othw,othx];\nvar a__4402__auto__ = a;\nvar l__4403__auto__ = a__4402__auto__.length;\nvar res = cljs.core.aclone(a__4402__auto__);\nvar i = (0);\nwhile(true){\nif((i < l__4403__auto__)){\n(res[i] = ((!(((a[i]) === (0))))?(1):(0)));\n\nvar G__6687 = (i + (1));\ni = G__6687;\ncontinue;\n} else {\nreturn res;\n}\nbreak;\n}\n});\n/**\n * @param {!fs.Stats} st\n * @return {!Number}\n */\ncljs_node_io.fs.permissions = (function cljs_node_io$fs$permissions(st){\nreturn cljs_node_io.fs.bita__GT_int(cljs_node_io.fs.stat__GT_perm_bita(st));\n});\n/**\n * @return {!IMap}\n */\ncljs_node_io.fs.gid_uid = (function cljs_node_io$fs$gid_uid(){\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"gid\",\"gid\",-714078321),process.getgid(),new cljs.core.Keyword(null,\"uid\",\"uid\",-1447769400),process.getuid()], null);\n});\n/**\n * @param {!string} pathstr\n * @return {!boolean} is the file hidden (unix only)\n */\ncljs_node_io.fs.hidden_QMARK_ = (function cljs_node_io$fs$hidden_QMARK_(pathstr){\nreturn (new RegExp(\"(^|\\\\/)\\\\.[^\\\\/\\\\.]\")).test(pathstr);\n});\n/**\n * @param {!string} pathstring\n * @return {!boolean} iff abstract pathname exists and is a directory\n */\ncljs_node_io.fs.dir_QMARK_ = (function cljs_node_io$fs$dir_QMARK_(pathstring){\nif(typeof pathstring === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstring)\"));\n}\n\nvar stats = (function (){try{return cljs_node_io.fs.fs.statSync(pathstring);\n}catch (e6213){if((e6213 instanceof Error)){\nvar e = e6213;\nreturn false;\n} else {\nthrow e6213;\n\n}\n}})();\nif(cljs.core.not(stats)){\nreturn false;\n} else {\nreturn stats.isDirectory();\n}\n});\n/**\n * Asynchronous directory predicate.\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.adir_QMARK_ = (function cljs_node_io$fs$adir_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\nvar stat_ch = cljs_node_io.fs.astat(pathstr);\ncljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(stat_ch,((function (c,stat_ch){\nreturn (function (p__6221){\nvar vec__6222 = p__6221;\nvar err = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6222,(0),null);\nvar stats = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6222,(1),null);\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(err))?stats.isDirectory():false));\n});})(c,stat_ch))\n);\n\nreturn c;\n});\n/**\n * Synchronous file predicate\n * @param {!string} pathstring\n * @return {!boolean} iff abstract pathname exists and is a file\n */\ncljs_node_io.fs.file_QMARK_ = (function cljs_node_io$fs$file_QMARK_(pathstring){\nif(typeof pathstring === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstring)\"));\n}\n\nvar stats = (function (){try{return cljs_node_io.fs.lstat(pathstring);\n}catch (e6227){if((e6227 instanceof Error)){\nvar e = e6227;\nreturn false;\n} else {\nthrow e6227;\n\n}\n}})();\nif(cljs.core.not(stats)){\nreturn false;\n} else {\nreturn stats.isFile();\n}\n});\n/**\n * Asynchronous file predicate.\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.afile_QMARK_ = (function cljs_node_io$fs$afile_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\nvar stat_ch = cljs_node_io.fs.alstat(pathstr);\ncljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(stat_ch,((function (c,stat_ch){\nreturn (function (p__6231){\nvar vec__6232 = p__6231;\nvar err = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6232,(0),null);\nvar stats = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6232,(1),null);\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(err))?stats.isFile():false));\n});})(c,stat_ch))\n);\n\nreturn c;\n});\n/**\n * @param {!string} pathstr :: path to test\n * @return {!boolean} is pathstr an absolute path\n */\ncljs_node_io.fs.absolute_QMARK_ = (function cljs_node_io$fs$absolute_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nreturn (cljs_node_io.fs.path.isAbsolute.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.path.isAbsolute.cljs$core$IFn$_invoke$arity$1(pathstr) : cljs_node_io.fs.path.isAbsolute.call(null,pathstr));\n});\n/**\n * Synchronously test if a file or directory exists\n * @param {!string} pathstr :: file path to test\n * @return {!boolean}\n */\ncljs_node_io.fs.fexists_QMARK_ = (function cljs_node_io$fs$fexists_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\ntry{cljs_node_io.fs.fs.accessSync(pathstr,cljs_node_io.fs.fs.F_OK);\n\nreturn true;\n}catch (e6238){if((e6238 instanceof Error)){\nvar e = e6238;\nreturn false;\n} else {\nthrow e6238;\n\n}\n}});\n/**\n * Asynchronously test if a file or directory exists\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.afexists_QMARK_ = (function cljs_node_io$fs$afexists_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.access(pathstr,cljs_node_io.fs.fs.F_OK,((function (c){\nreturn (function (e){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(e))?true:false));\n});})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously test if a file is readable to the process\n * @param {!string} pathstr :: path to test for process read permission\n * @return {!boolean}\n */\ncljs_node_io.fs.readable_QMARK_ = (function cljs_node_io$fs$readable_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\ntry{cljs_node_io.fs.fs.accessSync(pathstr,cljs_node_io.fs.fs.R_OK);\n\nreturn true;\n}catch (e6248){if((e6248 instanceof Error)){\nvar e = e6248;\nreturn false;\n} else {\nthrow e6248;\n\n}\n}});\n/**\n * Asynchronously test if a file is readable to the process\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.areadable_QMARK_ = (function cljs_node_io$fs$areadable_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.access(pathstr,cljs_node_io.fs.fs.R_OK,((function (c){\nreturn (function (e){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(e))?true:false));\n});})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously test if a file is writable to the process\n * @param {!string} pathstr :: path to test for process write permission\n * @return {!boolean}\n */\ncljs_node_io.fs.writable_QMARK_ = (function cljs_node_io$fs$writable_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\ntry{cljs_node_io.fs.fs.accessSync(pathstr,cljs_node_io.fs.fs.W_OK);\n\nreturn true;\n}catch (e6256){if((e6256 instanceof Error)){\nvar e = e6256;\nreturn false;\n} else {\nthrow e6256;\n\n}\n}});\n/**\n * Asynchronously test if a file is writable to the process\n * @param {!string} pathstr :: path to test for process write permission\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.awritable_QMARK_ = (function cljs_node_io$fs$awritable_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.access(pathstr,cljs_node_io.fs.fs.W_OK,((function (c){\nreturn (function (e){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(e))?true:false));\n});})(c))\n);\n\nreturn c;\n});\n/**\n * @param {!string} pathstr :: path to test for process executable permission\n * @return {!boolean}\n */\ncljs_node_io.fs.executable_QMARK_ = (function cljs_node_io$fs$executable_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nif(!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"win32\",process.platform))){\ntry{cljs_node_io.fs.fs.accessSync(pathstr,cljs_node_io.fs.fs.X_OK);\n\nreturn true;\n}catch (e6266){if((e6266 instanceof Error)){\nvar e = e6266;\nreturn false;\n} else {\nthrow e6266;\n\n}\n}} else {\nthrow Error(\"Testing if a file is executable has no effect on Windows\");\n}\n});\n/**\n * Asynchronously test if a file is executable to the process\n * @param {!string} pathstr :: path to test for process execute permission\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.aexecutable_QMARK_ = (function cljs_node_io$fs$aexecutable_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nif(!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"win32\",process.platform))){\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.access(pathstr,cljs_node_io.fs.fs.X_OK,((function (c){\nreturn (function (e){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(e))?true:false));\n});})(c))\n);\n\nreturn c;\n} else {\nthrow Error(\"Testing if a file is executable has no effect on Windows\");\n}\n});\n/**\n * Synchronous test for symbolic link\n * @param {!string} pathstr :: path to test\n * @return {!boolean}\n */\ncljs_node_io.fs.symlink_QMARK_ = (function cljs_node_io$fs$symlink_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar stats = (function (){try{return cljs_node_io.fs.lstat(pathstr);\n}catch (e6284){if((e6284 instanceof Error)){\nvar e = e6284;\nreturn false;\n} else {\nthrow e6284;\n\n}\n}})();\nif(cljs.core.not(stats)){\nreturn false;\n} else {\nreturn stats.isSymbolicLink();\n}\n});\n/**\n * Asynchronously test if path is a symbolic link\n * @param {!string} pathstr :: path to test\n * @return {!Channel} promise-chan receiving boolean\n */\ncljs_node_io.fs.asymlink_QMARK_ = (function cljs_node_io$fs$asymlink_QMARK_(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\nvar stat_ch = cljs_node_io.fs.alstat(pathstr);\ncljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(stat_ch,((function (c,stat_ch){\nreturn (function (p__6300){\nvar vec__6301 = p__6300;\nvar err = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6301,(0),null);\nvar stats = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__6301,(1),null);\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,((cljs.core.not(err))?stats.isSymbolicLink():false));\n});})(c,stat_ch))\n);\n\nreturn c;\n});\n/**\n * @param {!string} pathstring :: path to get parent of\n * @return {!string} the parent directory\n */\ncljs_node_io.fs.dirname = (function cljs_node_io$fs$dirname(pathstring){\nreturn cljs_node_io.fs.path.dirname(pathstring);\n});\n/**\n * @return {!string}\n */\ncljs_node_io.fs.basename = (function cljs_node_io$fs$basename(var_args){\nvar G__6308 = arguments.length;\nswitch (G__6308) {\ncase 1:\nreturn cljs_node_io.fs.basename.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs_node_io.fs.basename.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs_node_io.fs.basename.cljs$core$IFn$_invoke$arity$1 = (function (p){\nreturn cljs_node_io.fs.path.basename(p);\n});\n\ncljs_node_io.fs.basename.cljs$core$IFn$_invoke$arity$2 = (function (p,ext){\nreturn cljs_node_io.fs.path.basename(p,ext);\n});\n\ncljs_node_io.fs.basename.cljs$lang$maxFixedArity = 2;\n\n/**\n * @return {!string}\n */\ncljs_node_io.fs.resolve_path = (function cljs_node_io$fs$resolve_path(var_args){\nvar args__4534__auto__ = [];\nvar len__4531__auto___6790 = arguments.length;\nvar i__4532__auto___6791 = (0);\nwhile(true){\nif((i__4532__auto___6791 < len__4531__auto___6790)){\nargs__4534__auto__.push((arguments[i__4532__auto___6791]));\n\nvar G__6792 = (i__4532__auto___6791 + (1));\ni__4532__auto___6791 = G__6792;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4535__auto__ = ((((0) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((0)),(0),null)):null);\nreturn cljs_node_io.fs.resolve_path.cljs$core$IFn$_invoke$arity$variadic(argseq__4535__auto__);\n});\n\ncljs_node_io.fs.resolve_path.cljs$core$IFn$_invoke$arity$variadic = (function (paths){\nreturn cljs_node_io.fs.path.resolve.apply(null,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array,paths));\n});\n\ncljs_node_io.fs.resolve_path.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\ncljs_node_io.fs.resolve_path.cljs$lang$applyTo = (function (seq6312){\nvar self__4519__auto__ = this;\nreturn self__4519__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq6312));\n});\n\n/**\n * @param {!string} pathstring :: pathstring to normalize\n * @return {!string}\n */\ncljs_node_io.fs.normalize_path = (function cljs_node_io$fs$normalize_path(pathstring){\nreturn cljs_node_io.fs.path.normalize(pathstring);\n});\n/**\n * @param {!string} pathstring :: file to get extension from\n * @return {!string}\n */\ncljs_node_io.fs.ext = (function cljs_node_io$fs$ext(pathstring){\nreturn cljs_node_io.fs.path.extname(pathstring);\n});\n/**\n * Synchronous realpath\n * @param {!string} pathstr\n * @return {!string} resolved path\n */\ncljs_node_io.fs.realpath = (function cljs_node_io$fs$realpath(pathstr){\nreturn cljs_node_io.fs.fs.realpathSync(pathstr);\n});\n/**\n * Asynchronous realpath\n * @param {!string} pathstr\n * @return {!Channel} promise-chan recieving [?err ?resolvedPathstr]\n */\ncljs_node_io.fs.arealpath = (function cljs_node_io$fs$arealpath(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.realpath(pathstr,((function (c){\nreturn (function() { \nvar G__6799__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6799 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6800__i = 0, G__6800__a = new Array(arguments.length -  0);\nwhile (G__6800__i < G__6800__a.length) {G__6800__a[G__6800__i] = arguments[G__6800__i + 0]; ++G__6800__i;}\n  args = new cljs.core.IndexedSeq(G__6800__a,0,null);\n} \nreturn G__6799__delegate.call(this,args);};\nG__6799.cljs$lang$maxFixedArity = 0;\nG__6799.cljs$lang$applyTo = (function (arglist__6801){\nvar args = cljs.core.seq(arglist__6801);\nreturn G__6799__delegate(args);\n});\nG__6799.cljs$core$IFn$_invoke$arity$variadic = G__6799__delegate;\nreturn G__6799;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous readlink\n * @param {!string} pathstr :: the symbolic link to read\n * @return {!string} the symbolic link's string value\n */\ncljs_node_io.fs.readlink = (function cljs_node_io$fs$readlink(pathstr){\nreturn cljs_node_io.fs.fs.readlinkSync(pathstr);\n});\n/**\n * Asynchronous readlink\n * @param {!string} pathstr :: the symbolic link to read\n * @return {!Channel} promise-chan receiving [?err ?linkstring]\n */\ncljs_node_io.fs.areadlink = (function cljs_node_io$fs$areadlink(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.readlink(pathstr,((function (c){\nreturn (function() { \nvar G__6802__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6802 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6803__i = 0, G__6803__a = new Array(arguments.length -  0);\nwhile (G__6803__i < G__6803__a.length) {G__6803__a[G__6803__i] = arguments[G__6803__i + 0]; ++G__6803__i;}\n  args = new cljs.core.IndexedSeq(G__6803__a,0,null);\n} \nreturn G__6802__delegate.call(this,args);};\nG__6802.cljs$lang$maxFixedArity = 0;\nG__6802.cljs$lang$applyTo = (function (arglist__6805){\nvar args = cljs.core.seq(arglist__6805);\nreturn G__6802__delegate(args);\n});\nG__6802.cljs$core$IFn$_invoke$arity$variadic = G__6802__delegate;\nreturn G__6802;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously reads directory content\n * @param {!string} dirpath :: directory path to read\n * @return {!IVector} Vector<strings> representing directory content\n */\ncljs_node_io.fs.readdir = (function cljs_node_io$fs$readdir(dirpath){\nif(typeof dirpath === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? dirpath)\"));\n}\n\nreturn cljs.core.vec(cljs_node_io.fs.fs.readdirSync(dirpath));\n});\n/**\n * Asynchronously reads directory content\n * @param {!string} dirpath :: directory path to read\n * @return {!Channel} promise-chan receiving [?err, ?Vector<string>]\n *  where strings are representing directory content\n */\ncljs_node_io.fs.areaddir = (function cljs_node_io$fs$areaddir(dirpath){\nif(typeof dirpath === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? dirpath)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.readdir(dirpath,((function (c){\nreturn (function (e,data){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,cljs.core.vec(data)], null));\n});})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous chmod\n * @param {!string} pathstr\n * @param {!Number} mode :: must be an integer\n * @return {nil} or throws\n */\ncljs_node_io.fs.chmod = (function cljs_node_io$fs$chmod(pathstr,mode){\nreturn cljs_node_io.fs.fs.chmodSync(pathstr,mode);\n});\n/**\n * Asynchronous chmod\n * @param {!string} pathstr\n * @param {!Number} mode :: must be an integer\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.achmod = (function cljs_node_io$fs$achmod(pathstr,mode){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.chmod(pathstr,mode,((function (c){\nreturn (function() { \nvar G__6808__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6808 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6809__i = 0, G__6809__a = new Array(arguments.length -  0);\nwhile (G__6809__i < G__6809__a.length) {G__6809__a[G__6809__i] = arguments[G__6809__i + 0]; ++G__6809__i;}\n  args = new cljs.core.IndexedSeq(G__6809__a,0,null);\n} \nreturn G__6808__delegate.call(this,args);};\nG__6808.cljs$lang$maxFixedArity = 0;\nG__6808.cljs$lang$applyTo = (function (arglist__6810){\nvar args = cljs.core.seq(arglist__6810);\nreturn G__6808__delegate(args);\n});\nG__6808.cljs$core$IFn$_invoke$arity$variadic = G__6808__delegate;\nreturn G__6808;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous lchmod\n * @param {!string} pathstr\n * @param {!Number} mode :: must be an integer\n * @return {nil}\n */\ncljs_node_io.fs.lchmod = (function cljs_node_io$fs$lchmod(pathstr,mode){\nreturn cljs_node_io.fs.fs.lchmodSync(pathstr,mode);\n});\n/**\n * Asynchronous lchmod\n * @param {!string} pathstr\n * @param {!Number} mode :: must be an integer\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.alchmod = (function cljs_node_io$fs$alchmod(pathstr,mode){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.lchmod(pathstr,mode,((function (c){\nreturn (function() { \nvar G__6818__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6818 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6819__i = 0, G__6819__a = new Array(arguments.length -  0);\nwhile (G__6819__i < G__6819__a.length) {G__6819__a[G__6819__i] = arguments[G__6819__i + 0]; ++G__6819__i;}\n  args = new cljs.core.IndexedSeq(G__6819__a,0,null);\n} \nreturn G__6818__delegate.call(this,args);};\nG__6818.cljs$lang$maxFixedArity = 0;\nG__6818.cljs$lang$applyTo = (function (arglist__6820){\nvar args = cljs.core.seq(arglist__6820);\nreturn G__6818__delegate(args);\n});\nG__6818.cljs$core$IFn$_invoke$arity$variadic = G__6818__delegate;\nreturn G__6818;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous chown\n * @param {!string} pathstr\n * @param {!Number} uid\n * @param {!Number} gid\n * @return {nil}\n */\ncljs_node_io.fs.chown = (function cljs_node_io$fs$chown(pathstr,uid,gid){\nreturn cljs_node_io.fs.fs.chownSync(pathstr,uid,gid);\n});\n/**\n * Asynchronous chown\n * @param {!string} pathstr\n * @param {!Number} uid\n * @param {!Number} gid\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.achown = (function cljs_node_io$fs$achown(pathstr,uid,gid){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.chown(pathstr,uid,gid,((function (c){\nreturn (function() { \nvar G__6825__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6825 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6831__i = 0, G__6831__a = new Array(arguments.length -  0);\nwhile (G__6831__i < G__6831__a.length) {G__6831__a[G__6831__i] = arguments[G__6831__i + 0]; ++G__6831__i;}\n  args = new cljs.core.IndexedSeq(G__6831__a,0,null);\n} \nreturn G__6825__delegate.call(this,args);};\nG__6825.cljs$lang$maxFixedArity = 0;\nG__6825.cljs$lang$applyTo = (function (arglist__6832){\nvar args = cljs.core.seq(arglist__6832);\nreturn G__6825__delegate(args);\n});\nG__6825.cljs$core$IFn$_invoke$arity$variadic = G__6825__delegate;\nreturn G__6825;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous lchown\n * @param {!string} pathstr\n * @param {!Number} uid\n * @param {!Number} gid\n * @return {nil} or throws\n */\ncljs_node_io.fs.lchown = (function cljs_node_io$fs$lchown(pathstr,uid,gid){\nreturn cljs_node_io.fs.fs.lchownSync(pathstr,uid,gid);\n});\n/**\n * Asynchronous lchown\n * @param {!string} pathstr\n * @param {!Number} uid\n * @param {!Number} gid\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.alchown = (function cljs_node_io$fs$alchown(pathstr,uid,gid){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.lchown(pathstr,uid,gid,((function (c){\nreturn (function() { \nvar G__6835__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6835 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6837__i = 0, G__6837__a = new Array(arguments.length -  0);\nwhile (G__6837__i < G__6837__a.length) {G__6837__a[G__6837__i] = arguments[G__6837__i + 0]; ++G__6837__i;}\n  args = new cljs.core.IndexedSeq(G__6837__a,0,null);\n} \nreturn G__6835__delegate.call(this,args);};\nG__6835.cljs$lang$maxFixedArity = 0;\nG__6835.cljs$lang$applyTo = (function (arglist__6838){\nvar args = cljs.core.seq(arglist__6838);\nreturn G__6835__delegate(args);\n});\nG__6835.cljs$core$IFn$_invoke$arity$variadic = G__6835__delegate;\nreturn G__6835;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * synchronous utimes\n * - If the value is NaN or Infinity, the value would get converted to Date.now()\n * - numerable strings ie '12235' are converted to numbers\n * @param {!string} pathstr\n * @param {(string|Number)} atime\n * @param {(string|Number)} mtime\n * @return {nil}\n */\ncljs_node_io.fs.utimes = (function cljs_node_io$fs$utimes(pathstr,atime,mtime){\nreturn cljs_node_io.fs.fs.utimesSync(pathstr,atime,mtime);\n});\n/**\n * asynchronous utimes\n * - If the value is NaN or Infinity, the value would get converted to Date.now()\n * - numerable strings ie '12235' are converted to numbers\n * @param {!string} pathstr\n * @param {(string|Number)} atime\n * @param {(string|Number)} mtime\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.autimes = (function cljs_node_io$fs$autimes(pathstr,atime,mtime){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.utimes(pathstr,atime,mtime,((function (c){\nreturn (function() { \nvar G__6841__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6841 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6843__i = 0, G__6843__a = new Array(arguments.length -  0);\nwhile (G__6843__i < G__6843__a.length) {G__6843__a[G__6843__i] = arguments[G__6843__i + 0]; ++G__6843__i;}\n  args = new cljs.core.IndexedSeq(G__6843__a,0,null);\n} \nreturn G__6841__delegate.call(this,args);};\nG__6841.cljs$lang$maxFixedArity = 0;\nG__6841.cljs$lang$applyTo = (function (arglist__6844){\nvar args = cljs.core.seq(arglist__6844);\nreturn G__6841__delegate(args);\n});\nG__6841.cljs$core$IFn$_invoke$arity$variadic = G__6841__delegate;\nreturn G__6841;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously create a directory\n * @param {!string} pathstr :: path of directory to create\n * @return {nil} or throws\n */\ncljs_node_io.fs.mkdir = (function cljs_node_io$fs$mkdir(pathstr){\nreturn cljs_node_io.fs.fs.mkdirSync(pathstr);\n});\n/**\n * Asynchronously create a directory\n * @param {!string} pathstr :: path of directory to create\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.amkdir = (function cljs_node_io$fs$amkdir(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.mkdir(pathstr,((function (c){\nreturn (function() { \nvar G__6847__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6847 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6848__i = 0, G__6848__a = new Array(arguments.length -  0);\nwhile (G__6848__i < G__6848__a.length) {G__6848__a[G__6848__i] = arguments[G__6848__i + 0]; ++G__6848__i;}\n  args = new cljs.core.IndexedSeq(G__6848__a,0,null);\n} \nreturn G__6847__delegate.call(this,args);};\nG__6847.cljs$lang$maxFixedArity = 0;\nG__6847.cljs$lang$applyTo = (function (arglist__6849){\nvar args = cljs.core.seq(arglist__6849);\nreturn G__6847__delegate(args);\n});\nG__6847.cljs$core$IFn$_invoke$arity$variadic = G__6847__delegate;\nreturn G__6847;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously remove a directory\n * @param {!string} pathstr :: path of directory to remove\n * @return {nil} or throws\n */\ncljs_node_io.fs.rmdir = (function cljs_node_io$fs$rmdir(pathstr){\nreturn cljs_node_io.fs.fs.rmdirSync(pathstr);\n});\n/**\n * Asynchronously remove a directory\n * @param {!string} pathstr :: path of directory to remove\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.armdir = (function cljs_node_io$fs$armdir(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.rmdir(pathstr,((function (c){\nreturn (function() { \nvar G__6854__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6854 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6855__i = 0, G__6855__a = new Array(arguments.length -  0);\nwhile (G__6855__i < G__6855__a.length) {G__6855__a[G__6855__i] = arguments[G__6855__i + 0]; ++G__6855__i;}\n  args = new cljs.core.IndexedSeq(G__6855__a,0,null);\n} \nreturn G__6854__delegate.call(this,args);};\nG__6854.cljs$lang$maxFixedArity = 0;\nG__6854.cljs$lang$applyTo = (function (arglist__6856){\nvar args = cljs.core.seq(arglist__6856);\nreturn G__6854__delegate(args);\n});\nG__6854.cljs$core$IFn$_invoke$arity$variadic = G__6854__delegate;\nreturn G__6854;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous link. Will not overwrite newpath if it exists.\n * @param {!string} srcpathstr\n * @param {!string} dstpathstr\n * @return {nil} or throws\n */\ncljs_node_io.fs.link = (function cljs_node_io$fs$link(srcpathstr,dstpathstr){\nif(typeof srcpathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? srcpathstr)\"));\n}\n\nif(typeof dstpathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? dstpathstr)\"));\n}\n\nreturn cljs_node_io.fs.fs.linkSync(srcpathstr,dstpathstr);\n});\n/**\n * Synchronous link. Will not overwrite newpath if it exists.\n * @param {!string} srcpathstr\n * @param {!string} dstpathstr\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.alink = (function cljs_node_io$fs$alink(srcpathstr,dstpathstr){\nif(typeof srcpathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? srcpathstr)\"));\n}\n\nif(typeof dstpathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? dstpathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.link(srcpathstr,dstpathstr,((function (c){\nreturn (function() { \nvar G__6860__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6860 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6861__i = 0, G__6861__a = new Array(arguments.length -  0);\nwhile (G__6861__i < G__6861__a.length) {G__6861__a[G__6861__i] = arguments[G__6861__i + 0]; ++G__6861__i;}\n  args = new cljs.core.IndexedSeq(G__6861__a,0,null);\n} \nreturn G__6860__delegate.call(this,args);};\nG__6860.cljs$lang$maxFixedArity = 0;\nG__6860.cljs$lang$applyTo = (function (arglist__6862){\nvar args = cljs.core.seq(arglist__6862);\nreturn G__6860__delegate(args);\n});\nG__6860.cljs$core$IFn$_invoke$arity$variadic = G__6860__delegate;\nreturn G__6860;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous symlink.\n * @param {!string} target :: what gets pointed to\n * @param {!string} pathstr :: the new symbolic link that points to target\n * @return {nil} or throws\n */\ncljs_node_io.fs.symlink = (function cljs_node_io$fs$symlink(target,pathstr){\nreturn cljs_node_io.fs.fs.symlinkSync(target,pathstr);\n});\n/**\n * Synchronous symlink.\n * @param {!string} targetstr :: what gets pointed to\n * @param {!string} pathstr :: the new symbolic link that points to target\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.asymlink = (function cljs_node_io$fs$asymlink(targetstr,pathstr){\nif(typeof targetstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? targetstr)\"));\n}\n\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.symlink(targetstr,pathstr,((function (c){\nreturn (function() { \nvar G__6864__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6864 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6868__i = 0, G__6868__a = new Array(arguments.length -  0);\nwhile (G__6868__i < G__6868__a.length) {G__6868__a[G__6868__i] = arguments[G__6868__i + 0]; ++G__6868__i;}\n  args = new cljs.core.IndexedSeq(G__6868__a,0,null);\n} \nreturn G__6864__delegate.call(this,args);};\nG__6864.cljs$lang$maxFixedArity = 0;\nG__6864.cljs$lang$applyTo = (function (arglist__6871){\nvar args = cljs.core.seq(arglist__6871);\nreturn G__6864__delegate(args);\n});\nG__6864.cljs$core$IFn$_invoke$arity$variadic = G__6864__delegate;\nreturn G__6864;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously unlink a file.\n * @param {!string} pathstr :: path of file to unlink\n * @return {nil} or throws\n */\ncljs_node_io.fs.unlink = (function cljs_node_io$fs$unlink(pathstr){\nreturn cljs_node_io.fs.fs.unlinkSync(pathstr);\n});\n/**\n * Asynchronously unlink a file\n * @param {!string} pathstr :: path of file to unlink\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.aunlink = (function cljs_node_io$fs$aunlink(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.unlink(pathstr,((function (c){\nreturn (function() { \nvar G__6873__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__6873 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__6878__i = 0, G__6878__a = new Array(arguments.length -  0);\nwhile (G__6878__i < G__6878__a.length) {G__6878__a[G__6878__i] = arguments[G__6878__i + 0]; ++G__6878__i;}\n  args = new cljs.core.IndexedSeq(G__6878__a,0,null);\n} \nreturn G__6873__delegate.call(this,args);};\nG__6873.cljs$lang$maxFixedArity = 0;\nG__6873.cljs$lang$applyTo = (function (arglist__6881){\nvar args = cljs.core.seq(arglist__6881);\nreturn G__6873__delegate(args);\n});\nG__6873.cljs$core$IFn$_invoke$arity$variadic = G__6873__delegate;\nreturn G__6873;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronously delete the file or directory path\n * @param {!string} pathstr :: can be file or directory\n * @return {nil} or throws\n */\ncljs_node_io.fs.rm = (function cljs_node_io$fs$rm(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nif(cljs_node_io.fs.dir_QMARK_(pathstr)){\nreturn cljs_node_io.fs.rmdir(pathstr);\n} else {\nreturn cljs_node_io.fs.unlink(pathstr);\n}\n});\n/**\n * Asynchronously delete the file or directory path\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.arm = (function cljs_node_io$fs$arm(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\nvar dc = cljs_node_io.fs.adir_QMARK_(pathstr);\ncljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2(dc,((function (c,dc){\nreturn (function (d_QMARK_){\nreturn cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2((cljs.core.truth_(d_QMARK_)?cljs_node_io.fs.armdir(pathstr):cljs_node_io.fs.aunlink(pathstr)),((function (c,dc){\nreturn (function (ev){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,ev);\n});})(c,dc))\n);\n});})(c,dc))\n);\n\nreturn c;\n});\n/**\n * @param {!string} pathstr :: path to a directory to recursively delete. Deletes a passed file as well.\n * @return {nil} or throws\n */\ncljs_node_io.fs.rm_r = (function cljs_node_io$fs$rm_r(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nif(cljs.core.boolean$((function (){var fexpr__6415 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [\"/\",null,\"\\\\\\\\\",null,\"\\\\\",null,\"//\",null], null), null);\nreturn (fexpr__6415.cljs$core$IFn$_invoke$arity$1 ? fexpr__6415.cljs$core$IFn$_invoke$arity$1(pathstr) : fexpr__6415.call(null,pathstr));\n})()) === false){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1([\"you just tried to delete root, \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([pathstr], 0))),\", be more careful.\"].join('')),\"\\n\",\"(false? (boolean (#{\\\"/\\\" \\\"\\\\\\\\\\\\\\\\\\\" \\\"\\\\\\\\\\\" \\\"//\\\"} pathstr)))\"].join('')));\n}\n\nif(cljs_node_io.fs.dir_QMARK_(pathstr)){\nvar seq__6416_6892 = cljs.core.seq(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs_node_io.fs.resolve_path,pathstr),cljs_node_io.fs.readdir(pathstr)));\nvar chunk__6417_6893 = null;\nvar count__6418_6894 = (0);\nvar i__6419_6895 = (0);\nwhile(true){\nif((i__6419_6895 < count__6418_6894)){\nvar p_6902 = chunk__6417_6893.cljs$core$IIndexed$_nth$arity$2(null,i__6419_6895);\n(cljs_node_io.fs.rm_r.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.rm_r.cljs$core$IFn$_invoke$arity$1(p_6902) : cljs_node_io.fs.rm_r.call(null,p_6902));\n\n\nvar G__6903 = seq__6416_6892;\nvar G__6904 = chunk__6417_6893;\nvar G__6905 = count__6418_6894;\nvar G__6906 = (i__6419_6895 + (1));\nseq__6416_6892 = G__6903;\nchunk__6417_6893 = G__6904;\ncount__6418_6894 = G__6905;\ni__6419_6895 = G__6906;\ncontinue;\n} else {\nvar temp__5457__auto___6908 = cljs.core.seq(seq__6416_6892);\nif(temp__5457__auto___6908){\nvar seq__6416_6912__$1 = temp__5457__auto___6908;\nif(cljs.core.chunked_seq_QMARK_(seq__6416_6912__$1)){\nvar c__4351__auto___6913 = cljs.core.chunk_first(seq__6416_6912__$1);\nvar G__6914 = cljs.core.chunk_rest(seq__6416_6912__$1);\nvar G__6915 = c__4351__auto___6913;\nvar G__6916 = cljs.core.count(c__4351__auto___6913);\nvar G__6917 = (0);\nseq__6416_6892 = G__6914;\nchunk__6417_6893 = G__6915;\ncount__6418_6894 = G__6916;\ni__6419_6895 = G__6917;\ncontinue;\n} else {\nvar p_6918 = cljs.core.first(seq__6416_6912__$1);\n(cljs_node_io.fs.rm_r.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.rm_r.cljs$core$IFn$_invoke$arity$1(p_6918) : cljs_node_io.fs.rm_r.call(null,p_6918));\n\n\nvar G__6920 = cljs.core.next(seq__6416_6912__$1);\nvar G__6921 = null;\nvar G__6922 = (0);\nvar G__6923 = (0);\nseq__6416_6892 = G__6920;\nchunk__6417_6893 = G__6921;\ncount__6418_6894 = G__6922;\ni__6419_6895 = G__6923;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nreturn cljs_node_io.fs.rmdir(pathstr);\n} else {\nreturn cljs_node_io.fs.unlink(pathstr);\n}\n});\n/**\n * asynchronous recursive delete. Crawls in order provided by readdir and makes unlink/rmdir calls sequentially\n * after the previous has completed. Breaks on any err which is returned as [err].\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.arm_r = (function cljs_node_io$fs$arm_r(pathstr){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nif(cljs.core.boolean$((function (){var fexpr__6439 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [\"/\",null,\"\\\\\\\\\",null,\"\\\\\",null,\"//\",null], null), null);\nreturn (fexpr__6439.cljs$core$IFn$_invoke$arity$1 ? fexpr__6439.cljs$core$IFn$_invoke$arity$1(pathstr) : fexpr__6439.call(null,pathstr));\n})()) === false){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1([\"you just tried to delete root, \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([pathstr], 0))),\", be more careful.\"].join('')),\"\\n\",\"(false? (boolean (#{\\\"/\\\" \\\"\\\\\\\\\\\\\\\\\\\" \\\"\\\\\\\\\\\" \\\"//\\\"} pathstr)))\"].join('')));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\nvar c__3417__auto___6930 = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\ncljs.core.async.impl.dispatch.run(((function (c__3417__auto___6930,c){\nreturn (function (){\nvar f__3418__auto__ = (function (){var switch__3360__auto__ = ((function (c__3417__auto___6930,c){\nreturn (function (state_6518){\nvar state_val_6519 = (state_6518[(1)]);\nif((state_val_6519 === (7))){\nvar inst_6458 = (state_6518[(7)]);\nvar inst_6461 = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs_node_io.fs.resolve_path,pathstr);\nvar inst_6462 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(inst_6461,inst_6458);\nvar inst_6463 = inst_6462;\nvar state_6518__$1 = (function (){var statearr_6522 = state_6518;\n(statearr_6522[(8)] = inst_6463);\n\nreturn statearr_6522;\n})();\nvar statearr_6524_6935 = state_6518__$1;\n(statearr_6524_6935[(2)] = null);\n\n(statearr_6524_6935[(1)] = (10));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (20))){\nvar inst_6497 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6526_6936 = state_6518__$1;\n(statearr_6526_6936[(2)] = inst_6497);\n\n(statearr_6526_6936[(1)] = (9));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (1))){\nvar inst_6445 = cljs_node_io.fs.adir_QMARK_(pathstr);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_6518__$1,(2),inst_6445);\n} else {\nif((state_val_6519 === (24))){\nvar inst_6511 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.put_BANG_(state_6518__$1,(23),c,inst_6511);\n} else {\nif((state_val_6519 === (4))){\nvar inst_6509 = cljs_node_io.fs.aunlink(pathstr);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_6518__$1,(24),inst_6509);\n} else {\nif((state_val_6519 === (15))){\nvar inst_6477 = (state_6518[(9)]);\nvar inst_6476 = (state_6518[(2)]);\nvar inst_6477__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_6476,(0),null);\nvar inst_6478 = (inst_6477__$1 instanceof Error);\nvar state_6518__$1 = (function (){var statearr_6535 = state_6518;\n(statearr_6535[(9)] = inst_6477__$1);\n\nreturn statearr_6535;\n})();\nif(cljs.core.truth_(inst_6478)){\nvar statearr_6538_6942 = state_6518__$1;\n(statearr_6538_6942[(1)] = (16));\n\n} else {\nvar statearr_6540_6943 = state_6518__$1;\n(statearr_6540_6943[(1)] = (17));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (21))){\nvar inst_6495 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.put_BANG_(state_6518__$1,(20),c,inst_6495);\n} else {\nif((state_val_6519 === (13))){\nvar state_6518__$1 = state_6518;\nvar statearr_6543_6944 = state_6518__$1;\n(statearr_6543_6944[(2)] = null);\n\n(statearr_6543_6944[(1)] = (14));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (22))){\nvar inst_6504 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6544_6946 = state_6518__$1;\n(statearr_6544_6946[(2)] = inst_6504);\n\n(statearr_6544_6946[(1)] = (9));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (6))){\nvar inst_6456 = (state_6518[(10)]);\nvar inst_6455 = (state_6518[(2)]);\nvar inst_6456__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_6455,(0),null);\nvar inst_6458 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(inst_6455,(1),null);\nvar inst_6459 = cljs.core.not(inst_6456__$1);\nvar state_6518__$1 = (function (){var statearr_6547 = state_6518;\n(statearr_6547[(7)] = inst_6458);\n\n(statearr_6547[(10)] = inst_6456__$1);\n\nreturn statearr_6547;\n})();\nif(inst_6459){\nvar statearr_6550_6948 = state_6518__$1;\n(statearr_6550_6948[(1)] = (7));\n\n} else {\nvar statearr_6551_6949 = state_6518__$1;\n(statearr_6551_6949[(1)] = (8));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (17))){\nvar inst_6463 = (state_6518[(8)]);\nvar inst_6483 = cljs.core.next(inst_6463);\nvar inst_6463__$1 = inst_6483;\nvar state_6518__$1 = (function (){var statearr_6553 = state_6518;\n(statearr_6553[(8)] = inst_6463__$1);\n\nreturn statearr_6553;\n})();\nvar statearr_6555_6952 = state_6518__$1;\n(statearr_6555_6952[(2)] = null);\n\n(statearr_6555_6952[(1)] = (10));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (3))){\nvar inst_6453 = cljs_node_io.fs.areaddir(pathstr);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_6518__$1,(6),inst_6453);\n} else {\nif((state_val_6519 === (12))){\nvar inst_6463 = (state_6518[(8)]);\nvar inst_6473 = cljs.core.first(inst_6463);\nvar inst_6474 = (cljs_node_io.fs.arm_r.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.arm_r.cljs$core$IFn$_invoke$arity$1(inst_6473) : cljs_node_io.fs.arm_r.call(null,inst_6473));\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_6518__$1,(15),inst_6474);\n} else {\nif((state_val_6519 === (2))){\nvar inst_6447 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nif(cljs.core.truth_(inst_6447)){\nvar statearr_6558_6967 = state_6518__$1;\n(statearr_6558_6967[(1)] = (3));\n\n} else {\nvar statearr_6560_6968 = state_6518__$1;\n(statearr_6560_6968[(1)] = (4));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (23))){\nvar inst_6513 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6561_6969 = state_6518__$1;\n(statearr_6561_6969[(2)] = inst_6513);\n\n(statearr_6561_6969[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (19))){\nvar inst_6481 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6562_6971 = state_6518__$1;\n(statearr_6562_6971[(2)] = inst_6481);\n\n(statearr_6562_6971[(1)] = (18));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (11))){\nvar inst_6491 = (state_6518[(2)]);\nvar inst_6493 = cljs_node_io.fs.armdir(pathstr);\nvar state_6518__$1 = (function (){var statearr_6565 = state_6518;\n(statearr_6565[(11)] = inst_6491);\n\nreturn statearr_6565;\n})();\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_6518__$1,(21),inst_6493);\n} else {\nif((state_val_6519 === (9))){\nvar inst_6506 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6570_6984 = state_6518__$1;\n(statearr_6570_6984[(2)] = inst_6506);\n\n(statearr_6570_6984[(1)] = (5));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (5))){\nvar inst_6515 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_6518__$1,inst_6515);\n} else {\nif((state_val_6519 === (14))){\nvar inst_6489 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6572_6987 = state_6518__$1;\n(statearr_6572_6987[(2)] = inst_6489);\n\n(statearr_6572_6987[(1)] = (11));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (16))){\nvar inst_6477 = (state_6518[(9)]);\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.put_BANG_(state_6518__$1,(19),c,inst_6477);\n} else {\nif((state_val_6519 === (10))){\nvar inst_6463 = (state_6518[(8)]);\nvar inst_6466 = (inst_6463 == null);\nvar inst_6467 = cljs.core.not(inst_6466);\nvar state_6518__$1 = state_6518;\nif(inst_6467){\nvar statearr_6574_6991 = state_6518__$1;\n(statearr_6574_6991[(1)] = (12));\n\n} else {\nvar statearr_6575_6992 = state_6518__$1;\n(statearr_6575_6992[(1)] = (13));\n\n}\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (18))){\nvar inst_6486 = (state_6518[(2)]);\nvar state_6518__$1 = state_6518;\nvar statearr_6577_6998 = state_6518__$1;\n(statearr_6577_6998[(2)] = inst_6486);\n\n(statearr_6577_6998[(1)] = (14));\n\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nif((state_val_6519 === (8))){\nvar inst_6456 = (state_6518[(10)]);\nvar inst_6500 = cljs.core.PersistentVector.EMPTY_NODE;\nvar inst_6501 = [inst_6456];\nvar inst_6502 = (new cljs.core.PersistentVector(null,1,(5),inst_6500,inst_6501,null));\nvar state_6518__$1 = state_6518;\nreturn cljs.core.async.impl.ioc_helpers.put_BANG_(state_6518__$1,(22),c,inst_6502);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n});})(c__3417__auto___6930,c))\n;\nreturn ((function (switch__3360__auto__,c__3417__auto___6930,c){\nreturn (function() {\nvar cljs_node_io$fs$arm_r_$_state_machine__3361__auto__ = null;\nvar cljs_node_io$fs$arm_r_$_state_machine__3361__auto____0 = (function (){\nvar statearr_6582 = [null,null,null,null,null,null,null,null,null,null,null,null];\n(statearr_6582[(0)] = cljs_node_io$fs$arm_r_$_state_machine__3361__auto__);\n\n(statearr_6582[(1)] = (1));\n\nreturn statearr_6582;\n});\nvar cljs_node_io$fs$arm_r_$_state_machine__3361__auto____1 = (function (state_6518){\nwhile(true){\nvar ret_value__3362__auto__ = (function (){try{while(true){\nvar result__3363__auto__ = switch__3360__auto__(state_6518);\nif(cljs.core.keyword_identical_QMARK_(result__3363__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\ncontinue;\n} else {\nreturn result__3363__auto__;\n}\nbreak;\n}\n}catch (e6586){if((e6586 instanceof Object)){\nvar ex__3364__auto__ = e6586;\nvar statearr_6587_7001 = state_6518;\n(statearr_6587_7001[(5)] = ex__3364__auto__);\n\n\ncljs.core.async.impl.ioc_helpers.process_exception(state_6518);\n\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\n} else {\nthrow e6586;\n\n}\n}})();\nif(cljs.core.keyword_identical_QMARK_(ret_value__3362__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\nvar G__7002 = state_6518;\nstate_6518 = G__7002;\ncontinue;\n} else {\nreturn ret_value__3362__auto__;\n}\nbreak;\n}\n});\ncljs_node_io$fs$arm_r_$_state_machine__3361__auto__ = function(state_6518){\nswitch(arguments.length){\ncase 0:\nreturn cljs_node_io$fs$arm_r_$_state_machine__3361__auto____0.call(this);\ncase 1:\nreturn cljs_node_io$fs$arm_r_$_state_machine__3361__auto____1.call(this,state_6518);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\ncljs_node_io$fs$arm_r_$_state_machine__3361__auto__.cljs$core$IFn$_invoke$arity$0 = cljs_node_io$fs$arm_r_$_state_machine__3361__auto____0;\ncljs_node_io$fs$arm_r_$_state_machine__3361__auto__.cljs$core$IFn$_invoke$arity$1 = cljs_node_io$fs$arm_r_$_state_machine__3361__auto____1;\nreturn cljs_node_io$fs$arm_r_$_state_machine__3361__auto__;\n})()\n;})(switch__3360__auto__,c__3417__auto___6930,c))\n})();\nvar state__3419__auto__ = (function (){var statearr_6592 = (f__3418__auto__.cljs$core$IFn$_invoke$arity$0 ? f__3418__auto__.cljs$core$IFn$_invoke$arity$0() : f__3418__auto__.call(null));\n(statearr_6592[(6)] = c__3417__auto___6930);\n\nreturn statearr_6592;\n})();\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__3419__auto__);\n});})(c__3417__auto___6930,c))\n);\n\n\nreturn c;\n});\n/**\n * Synchronously rename a file.\n * @param {!string} oldpathstr :: file to rename\n * @param {!string} newpathstr :: what to rename it to\n * @return {nil}\n */\ncljs_node_io.fs.rename = (function cljs_node_io$fs$rename(oldpathstr,newpathstr){\nreturn cljs_node_io.fs.fs.renameSync(oldpathstr,newpathstr);\n});\n/**\n * Asynchronously rename a file\n * @param {!string} oldpathstr :: file to rename\n * @param {!string} newpathstr :: what to rename it to\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.arename = (function cljs_node_io$fs$arename(oldpathstr,newpathstr){\nif(typeof oldpathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? oldpathstr)\"));\n}\n\nif(typeof newpathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? newpathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.rename(oldpathstr,newpathstr,((function (c){\nreturn (function() { \nvar G__7011__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__7011 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__7012__i = 0, G__7012__a = new Array(arguments.length -  0);\nwhile (G__7012__i < G__7012__a.length) {G__7012__a[G__7012__i] = arguments[G__7012__i + 0]; ++G__7012__i;}\n  args = new cljs.core.IndexedSeq(G__7012__a,0,null);\n} \nreturn G__7011__delegate.call(this,args);};\nG__7011.cljs$lang$maxFixedArity = 0;\nG__7011.cljs$lang$applyTo = (function (arglist__7013){\nvar args = cljs.core.seq(arglist__7013);\nreturn G__7011__delegate(args);\n});\nG__7011.cljs$core$IFn$_invoke$arity$variadic = G__7011__delegate;\nreturn G__7011;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * Synchronous truncate\n * @param {!string} pathstr\n * @param {!number} length\n * @return {nil} or throws\n */\ncljs_node_io.fs.truncate = (function cljs_node_io$fs$truncate(pathstr,length){\nreturn cljs_node_io.fs.fs.truncateSync(pathstr,length);\n});\n/**\n * Asynchronous truncate\n * @param {!string} pathstr\n * @param {!number} len\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.atruncate = (function cljs_node_io$fs$atruncate(pathstr,len){\nif(typeof pathstr === 'string'){\n} else {\nthrow (new Error(\"Assert failed: (string? pathstr)\"));\n}\n\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.truncate(pathstr,len,((function (c){\nreturn (function() { \nvar G__7015__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__7015 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__7017__i = 0, G__7017__a = new Array(arguments.length -  0);\nwhile (G__7017__i < G__7017__a.length) {G__7017__a[G__7017__i] = arguments[G__7017__i + 0]; ++G__7017__i;}\n  args = new cljs.core.IndexedSeq(G__7017__a,0,null);\n} \nreturn G__7015__delegate.call(this,args);};\nG__7015.cljs$lang$maxFixedArity = 0;\nG__7015.cljs$lang$applyTo = (function (arglist__7018){\nvar args = cljs.core.seq(arglist__7018);\nreturn G__7015__delegate(args);\n});\nG__7015.cljs$core$IFn$_invoke$arity$variadic = G__7015__delegate;\nreturn G__7015;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * @param {!string} pathstr :: the file path to read\n * @param {!string} enc :: encoding , if \"\" (an explicit empty string), => raw buffer\n * @return {(buffer.Buffer|string)} or throw\n */\ncljs_node_io.fs.readFile = (function cljs_node_io$fs$readFile(pathstr,enc){\nreturn cljs_node_io.fs.fs.readFileSync(pathstr,enc);\n});\n/**\n * @param {!string} pathstr\n * @param {!string} enc :: if \"\" (an explicit empty string) => raw buffer\n * @return {!Channel} promise-chan receiving [?err ?(str|Buffer)] on successful read\n */\ncljs_node_io.fs.areadFile = (function cljs_node_io$fs$areadFile(pathstr,enc){\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.readFile(pathstr,enc,((function (c){\nreturn (function() { \nvar G__7021__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__7021 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__7022__i = 0, G__7022__a = new Array(arguments.length -  0);\nwhile (G__7022__i < G__7022__a.length) {G__7022__a[G__7022__i] = arguments[G__7022__i + 0]; ++G__7022__i;}\n  args = new cljs.core.IndexedSeq(G__7022__a,0,null);\n} \nreturn G__7021__delegate.call(this,args);};\nG__7021.cljs$lang$maxFixedArity = 0;\nG__7021.cljs$lang$applyTo = (function (arglist__7023){\nvar args = cljs.core.seq(arglist__7023);\nreturn G__7021__delegate(args);\n});\nG__7021.cljs$core$IFn$_invoke$arity$variadic = G__7021__delegate;\nreturn G__7021;\n})()\n;})(c))\n);\n\nreturn c;\n});\n/**\n * synchronously writes content to file represented by pathstring.\n * @param {!string} pathstr :: file to write to\n * @param {(string|buffer.Buffer)} content :: if buffer, :encoding is ignored\n * @param {?IMap} opts :: {:encoding {string}, :append {boolean}, :flags {string}, :mode {int}}\n *  - flags override append\n *  - :encoding defaults to utf8\n * @return {nil} or throws\n */\ncljs_node_io.fs.writeFile = (function cljs_node_io$fs$writeFile(pathstr,content,opts){\nreturn cljs_node_io.fs.fs.writeFileSync(pathstr,content,({\"flag\": (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"flags\",\"flags\",1775418075).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"append\",\"append\",-291298229).cljs$core$IFn$_invoke$arity$1(opts))){\nreturn \"a\";\n} else {\nreturn \"w\";\n}\n}\n})(), \"mode\": (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"mode\",\"mode\",654403691).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn (438);\n}\n})(), \"encoding\": (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"encoding\",\"encoding\",1728578272).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn \"utf8\";\n}\n})()}));\n});\n/**\n * Asynchronously write to a file.\n * @param {!string} pathstring : file to write to\n * @param {(string|buffer.Buffer)} content : if buffer, :encoding is ignored\n * @param {?IMap} opts : :encoding {string}, :append {bool}, :flags {string}, :mode {int}\n *  - flags override append\n * @return {!Channel} promise-chan recieving [?err]\n */\ncljs_node_io.fs.awriteFile = (function cljs_node_io$fs$awriteFile(pathstring,content,opts){\nvar c = cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0();\ncljs_node_io.fs.fs.writeFile(pathstring,content,({\"flag\": (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"flags\",\"flags\",1775418075).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"append\",\"append\",-291298229).cljs$core$IFn$_invoke$arity$1(opts))){\nreturn \"a\";\n} else {\nreturn \"w\";\n}\n}\n})(), \"mode\": (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"mode\",\"mode\",654403691).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn (438);\n}\n})(), \"encoding\": (function (){var or__3949__auto__ = new cljs.core.Keyword(null,\"encoding\",\"encoding\",1728578272).cljs$core$IFn$_invoke$arity$1(opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn \"utf8\";\n}\n})()}),((function (c){\nreturn (function() { \nvar G__7032__delegate = function (args){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(c,cljs.core.vec(args));\n};\nvar G__7032 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__7036__i = 0, G__7036__a = new Array(arguments.length -  0);\nwhile (G__7036__i < G__7036__a.length) {G__7036__a[G__7036__i] = arguments[G__7036__i + 0]; ++G__7036__i;}\n  args = new cljs.core.IndexedSeq(G__7036__a,0,null);\n} \nreturn G__7032__delegate.call(this,args);};\nG__7032.cljs$lang$maxFixedArity = 0;\nG__7032.cljs$lang$applyTo = (function (arglist__7037){\nvar args = cljs.core.seq(arglist__7037);\nreturn G__7032__delegate(args);\n});\nG__7032.cljs$core$IFn$_invoke$arity$variadic = G__7032__delegate;\nreturn G__7032;\n})()\n;})(c))\n);\n\nreturn c;\n});\ncljs_node_io.fs.watcher__GT_ch = (function cljs_node_io$fs$watcher__GT_ch(var_args){\nvar G__6616 = arguments.length;\nswitch (G__6616) {\ncase 2:\nreturn cljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn cljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$2 = (function (FSWatcher,out_ch){\nreturn cljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$3(FSWatcher,out_ch,null);\n});\n\ncljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$3 = (function (FSWatcher,out_ch,p__6617){\nvar map__6618 = p__6617;\nvar map__6618__$1 = ((((!((map__6618 == null)))?(((((map__6618.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__6618.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__6618):map__6618);\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6618__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nvar buf_or_n = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__6618__$1,new cljs.core.Keyword(null,\"buf-or-n\",\"buf-or-n\",1007620719),(10));\nvar G__6620_7042 = FSWatcher;\nG__6620_7042.on(\"change\",((function (G__6620_7042,map__6618,map__6618__$1,key,buf_or_n){\nreturn (function (eventType,filename){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(out_ch,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(eventType)], null));\n});})(G__6620_7042,map__6618,map__6618__$1,key,buf_or_n))\n);\n\nG__6620_7042.on(\"error\",((function (G__6620_7042,map__6618,map__6618__$1,key,buf_or_n){\nreturn (function (e){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(out_ch,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null)], null));\n});})(G__6620_7042,map__6618,map__6618__$1,key,buf_or_n))\n);\n\n\nreturn out_ch;\n});\n\ncljs_node_io.fs.watcher__GT_ch.cljs$lang$maxFixedArity = 3;\n\n\n/**\n* @constructor\n * @implements {cljs.core.async.impl.protocols.ReadPort}\n*/\ncljs_node_io.fs.Watcher = (function (FSWatcher,out){\nthis.FSWatcher = FSWatcher;\nthis.out = out;\n});\ncljs_node_io.fs.Watcher.prototype.cljs$core$async$impl$protocols$ReadPort$ = cljs.core.PROTOCOL_SENTINEL;\n\ncljs_node_io.fs.Watcher.prototype.cljs$core$async$impl$protocols$ReadPort$take_BANG_$arity$2 = (function (this$,handler){\nvar self__ = this;\nvar this$__$1 = this;\nreturn cljs.core.async.impl.protocols.take_BANG_(self__.out,handler);\n});\n\ncljs_node_io.fs.Watcher.prototype.close = (function (){\nvar self__ = this;\nvar this$ = this;\nself__.FSWatcher.close();\n\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3(self__.out,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"close\",\"close\",1835149582)], null),((function (this$){\nreturn (function (){\nreturn cljs.core.async.close_BANG_(self__.out);\n});})(this$))\n);\n});\n\ncljs_node_io.fs.Watcher.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"FSWatcher\",\"FSWatcher\",-1658877931,null),new cljs.core.Symbol(null,\"out\",\"out\",729986010,null)], null);\n});\n\ncljs_node_io.fs.Watcher.cljs$lang$type = true;\n\ncljs_node_io.fs.Watcher.cljs$lang$ctorStr = \"cljs-node-io.fs/Watcher\";\n\ncljs_node_io.fs.Watcher.cljs$lang$ctorPrWriter = (function (this__4192__auto__,writer__4193__auto__,opt__4194__auto__){\nreturn cljs.core._write(writer__4193__auto__,\"cljs-node-io.fs/Watcher\");\n});\n\n/**\n * Positional factory function for cljs-node-io.fs/Watcher.\n */\ncljs_node_io.fs.__GT_Watcher = (function cljs_node_io$fs$__GT_Watcher(FSWatcher,out){\nreturn (new cljs_node_io.fs.Watcher(FSWatcher,out));\n});\n\n/**\n * Watch a file or directory.\n * Make note of caveats https://nodejs.org/api/fs.html#fs_caveats\n * events : 'rename', 'change' , 'error', 'close'\n * opts :\n *  :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n *  :recursive {boolean} (false) :: watch subdirectories\n *  :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n *  :encoding {string} ('utf8') :: used to interpret passed filename\n * @return {!Watcher}\n */\ncljs_node_io.fs.watch = (function cljs_node_io$fs$watch(var_args){\nvar G__6625 = arguments.length;\nswitch (G__6625) {\ncase 1:\nreturn cljs_node_io.fs.watch.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs_node_io.fs.watch.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs_node_io.fs.watch.cljs$core$IFn$_invoke$arity$1 = (function (filename){\nreturn cljs_node_io.fs.watch.cljs$core$IFn$_invoke$arity$2(filename,null);\n});\n\ncljs_node_io.fs.watch.cljs$core$IFn$_invoke$arity$2 = (function (filename,opts){\nvar defaults = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"persistent\",\"persistent\",885415113),true,new cljs.core.Keyword(null,\"recursive\",\"recursive\",718885872),false,new cljs.core.Keyword(null,\"encoding\",\"encoding\",1728578272),\"utf8\",new cljs.core.Keyword(null,\"buf-or-n\",\"buf-or-n\",1007620719),(10)], null);\nvar opts__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([defaults,opts], 0));\nvar key = (function (){var or__3949__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn filename;\n}\n})();\nvar out = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts__$1,new cljs.core.Keyword(null,\"buf-or-n\",\"buf-or-n\",1007620719)),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (defaults,opts__$1,key){\nreturn (function (p1__6623_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key], null),p1__6623_SHARP_);\n});})(defaults,opts__$1,key))\n));\nvar w = (function (){var G__6626 = filename;\nvar G__6627 = cljs.core.clj__GT_js(opts__$1);\nreturn (cljs_node_io.fs.fs.watch.cljs$core$IFn$_invoke$arity$2 ? cljs_node_io.fs.fs.watch.cljs$core$IFn$_invoke$arity$2(G__6626,G__6627) : cljs_node_io.fs.fs.watch.call(null,G__6626,G__6627));\n})();\nreturn cljs_node_io.fs.__GT_Watcher(w,cljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$2(w,out));\n});\n\ncljs_node_io.fs.watch.cljs$lang$maxFixedArity = 2;\n\n/**\n * Prefer watch. Polls files and returns stat objects. Opts:\n *   :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n *   :interval {number} (5007) :: polling interval in msecs\n *   :edn? {boolean} (true) :: converts stats to edn\n *   :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n * @return {!Channel} <= [filename [current fs.stat, previous fs.stat]]\n */\ncljs_node_io.fs.watchFile = (function cljs_node_io$fs$watchFile(var_args){\nvar G__6633 = arguments.length;\nswitch (G__6633) {\ncase 1:\nreturn cljs_node_io.fs.watchFile.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs_node_io.fs.watchFile.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs_node_io.fs.watchFile.cljs$core$IFn$_invoke$arity$1 = (function (filename){\nreturn cljs_node_io.fs.watchFile.cljs$core$IFn$_invoke$arity$2(filename,null);\n});\n\ncljs_node_io.fs.watchFile.cljs$core$IFn$_invoke$arity$2 = (function (filename,opts){\nvar defaults = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),(5007),new cljs.core.Keyword(null,\"persistent\",\"persistent\",885415113),true,new cljs.core.Keyword(null,\"edn?\",\"edn?\",-499466946),true,new cljs.core.Keyword(null,\"buf-or-n\",\"buf-or-n\",1007620719),(10)], null);\nvar map__6638 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([defaults,opts], 0));\nvar map__6638__$1 = ((((!((map__6638 == null)))?(((((map__6638.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__6638.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__6638):map__6638);\nvar opts__$1 = map__6638__$1;\nvar edn_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6638__$1,new cljs.core.Keyword(null,\"edn?\",\"edn?\",-499466946));\nvar buf_or_n = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__6638__$1,new cljs.core.Keyword(null,\"buf-or-n\",\"buf-or-n\",1007620719));\nvar out = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2(buf_or_n,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (defaults,map__6638,map__6638__$1,opts__$1,edn_QMARK_,buf_or_n){\nreturn (function (p1__6631_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [filename], null),p1__6631_SHARP_);\n});})(defaults,map__6638,map__6638__$1,opts__$1,edn_QMARK_,buf_or_n))\n));\nvar cb = ((function (defaults,map__6638,map__6638__$1,opts__$1,edn_QMARK_,buf_or_n,out){\nreturn (function (curr,prev){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(out,(cljs.core.truth_(edn_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs_node_io.fs.stat__GT_clj(curr),cljs_node_io.fs.stat__GT_clj(prev)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [curr,prev], null)));\n});})(defaults,map__6638,map__6638__$1,opts__$1,edn_QMARK_,buf_or_n,out))\n;\nvar w = (function (){var G__6648 = filename;\nvar G__6649 = cljs.core.clj__GT_js(opts__$1);\nvar G__6650 = cb;\nreturn (cljs_node_io.fs.fs.watchFile.cljs$core$IFn$_invoke$arity$3 ? cljs_node_io.fs.fs.watchFile.cljs$core$IFn$_invoke$arity$3(G__6648,G__6649,G__6650) : cljs_node_io.fs.fs.watchFile.call(null,G__6648,G__6649,G__6650));\n})();\nreturn out;\n});\n\ncljs_node_io.fs.watchFile.cljs$lang$maxFixedArity = 2;\n\n/**\n * remove all watchers from a file\n * @param {!string} pathstr\n * @return {nil}\n */\ncljs_node_io.fs.unwatchFile = (function cljs_node_io$fs$unwatchFile(pathstr){\nreturn (cljs_node_io.fs.fs.unwatchFile.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.fs.unwatchFile.cljs$core$IFn$_invoke$arity$1(pathstr) : cljs_node_io.fs.fs.unwatchFile.call(null,pathstr));\n});\n/**\n * creates a file if non-existent, writes blank string to an existing\n * @param {!string} pathstr\n * @return {nil}\n */\ncljs_node_io.fs.touch = (function cljs_node_io$fs$touch(pathstr){\nreturn cljs_node_io.fs.writeFile(pathstr,\"\",null);\n});\n/**\n * creates a file if non-existent, writes blank string to an existing\n * @param {!string} pathstr\n * @return {!Channel} promise-chan receiving [?err]\n */\ncljs_node_io.fs.atouch = (function cljs_node_io$fs$atouch(pathstr){\nreturn cljs_node_io.fs.awriteFile(pathstr,\"\",null);\n});\ncljs_node_io.fs.rl = require(\"readline\");\n/**\n * A simple file line reader.\n * @param {!string} pathstr\n * @return {!Channel} chan receiving [?err ?line] until file is consumed,\n * and then the channel closes.\n */\ncljs_node_io.fs.readline = (function cljs_node_io$fs$readline(pathstr){\nvar out = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((10));\nvar in$ = (cljs_node_io.fs.fs.createReadStream.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.fs.createReadStream.cljs$core$IFn$_invoke$arity$1(pathstr) : cljs_node_io.fs.fs.createReadStream.call(null,pathstr));\nvar _ = out.in = in$;\nvar r = (function (){var G__6661 = ({\"input\": in$, \"crlfDelay\": Infinity});\nreturn (cljs_node_io.fs.rl.createInterface.cljs$core$IFn$_invoke$arity$1 ? cljs_node_io.fs.rl.createInterface.cljs$core$IFn$_invoke$arity$1(G__6661) : cljs_node_io.fs.rl.createInterface.call(null,G__6661));\n})();\nvar G__6663_7063 = in$;\nG__6663_7063.on(\"error\",((function (G__6663_7063,out,in$,_,r){\nreturn (function (e){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [e], null));\n});})(G__6663_7063,out,in$,_,r))\n);\n\nG__6663_7063.on(\"close\",((function (G__6663_7063,out,in$,_,r){\nreturn (function (){\nreturn cljs.core.async.close_BANG_(out);\n});})(G__6663_7063,out,in$,_,r))\n);\n\n\nvar G__6664_7076 = r;\nG__6664_7076.on(\"line\",((function (G__6664_7076,out,in$,_,r){\nreturn (function (line){\nreturn cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2(out,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,line], null));\n});})(G__6664_7076,out,in$,_,r))\n);\n\n\nreturn out;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A wrapper around node's fs module.","~:file","cljs_node_io/fs.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$jsonwebtoken","~$shadow.js.shim.module$jsonwebtoken","~$mqtt","~$shadow.js.shim.module$mqtt","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",["^ ","~$try-true","~$cljs-node-io.macros","~$with-chan","^I","~$with-bool-chan","^I","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$cljs-node-io.fs","~:op","~:ns","~:imports",null,"~:requires",["^ ","^D","^D","~$async","^D","~$cljs.core.async.impl.protocols","^W","~$impl","^W","~$cljs.core","^Y","~$goog","^Z"],"~:seen",["^O",["~:require","~:require-macros"]],"~:uses",["^ ","~$put!","^D","~$take!","^D","~$close!","^D","~$promise-chan","^D","~$chan","^D","~$Channel","^W"],"^11",["^ ","^I","^I","^M","^M","^Y","^Y","^D","^D","^V","^D"],"~:form",["~#list",["~$ns","^Q","A wrapper around node's fs module.",["^1:",["^11",["^I","~:refer",["^H","^J","^K"]],["^M","^1<",["^L"]]]],["^1:",["^10",["^D","~:as","^V","^1<",["^13","^14","^15","^16","^17"]],["^W","^1=","^X","^1<",["^18"]]]]]],"~:flags",["^ ","^11",["^O",[]],"^10",["^O",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^Y","^D","^W"]],"^S","^Q","~:resource-id",["~:shadow.build.classpath/resource","cljs_node_io/fs.cljs"],"~:compiled-at",1540143592193,"~:resource-name","cljs_node_io/fs.cljs","~:warnings",[],"~:source","(ns cljs-node-io.fs \"A wrapper around node's fs module.\"\n  (:require-macros [cljs-node-io.macros :refer [try-true with-chan with-bool-chan]]\n                   [cljs.core.async.macros :refer [go]])\n  (:require [cljs.core.async :as async :refer [put! take! close! promise-chan chan]]\n            [cljs.core.async.impl.protocols :as impl :refer [Channel]]))\n\n(def fs (js/require \"fs\"))\n(def path (js/require \"path\"))\n(def ^{:doc \"@type {!string}\"} sep (.-sep path))\n\n(defn stat\n  \"Synchronous stat\n   @param {!string} pathstring\n   @return {!fs.Stats} file stats object\"\n  [pathstring]\n  (.statSync fs pathstring))\n\n(defn astat\n  \"Asynchronous stat\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err ?fs.Stats]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.stat fs pathstr)))\n\n(defn lstat\n  \"Synchronous lstat identical to stat(), except that if path is a symbolic link,\n   then the link itself is stat-ed, not the file that it refers to\n   @param {!string} pathstr\n   @return {!fs.Stats} file stats object\"\n  [pathstr]\n  (.lstatSync fs pathstr))\n\n(defn alstat\n  \"Asynchronous lstat\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err ?fs.Stats]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.lstat fs pathstr)))\n\n(defn stat->clj\n  \"Convert a fs.Stats object to edn. Function are swapped out for their return values.\n   This is useful at repl but not particularly efficient.\n   @param {!fs.Stats} st\n   @return {!IMap}\"\n  [st]\n  (let [ks (goog.object.getKeys st)\n        vs (goog.object.getValues st)]\n    (into {}\n      (comp\n        (remove #(= (nth % 0) \"_checkModeProperty\"))\n        (map (fn [[k v]] [(keyword k) (if (fn? v) (.apply v st) v)])))\n      (map vector ks vs))))\n\n(defn- bita->int\n  \"@param {!Array<!Number>} bita :: an array of 1s an 0s\n   @return {!Number} integer\"\n  [bita]\n  (js/parseInt (.join bita \"\") 2))\n\n(defn- stat->perm-bita\n  \"@param {!fs.Stats} s :: a fs.Stats object\n   @return {!Array<Number>}\"\n  [s]\n  (let [mode (aget s \"mode\")\n        ownr (bit-and mode 256)\n        ownw (bit-and mode 128)\n        ownx (bit-and mode 64)\n        grpr (bit-and mode 32)\n        grpw (bit-and mode 16)\n        grpx (bit-and mode 8)\n        othr (bit-and mode 4)\n        othw (bit-and mode 2)\n        othx (bit-and mode 1)\n        a #js [ownr ownw ownx grpr grpw grpx othr othw othx]]\n    (amap a i res (if-not (zero? (aget a i)) 1 0))))\n\n(defn permissions\n  \"@param {!fs.Stats} st\n   @return {!Number}\"\n  [st] (-> st stat->perm-bita bita->int))\n\n(defn gid-uid\n  \"@return {!IMap}\"\n  []{:gid (.getgid js/process) :uid (.getuid js/process)})\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; predicates/\n\n(defn ^boolean hidden?\n  \"@param {!string} pathstr\n   @return {!boolean} is the file hidden (unix only)\"\n  [pathstr]\n  (.test (js/RegExp. \"(^|\\\\/)\\\\.[^\\\\/\\\\.]\" ) pathstr))\n\n(defn ^boolean dir?\n  \"@param {!string} pathstring\n   @return {!boolean} iff abstract pathname exists and is a directory\"\n  [pathstring]\n  (assert (string? pathstring))\n  (let [stats (try (.statSync fs pathstring) (catch js/Error e false))]\n    (if-not stats\n      false\n      (.isDirectory stats))))\n\n(defn adir?\n  \"Asynchronous directory predicate.\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (let [c (promise-chan)\n        stat-ch (astat pathstr)]\n    (take! stat-ch\n      (fn [[err stats]]\n        (put! c\n          (if-not err\n            (.isDirectory stats)\n            false))))\n    c))\n\n(defn ^boolean file?\n  \"Synchronous file predicate\n   @param {!string} pathstring\n   @return {!boolean} iff abstract pathname exists and is a file\"\n  [pathstring]\n  (assert (string? pathstring))\n  (let [stats (try (lstat pathstring) (catch js/Error e false))]\n    (if-not stats\n      false\n      (.isFile stats))))\n\n(defn afile?\n  \"Asynchronous file predicate.\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (let [c (promise-chan)\n        stat-ch (alstat pathstr)]\n    (take! stat-ch\n      (fn [[err stats]]\n        (put! c (if-not err (.isFile stats) false))))\n    c))\n\n(defn ^boolean absolute?\n  \"@param {!string} pathstr :: path to test\n   @return {!boolean} is pathstr an absolute path\"\n  [pathstr]\n  (assert (string? pathstr))\n  (path.isAbsolute pathstr))\n\n(defn ^boolean fexists?\n  \"Synchronously test if a file or directory exists\n   @param {!string} pathstr :: file path to test\n   @return {!boolean}\"\n  [pathstr]\n  (assert (string? pathstr))\n  (try-true (.accessSync fs pathstr (.-F_OK fs))))\n\n(defn afexists?\n  \"Asynchronously test if a file or directory exists\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-bool-chan (.access fs pathstr (.-F_OK fs))))\n\n(defn ^boolean readable?\n  \"Synchronously test if a file is readable to the process\n   @param {!string} pathstr :: path to test for process read permission\n   @return {!boolean}\"\n  [pathstr]\n  (assert (string? pathstr))\n  (try-true (.accessSync fs pathstr (.-R_OK fs))))\n\n(defn areadable?\n  \"Asynchronously test if a file is readable to the process\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-bool-chan (.access fs pathstr (.-R_OK fs))))\n\n(defn ^boolean writable?\n  \"Synchronously test if a file is writable to the process\n   @param {!string} pathstr :: path to test for process write permission\n   @return {!boolean}\"\n  [pathstr]\n  (assert (string? pathstr))\n  (try-true (.accessSync fs pathstr (.-W_OK fs))))\n\n(defn awritable?\n  \"Asynchronously test if a file is writable to the process\n   @param {!string} pathstr :: path to test for process write permission\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-bool-chan (.access fs pathstr (.-W_OK fs))))\n\n(defn ^boolean executable?\n  \"@param {!string} pathstr :: path to test for process executable permission\n   @return {!boolean}\"\n  [pathstr]\n  (assert (string? pathstr))\n  (if-not (= \"win32\" (.-platform js/process))\n    (try-true (.accessSync fs pathstr (.-X_OK fs)))\n    (throw (js/Error \"Testing if a file is executable has no effect on Windows\"))))\n\n(defn aexecutable?\n  \"Asynchronously test if a file is executable to the process\n   @param {!string} pathstr :: path to test for process execute permission\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (if-not (= \"win32\" (.-platform js/process))\n    (with-bool-chan (.access fs pathstr (.-X_OK fs)))\n    (throw (js/Error \"Testing if a file is executable has no effect on Windows\"))))\n\n(defn ^boolean symlink?\n  \"Synchronous test for symbolic link\n   @param {!string} pathstr :: path to test\n   @return {!boolean}\"\n  [pathstr]\n  (assert (string? pathstr))\n  (let [stats (try (lstat pathstr) (catch js/Error e false))]\n    (if-not stats\n      false\n      (.isSymbolicLink stats))))\n\n(defn asymlink?\n  \"Asynchronously test if path is a symbolic link\n   @param {!string} pathstr :: path to test\n   @return {!Channel} promise-chan receiving boolean\"\n  [pathstr]\n  (assert (string? pathstr))\n  (let [c (promise-chan)\n        stat-ch (alstat pathstr)]\n    (take! stat-ch\n      (fn [[err stats]]\n        (put! c (if-not err (.isSymbolicLink stats) false))))\n    c))\n\n;; /predicates\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; path utilities + Reads\n\n(defn dirname\n  \"@param {!string} pathstring :: path to get parent of\n   @return {!string} the parent directory\"\n  [pathstring]\n  (.dirname path pathstring))\n\n(defn basename\n  \"@return {!string}\"\n  ([p] (.basename path p))\n  ([p ext] (.basename path p ext)))\n\n(defn resolve-path\n  \"@return {!string}\"\n  [& paths] (.apply (.-resolve path) nil (apply array paths )))\n\n(defn normalize-path\n  \"@param {!string} pathstring :: pathstring to normalize\n   @return {!string}\"\n  [pathstring]\n  (.normalize path pathstring))\n\n(defn ext\n  \"@param {!string} pathstring :: file to get extension from\n   @return {!string}\"\n  [pathstring]  (.extname path pathstring))\n\n(defn realpath\n  \"Synchronous realpath\n   @param {!string} pathstr\n   @return {!string} resolved path\"\n  [pathstr]\n  (.realpathSync fs pathstr))\n\n(defn arealpath\n  \"Asynchronous realpath\n   @param {!string} pathstr\n   @return {!Channel} promise-chan recieving [?err ?resolvedPathstr]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.realpath fs pathstr)))\n\n(defn readlink\n  \"Synchronous readlink\n   @param {!string} pathstr :: the symbolic link to read\n   @return {!string} the symbolic link's string value\"\n  [pathstr]\n  (.readlinkSync fs pathstr))\n\n(defn areadlink\n  \"Asynchronous readlink\n   @param {!string} pathstr :: the symbolic link to read\n   @return {!Channel} promise-chan receiving [?err ?linkstring]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.readlink fs pathstr)))\n\n(defn readdir ; optional cache arg?\n  \"Synchronously reads directory content\n   @param {!string} dirpath :: directory path to read\n   @return {!IVector} Vector<strings> representing directory content\"\n  [dirpath]\n  (assert (string? dirpath))\n  (vec (.readdirSync fs dirpath)))\n\n(defn areaddir\n  \"Asynchronously reads directory content\n   @param {!string} dirpath :: directory path to read\n   @return {!Channel} promise-chan receiving [?err, ?Vector<string>]\n    where strings are representing directory content\"\n  [dirpath]\n  (assert (string? dirpath))\n  (with-chan (.readdir fs dirpath) vec))\n\n;; /path utilities + reads\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; writes/\n\n(defn chmod\n  \"Synchronous chmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {nil} or throws\"\n  [pathstr mode]\n  (.chmodSync fs pathstr mode))\n\n(defn achmod\n  \"Asynchronous chmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr mode]\n  (assert (string? pathstr))\n  (with-chan (.chmod fs pathstr mode)))\n\n(defn lchmod\n  \"Synchronous lchmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {nil}\"\n  [pathstr mode]\n  (.lchmodSync fs pathstr mode))\n\n(defn alchmod\n  \"Asynchronous lchmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr mode]\n  (assert (string? pathstr))\n  (with-chan (.lchmod fs pathstr mode)))\n\n(defn chown\n  \"Synchronous chown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {nil}\"\n  [pathstr uid gid]\n  (.chownSync fs pathstr uid gid))\n\n(defn achown\n  \"Asynchronous chown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr uid gid]\n  (assert (string? pathstr))\n  (with-chan (.chown fs pathstr uid gid)))\n\n(defn lchown\n  \"Synchronous lchown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {nil} or throws\"\n  [pathstr uid gid]\n  (.lchownSync fs pathstr uid gid))\n\n(defn alchown\n  \"Asynchronous lchown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr uid gid]\n  (assert (string? pathstr))\n  (with-chan (.lchown fs pathstr uid gid)))\n\n(defn utimes\n  \"synchronous utimes\n   - If the value is NaN or Infinity, the value would get converted to Date.now()\n   - numerable strings ie '12235' are converted to numbers\n   @param {!string} pathstr\n   @param {(string|Number)} atime\n   @param {(string|Number)} mtime\n   @return {nil}\"\n  [pathstr atime mtime]\n  (.utimesSync fs pathstr atime mtime))\n\n(defn autimes\n  \"asynchronous utimes\n   - If the value is NaN or Infinity, the value would get converted to Date.now()\n   - numerable strings ie '12235' are converted to numbers\n   @param {!string} pathstr\n   @param {(string|Number)} atime\n   @param {(string|Number)} mtime\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr atime mtime]\n  (assert (string? pathstr))\n  (with-chan (.utimes fs pathstr atime mtime)))\n\n(defn mkdir\n  \"Synchronously create a directory\n   @param {!string} pathstr :: path of directory to create\n   @return {nil} or throws\"\n  [pathstr]\n  (.mkdirSync fs pathstr))\n\n(defn amkdir\n  \"Asynchronously create a directory\n   @param {!string} pathstr :: path of directory to create\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.mkdir fs pathstr)))\n\n(defn rmdir\n  \"Synchronously remove a directory\n   @param {!string} pathstr :: path of directory to remove\n   @return {nil} or throws\"\n  [pathstr]\n  (.rmdirSync fs pathstr))\n\n(defn armdir\n  \"Asynchronously remove a directory\n   @param {!string} pathstr :: path of directory to remove\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.rmdir fs pathstr)))\n\n(defn link\n  \"Synchronous link. Will not overwrite newpath if it exists.\n   @param {!string} srcpathstr\n   @param {!string} dstpathstr\n   @return {nil} or throws\"\n  [srcpathstr dstpathstr]\n  {:pre [(string? srcpathstr) (string? dstpathstr)]}\n  (.linkSync fs srcpathstr dstpathstr))\n\n(defn alink\n  \"Synchronous link. Will not overwrite newpath if it exists.\n   @param {!string} srcpathstr\n   @param {!string} dstpathstr\n   @return {!Channel} promise-chan receiving [?err]\"\n  [srcpathstr dstpathstr]\n  {:pre [(string? srcpathstr) (string? dstpathstr)]}\n  (with-chan (.link fs srcpathstr dstpathstr)))\n\n(defn symlink\n  \"Synchronous symlink.\n   @param {!string} target :: what gets pointed to\n   @param {!string} pathstr :: the new symbolic link that points to target\n   @return {nil} or throws\"\n  [target pathstr]\n  (.symlinkSync fs target pathstr))\n\n(defn asymlink\n  \"Synchronous symlink.\n   @param {!string} targetstr :: what gets pointed to\n   @param {!string} pathstr :: the new symbolic link that points to target\n   @return {!Channel} promise-chan receiving [?err]\"\n  [targetstr pathstr]\n  {:pre [(string? targetstr) (string? pathstr)]}\n  (with-chan (.symlink fs targetstr pathstr)))\n\n(defn unlink\n  \"Synchronously unlink a file.\n   @param {!string} pathstr :: path of file to unlink\n   @return {nil} or throws\"\n  [pathstr]\n  (.unlinkSync fs pathstr))\n\n(defn aunlink\n  \"Asynchronously unlink a file\n   @param {!string} pathstr :: path of file to unlink\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (with-chan (.unlink fs pathstr)))\n\n(defn rm\n  \"Synchronously delete the file or directory path\n   @param {!string} pathstr :: can be file or directory\n   @return {nil} or throws\"\n  [pathstr]\n  (assert (string? pathstr))\n  (if (dir? pathstr)\n    (rmdir pathstr)\n    (unlink pathstr)))\n\n(defn arm\n  \"Asynchronously delete the file or directory path\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (let [c (promise-chan)\n        dc (adir? pathstr)]\n    (take! dc\n      (fn [d?]\n        (take! (if d? (armdir pathstr) (aunlink pathstr))\n          (fn [ev] (put! c ev)))))\n    c))\n\n(defn rm-r\n  \"@param {!string} pathstr :: path to a directory to recursively delete. Deletes a passed file as well.\n   @return {nil} or throws\"\n  [pathstr]\n  (assert (string? pathstr))\n  (assert (false? (boolean (#{ \"/\" \"\\\\\" \"\\\\\\\\\" \"//\"} pathstr)))\n    (str \"you just tried to delete root, \" (pr-str pathstr) \", be more careful.\"))\n  (if (dir? pathstr)\n    (do\n      (doseq [p (mapv (partial resolve-path pathstr) (readdir pathstr))]\n        (rm-r p))\n      (rmdir pathstr))\n    (unlink pathstr)))\n\n(defn arm-r\n  \"asynchronous recursive delete. Crawls in order provided by readdir and makes unlink/rmdir calls sequentially\n   after the previous has completed. Breaks on any err which is returned as [err].\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr]\n  (assert (string? pathstr))\n  (assert (false? (boolean (#{ \"/\" \"\\\\\" \"\\\\\\\\\" \"//\"} pathstr)))\n    (str \"you just tried to delete root, \" (pr-str pathstr) \", be more careful.\"))\n  (let [c (promise-chan)]\n    (go\n     (if (<! (adir? pathstr))\n       (let [[rderr names] (<! (areaddir pathstr))]\n         (if-not rderr\n           (do\n             (loop [children (mapv (partial resolve-path pathstr) names)]\n               (if (some? children)\n                 (let [[arm-r-err] (<! (arm-r (first children)))]\n                   (if (instance? js/Error arm-r-err)\n                     (>! c arm-r-err)\n                     (recur (next children))))))\n             (>! c (<! (armdir pathstr))))\n           (>! c [rderr])))\n       (>! c (<! (aunlink pathstr)))))\n    c))\n\n(defn rename\n  \"Synchronously rename a file.\n   @param {!string} oldpathstr :: file to rename\n   @param {!string} newpathstr :: what to rename it to\n   @return {nil}\"\n  [oldpathstr newpathstr]\n  (.renameSync fs oldpathstr newpathstr))\n\n(defn arename\n  \"Asynchronously rename a file\n   @param {!string} oldpathstr :: file to rename\n   @param {!string} newpathstr :: what to rename it to\n   @return {!Channel} promise-chan receiving [?err]\"\n  [oldpathstr newpathstr]\n  {:pre [(string? oldpathstr) (string? newpathstr)]}\n  (with-chan (.rename fs oldpathstr newpathstr)))\n\n(defn truncate\n  \"Synchronous truncate\n   @param {!string} pathstr\n   @param {!number} length\n   @return {nil} or throws\"\n  [pathstr length]\n  (.truncateSync fs pathstr length))\n\n(defn atruncate\n  \"Asynchronous truncate\n   @param {!string} pathstr\n   @param {!number} len\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr len]\n  (assert (string? pathstr))\n  (with-chan (.truncate fs pathstr len)))\n\n;; /writes\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; read+write Files\n\n(defn readFile\n  \"@param {!string} pathstr :: the file path to read\n   @param {!string} enc :: encoding , if \\\"\\\" (an explicit empty string), => raw buffer\n   @return {(buffer.Buffer|string)} or throw\"\n  [pathstr enc] (.readFileSync fs pathstr enc))\n\n(defn areadFile\n  \"@param {!string} pathstr\n   @param {!string} enc :: if \\\"\\\" (an explicit empty string) => raw buffer\n   @return {!Channel} promise-chan receiving [?err ?(str|Buffer)] on successful read\"\n  [pathstr enc]\n  (with-chan (.readFile fs pathstr enc)))\n\n(defn writeFile\n  \"synchronously writes content to file represented by pathstring.\n   @param {!string} pathstr :: file to write to\n   @param {(string|buffer.Buffer)} content :: if buffer, :encoding is ignored\n   @param {?IMap} opts :: {:encoding {string}, :append {boolean}, :flags {string}, :mode {int}}\n    - flags override append\n    - :encoding defaults to utf8\n   @return {nil} or throws\"\n  [pathstr content opts]\n  (.writeFileSync fs pathstr content\n                  #js{\"flag\"     (or (:flags opts) (if (:append opts) \"a\" \"w\"))\n                      \"mode\"     (or (:mode opts)  438)\n                      \"encoding\" (or (:encoding opts) \"utf8\")}))\n\n(defn awriteFile\n  \"Asynchronously write to a file.\n   @param {!string} pathstring : file to write to\n   @param {(string|buffer.Buffer)} content : if buffer, :encoding is ignored\n   @param {?IMap} opts : :encoding {string}, :append {bool}, :flags {string}, :mode {int}\n    - flags override append\n   @return {!Channel} promise-chan recieving [?err]\"\n  [pathstring content opts]\n  (with-chan\n    (.writeFile fs pathstring content\n                #js{\"flag\"     (or (:flags opts) (if (:append opts) \"a\" \"w\"))\n                    \"mode\"     (or (:mode opts) 438)\n                    \"encoding\" (or (:encoding opts) \"utf8\")})))\n\n;; /read+write Files\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; watch\n\n\n(defn watcher->ch\n  ([FSWatcher out-ch] (watcher->ch FSWatcher out-ch nil))\n  ([FSWatcher out-ch {:keys [key buf-or-n] :or {buf-or-n 10}}]\n   (let []\n    (doto FSWatcher\n      (.on \"change\"\n        (fn [eventType filename] ;[string string|Buffer]\n          (put! out-ch [(keyword eventType)])))\n      (.on \"error\" (fn [e] (put! out-ch [:error [e]]))))\n     out-ch)))\n\n(deftype Watcher [FSWatcher out]\n  impl/ReadPort\n  (take! [this handler] (impl/take! out handler))\n  Object\n  (close [this]\n    (.close FSWatcher)\n    (put! out [:close] #(close! out))))\n\n(defn watch\n  \"Watch a file or directory.\n   Make note of caveats https://nodejs.org/api/fs.html#fs_caveats\n   events : 'rename', 'change' , 'error', 'close'\n   opts :\n    :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n    :recursive {boolean} (false) :: watch subdirectories\n    :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n    :encoding {string} ('utf8') :: used to interpret passed filename\n   @return {!Watcher}\"\n  ([filename] (watch filename nil))\n  ([filename opts]\n    (let [defaults {:persistent true\n                    :recursive false\n                    :encoding \"utf8\"\n                    :buf-or-n 10}\n          opts (merge defaults opts)\n          key (or (get opts :key) filename)\n          out (chan (get opts :buf-or-n) (map #(conj [key] %)))\n          w (fs.watch filename (clj->js opts))]\n      (->Watcher w (watcher->ch w out)))))\n\n(defn watchFile\n  \"Prefer watch. Polls files and returns stat objects. Opts:\n     :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n     :interval {number} (5007) :: polling interval in msecs\n     :edn? {boolean} (true) :: converts stats to edn\n     :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n   @return {!Channel} <= [filename [current fs.stat, previous fs.stat]]\"\n  ([filename] (watchFile filename nil))\n  ([filename opts]\n   (let [defaults {:interval 5007\n                   :persistent true\n                   :edn? true\n                   :buf-or-n 10}\n         {:keys [edn? buf-or-n] :as opts} (merge defaults opts)\n         out (chan buf-or-n (map #(conj [filename] %)))\n         cb (fn [curr prev]\n              (put! out\n                (if edn?\n                  [(stat->clj curr)(stat->clj prev)]\n                  [curr prev])))\n         w (fs.watchFile filename (clj->js opts) cb)]\n     out)))\n\n(defn unwatchFile\n  \"remove all watchers from a file\n   @param {!string} pathstr\n   @return {nil}\"\n  [pathstr]\n  (fs.unwatchFile pathstr))\n\n(defn touch\n  \"creates a file if non-existent, writes blank string to an existing\n   @param {!string} pathstr\n   @return {nil}\"\n  [pathstr]\n  (writeFile pathstr \"\" nil))\n\n(defn atouch\n  \"creates a file if non-existent, writes blank string to an existing\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]\"\n  [pathstr]\n  (awriteFile pathstr \"\" nil))\n\n(def rl (js/require \"readline\"))\n\n(defn readline\n  \"A simple file line reader.\n   @param {!string} pathstr\n   @return {!Channel} chan receiving [?err ?line] until file is consumed,\n   and then the channel closes.\"\n  [pathstr]\n  (let [out (chan 10)\n        in (fs.createReadStream pathstr)\n        _(set! (.-in out) in)\n        r (rl.createInterface #js{:input in :crlfDelay js/Infinity})]\n    (doto in\n      (.on \"error\" (fn [e] (put! out [e])))\n      (.on \"close\" #(close! out)))\n    (doto r\n      (.on \"line\" (fn [line] (put! out [nil line]))))\n    out))","~:reader-features",["^O",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["cljs-node-io.fs/fs","js/require","cljs-node-io.fs/path","cljs-node-io.fs/sep","cljs-node-io.fs/stat","pathstring","cljs-node-io.fs/astat","pathstr","js/Error","c","cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0","args","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs-node-io.fs/lstat","cljs-node-io.fs/alstat","cljs-node-io.fs/stat->clj","st","ks","goog/object.getKeys","vs","goog/object.getValues","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__6178#","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__6186","vec__6187","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/fn?","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","cljs-node-io.fs/bita->int","bita","js/parseInt","cljs-node-io.fs/stat->perm-bita","s","mode","ownr","ownw","ownx","grpr","grpw","grpx","othr","othw","othx","a","a__4402__auto__","l__4403__auto__","cljs.core/aclone","i","res","cljs-node-io.fs/permissions","cljs-node-io.fs/gid-uid","js/process","cljs-node-io.fs/hidden?","js/RegExp","cljs-node-io.fs/dir?","stats","e6213","e","cljs.core/not","cljs-node-io.fs/adir?","stat-ch","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","p__6221","vec__6222","err","cljs-node-io.fs/file?","e6227","cljs-node-io.fs/afile?","p__6231","vec__6232","cljs-node-io.fs/absolute?","cljs-node-io.fs/path.isAbsolute","cljs-node-io.fs/fexists?","e6238","cljs-node-io.fs/afexists?","cljs-node-io.fs/readable?","e6248","cljs-node-io.fs/areadable?","cljs-node-io.fs/writable?","e6256","cljs-node-io.fs/awritable?","cljs-node-io.fs/executable?","e6266","cljs-node-io.fs/aexecutable?","cljs-node-io.fs/symlink?","e6284","cljs-node-io.fs/asymlink?","p__6300","vec__6301","cljs-node-io.fs/dirname","var_args","G__6308","cljs-node-io.fs/basename","p","ext","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","cljs-node-io.fs/resolve-path","seq6312","self__4519__auto__","cljs.core/seq","paths","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/array","cljs-node-io.fs/normalize-path","cljs-node-io.fs/ext","cljs-node-io.fs/realpath","cljs-node-io.fs/arealpath","cljs-node-io.fs/readlink","cljs-node-io.fs/areadlink","cljs-node-io.fs/readdir","dirpath","cljs-node-io.fs/areaddir","data","cljs-node-io.fs/chmod","cljs-node-io.fs/achmod","cljs-node-io.fs/lchmod","cljs-node-io.fs/alchmod","cljs-node-io.fs/chown","uid","gid","cljs-node-io.fs/achown","cljs-node-io.fs/lchown","cljs-node-io.fs/alchown","cljs-node-io.fs/utimes","atime","mtime","cljs-node-io.fs/autimes","cljs-node-io.fs/mkdir","cljs-node-io.fs/amkdir","cljs-node-io.fs/rmdir","cljs-node-io.fs/armdir","cljs-node-io.fs/link","srcpathstr","dstpathstr","cljs-node-io.fs/alink","cljs-node-io.fs/symlink","target","cljs-node-io.fs/asymlink","targetstr","cljs-node-io.fs/unlink","cljs-node-io.fs/aunlink","cljs-node-io.fs/rm","cljs-node-io.fs/arm","dc","d?","ev","cljs-node-io.fs/rm-r","cljs.core/boolean","fexpr__6415","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","seq__6416","chunk__6417","count__6418","i__6419","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs-node-io.fs/arm-r","fexpr__6439","c__3417__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__3418__auto__","switch__3360__auto__","state_6518","state_val_6519","inst_6458","inst_6461","inst_6462","inst_6463","statearr-6522","statearr-6524","inst_6497","statearr-6526","inst_6445","cljs.core.async.impl.ioc-helpers/take!","inst_6511","cljs.core.async.impl.ioc-helpers/put!","inst_6509","inst_6477","inst_6476","inst_6478","statearr-6535","statearr-6538","statearr-6540","inst_6495","statearr-6543","inst_6504","statearr-6544","inst_6456","inst_6455","inst_6459","statearr-6547","statearr-6550","statearr-6551","inst_6483","statearr-6553","statearr-6555","inst_6453","inst_6473","inst_6474","inst_6447","statearr-6558","statearr-6560","inst_6513","statearr-6561","inst_6481","statearr-6562","inst_6491","inst_6493","statearr-6565","inst_6506","statearr-6570","inst_6515","cljs.core.async.impl.ioc-helpers/return-chan","inst_6489","statearr-6572","inst_6466","inst_6467","statearr-6574","statearr-6575","inst_6486","statearr-6577","inst_6500","cljs.core/PersistentVector","inst_6501","inst_6502","statearr-6582","state-machine__3361__auto__","ret-value__3362__auto__","result__3363__auto__","cljs.core/keyword-identical?","e6586","js/Object","ex__3364__auto__","statearr-6587","cljs.core.async.impl.ioc-helpers/process-exception","state__3419__auto__","statearr-6592","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-node-io.fs/rename","oldpathstr","newpathstr","cljs-node-io.fs/arename","cljs-node-io.fs/truncate","length","cljs-node-io.fs/atruncate","len","cljs-node-io.fs/readFile","enc","cljs-node-io.fs/areadFile","cljs-node-io.fs/writeFile","content","opts","or__3949__auto__","cljs-node-io.fs/awriteFile","G__6616","cljs-node-io.fs/watcher->ch","p__6617","map__6618","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$3","FSWatcher","out-ch","cljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$3","key","buf-or-n","G__6620","eventType","filename","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","cljs-node-io.fs/Watcher","cljs-node-io.fs/->Watcher","out","this","handler","cljs.core.async.impl.protocols/take!","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","G__6625","cljs-node-io.fs/watch","cljs_node_io.fs.watch.cljs$core$IFn$_invoke$arity$2","defaults","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2","p1__6623#","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","w","G__6626","G__6627","cljs-node-io.fs/fs.watch","cljs.core/clj->js","cljs_node_io.fs.watcher__GT_ch.cljs$core$IFn$_invoke$arity$2","G__6633","cljs-node-io.fs/watchFile","cljs_node_io.fs.watchFile.cljs$core$IFn$_invoke$arity$2","map__6638","edn?","p1__6631#","cb","curr","prev","G__6648","G__6649","G__6650","cljs-node-io.fs/fs.watchFile","cljs-node-io.fs/unwatchFile","cljs-node-io.fs/fs.unwatchFile","cljs-node-io.fs/touch","cljs-node-io.fs/atouch","cljs-node-io.fs/rl","cljs-node-io.fs/readline","in","cljs-node-io.fs/fs.createReadStream","_","r","G__6661","cljs-node-io.fs/rl.createInterface","js/Infinity","G__6663","G__6664","line"]]],"~:cache-keys",["~#cmap",[["^1B","goog/dom/tagname.js"],[1530991559994,"^Z","~$goog.dom.HtmlElement"],["^1B","cljs/core/async/impl/ioc_helpers.cljs"],[1534380136417,"^Z","^Y","^W"],["~:macro","^Y"],[1534380137000],["^1B","cljs/core/async.cljs"],[1534380136417,"^Z","^Y","^W","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers"],["^1B","cljs_node_io/fs.cljs"],[1537666007418,"^Z","^Y","^D","^W"],["^1B","goog/math/math.js"],[1530991559994,"^Z","~$goog.array","~$goog.asserts"],["^1B","goog/labs/useragent/browser.js"],[1530991559994,"^Z","^1V","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1B","goog/array/array.js"],[1530991559994,"^Z","^1W"],["^1P","^M"],[1534380136000],["^1B","goog/debug/error.js"],[1530991559994,"^Z"],["^1B","goog/dom/nodetype.js"],[1530991559994,"^Z"],["^1B","goog/object/object.js"],[1530991559994,"^Z"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^1B","goog/math/long.js"],[1530991559994,"^Z","^1W","~$goog.reflect"],["^1B","cljs/core/async/impl/channels.cljs"],[1534380136417,"^Z","^Y","^W","^1T","^1R"],["^1B","goog/functions/functions.js"],[1530991559994,"^Z"],["^1B","cljs/core/async/impl/dispatch.cljs"],[1534380136417,"^Z","^Y","^1R","~$goog.async.nextTick"],["^1B","cljs/core/async/impl/protocols.cljs"],[1534380136417,"^Z","^Y"],["^1B","goog/structs/map.js"],[1530991559994,"^Z","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1Y"],["^1B","goog/labs/useragent/engine.js"],[1530991559994,"^Z","^1V","^1X","^1Z"],["^1P","^I"],[1537666007000],["^1B","goog/asserts/asserts.js"],[1530991559994,"^Z","~$goog.debug.Error","~$goog.dom.NodeType","^1Z"],["^1B","cljs/core/async/impl/buffers.cljs"],[1534380136417,"^Z","^Y","^W"],["^1B","goog/uri/uri.js"],[1530991559994,"^Z","^1V","^1W","^1Z","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1P","^D"],[1534380136000],["^1B","cljs/core/async/impl/timers.cljs"],[1534380136417,"^Z","^Y","^W","^1Q","^1T"],["^1B","goog/base.js"],[1530991559994],["^1B","goog/structs/structs.js"],[1530991559994,"^Z","^1V","^1Y"],["^1B","goog/debug/entrypointregistry.js"],[1530991559994,"^Z","^1W"],["^1B","goog/string/string.js"],[1530991559994,"^Z"],["^1B","goog/reflect/reflect.js"],[1530991559994,"^Z"],["^1B","goog/labs/useragent/util.js"],[1530991559994,"^Z","^1Z"],["^1P","~$cljs.core.async.impl.ioc-macros"],[1534380136000],["^1B","goog/string/stringbuffer.js"],[1530991559994,"^Z"],["^1B","goog/iter/iter.js"],[1530991559994,"^Z","^1V","^1W","~$goog.functions","~$goog.math"],["^1B","goog/async/nexttick.js"],[1530991559994,"^Z","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2<","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1B","goog/dom/htmlelement.js"],[1530991559994,"^Z"],["^1B","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1Z","^1Y","^1V","~$goog.Uri","~$goog.string.StringBuffer"],["^1B","goog/math/integer.js"],[1530991559994,"^Z"],["^1B","goog/uri/utils.js"],[1530991559994,"^Z","^1V","^1W","^1Z"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A wrapper around node's fs module.","^7","cljs_node_io/fs.cljs","^8",1,"^9",5,"^:",1,"^;",20],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I","^J","^I","^K","^I","^L","^M"],"^N",["^O",[]],"~:shadow/js-access-properties",["^O",["chmodSync","utimes","writeFileSync","accessSync","readFile","lchmod","unlinkSync","extname","realpathSync","rename","renameSync","getuid","symlinkSync","rmdir","lstatSync","sep","access","F_OK","lchownSync","lstat","chown","basename","linkSync","symlink","readlinkSync","lchmodSync","unlink","readFileSync","realpath","W_OK","X_OK","readdir","mkdirSync","chownSync","writeFile","readdirSync","R_OK","truncateSync","utimesSync","rmdirSync","readlink","chmod","statSync","mkdir","lchown","getgid"]],"^P","^Q","^T",null,"^U",["^ ","^D","^D","^V","^D","^W","^W","^X","^W","^Y","^Y","^Z","^Z"],"^[",["^O",["^10","^11"]],"~:shadow/js-access-global",["^O",["Object","process","require","Infinity","RegExp","Error","parseInt"]],"^12",["^ ","^13","^D","^14","^D","^15","^D","^16","^D","^17","^D","^18","^W"],"~:defs",["^ ","~$lstat",["^ ","~:protocol-inline",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",26,"^9",7,"^:",26,"^;",12,"~:arglists",["^1:",["~$quote",["^1:",[["~$pathstr"]]]]],"^6","Synchronous lstat identical to stat(), except that if path is a symbolic link,\n   then the link itself is stat-ed, not the file that it refers to\n   @param {!string} pathstr\n   @return {!fs.Stats} file stats object"],"^P","~$cljs-node-io.fs/lstat","~:variadic",false,"^7","cljs_node_io/fs.cljs","^;",12,"~:method-params",["^1:",[["^2N"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^9",1,"^8",26,"^:",26,"~:max-fixed-arity",1,"~:fn-var",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous lstat identical to stat(), except that if path is a symbolic link,\n   then the link itself is stat-ed, not the file that it refers to\n   @param {!string} pathstr\n   @return {!fs.Stats} file stats object"],"~$afile?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",135,"^9",7,"^:",135,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous file predicate.\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/afile?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",135,"^:",135,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous file predicate.\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"~$lchown",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",380,"^9",7,"^:",380,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N","~$uid","~$gid"]]]]],"^6","Synchronous lchown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/lchown","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N","^2Y","^2Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",380,"^:",380,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Synchronous lchown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {nil} or throws"],"~$asymlink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",478,"^9",7,"^:",478,"^;",15,"^2L",["^1:",["^2M",["^1:",[["~$targetstr","^2N"]]]]],"^6","Synchronous symlink.\n   @param {!string} targetstr :: what gets pointed to\n   @param {!string} pathstr :: the new symbolic link that points to target\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/asymlink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^31","^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",478,"^:",478,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^31","^2N"]]]]],"^6","Synchronous symlink.\n   @param {!string} targetstr :: what gets pointed to\n   @param {!string} pathstr :: the new symbolic link that points to target\n   @return {!Channel} promise-chan receiving [?err]"],"~$readlink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",291,"^9",7,"^:",291,"^;",15,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous readlink\n   @param {!string} pathstr :: the symbolic link to read\n   @return {!string} the symbolic link's string value"],"^P","~$cljs-node-io.fs/readlink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",291,"^:",291,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous readlink\n   @param {!string} pathstr :: the symbolic link to read\n   @return {!string} the symbolic link's string value"],"~$amkdir",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",429,"^9",7,"^:",429,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously create a directory\n   @param {!string} pathstr :: path of directory to create\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/amkdir","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",429,"^:",429,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously create a directory\n   @param {!string} pathstr :: path of directory to create\n   @return {!Channel} promise-chan receiving [?err]"],"~$absolute?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",148,"^9",16,"^:",148,"^;",25,"~:tag","~$boolean","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr :: path to test\n   @return {!boolean} is pathstr an absolute path"],"^P","~$cljs-node-io.fs/absolute?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",25,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",148,"~:ret-tag","^39","^:",148,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr :: path to test\n   @return {!boolean} is pathstr an absolute path"],"~$fs",["^ ","^P","~$cljs-node-io.fs/fs","^7","cljs_node_io/fs.cljs","^8",7,"^9",1,"^:",7,"^;",8,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",7,"^9",6,"^:",7,"^;",8],"^38","~$js"],"~$symlink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",470,"^9",7,"^:",470,"^;",14,"^2L",["^1:",["^2M",["^1:",[["~$target","^2N"]]]]],"^6","Synchronous symlink.\n   @param {!string} target :: what gets pointed to\n   @param {!string} pathstr :: the new symbolic link that points to target\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/symlink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^3@","^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",470,"^:",470,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3@","^2N"]]]]],"^6","Synchronous symlink.\n   @param {!string} target :: what gets pointed to\n   @param {!string} pathstr :: the new symbolic link that points to target\n   @return {nil} or throws"],"~$utimes",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",399,"^9",7,"^:",399,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N","~$atime","~$mtime"]]]]],"^6","synchronous utimes\n   - If the value is NaN or Infinity, the value would get converted to Date.now()\n   - numerable strings ie '12235' are converted to numbers\n   @param {!string} pathstr\n   @param {(string|Number)} atime\n   @param {(string|Number)} mtime\n   @return {nil}"],"^P","~$cljs-node-io.fs/utimes","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N","^3C","^3D"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",399,"^:",399,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^3C","^3D"]]]]],"^6","synchronous utimes\n   - If the value is NaN or Infinity, the value would get converted to Date.now()\n   - numerable strings ie '12235' are converted to numbers\n   @param {!string} pathstr\n   @param {(string|Number)} atime\n   @param {(string|Number)} mtime\n   @return {nil}"],"~$rm-r",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",526,"^9",7,"^:",526,"^;",11,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr :: path to a directory to recursively delete. Deletes a passed file as well.\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/rm-r","^2P",false,"^7","cljs_node_io/fs.cljs","^;",11,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",526,"^:",526,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr :: path to a directory to recursively delete. Deletes a passed file as well.\n   @return {nil} or throws"],"~$dirname",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",250,"^9",7,"^:",250,"^;",14,"^2L",["^1:",["^2M",["^1:",[["~$pathstring"]]]]],"^6","@param {!string} pathstring :: path to get parent of\n   @return {!string} the parent directory"],"^P","~$cljs-node-io.fs/dirname","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^3I"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",250,"^:",250,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring :: path to get parent of\n   @return {!string} the parent directory"],"~$bita->int",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",56,"^9",8,"^:",56,"^;",17,"~:private",true,"^2L",["^1:",["^2M",["^1:",[["~$bita"]]]]],"^6","@param {!Array<!Number>} bita :: an array of 1s an 0s\n   @return {!Number} integer"],"^3L",true,"^P","~$cljs-node-io.fs/bita->int","^2P",false,"^7","cljs_node_io/fs.cljs","^;",17,"^2Q",["^1:",[["^3M"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",56,"^:",56,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3M"]]]]],"^6","@param {!Array<!Number>} bita :: an array of 1s an 0s\n   @return {!Number} integer"],"~$unlink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",487,"^9",7,"^:",487,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously unlink a file.\n   @param {!string} pathstr :: path of file to unlink\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/unlink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",487,"^:",487,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously unlink a file.\n   @param {!string} pathstr :: path of file to unlink\n   @return {nil} or throws"],"~$gid-uid",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",84,"^9",7,"^:",84,"^;",14,"^2L",["^1:",["^2M",["^1:",[[]]]]],"^6","@return {!IMap}"],"^P","~$cljs-node-io.fs/gid-uid","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[[]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",84,"^:",84,"^2T",0,"^2U",true,"^2L",["^1:",["^2M",["^1:",[[]]]]],"^6","@return {!IMap}"],"~$awritable?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",195,"^9",7,"^:",195,"^;",17,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file is writable to the process\n   @param {!string} pathstr :: path to test for process write permission\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/awritable?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",17,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",195,"^:",195,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file is writable to the process\n   @param {!string} pathstr :: path to test for process write permission\n   @return {!Channel} promise-chan receiving boolean"],"~$rm",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",502,"^9",7,"^:",502,"^;",9,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously delete the file or directory path\n   @param {!string} pathstr :: can be file or directory\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/rm","^2P",false,"^7","cljs_node_io/fs.cljs","^;",9,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",502,"^:",502,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously delete the file or directory path\n   @param {!string} pathstr :: can be file or directory\n   @return {nil} or throws"],"~$path",["^ ","^P","~$cljs-node-io.fs/path","^7","cljs_node_io/fs.cljs","^8",8,"^9",1,"^:",8,"^;",10,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",8,"^9",6,"^:",8,"^;",10],"^38","^3>"],"~$areadFile",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",610,"^9",7,"^:",610,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N","~$enc"]]]]],"^6","@param {!string} pathstr\n   @param {!string} enc :: if \"\" (an explicit empty string) => raw buffer\n   @return {!Channel} promise-chan receiving [?err ?(str|Buffer)] on successful read"],"^P","~$cljs-node-io.fs/areadFile","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N","^3Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",610,"^:",610,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^3Z"]]]]],"^6","@param {!string} pathstr\n   @param {!string} enc :: if \"\" (an explicit empty string) => raw buffer\n   @return {!Channel} promise-chan receiving [?err ?(str|Buffer)] on successful read"],"~$basename",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",256,"^9",7,"^:",256,"^;",15,"^2L",["^1:",["^2M",["^1:",[["~$p"],["~$p","~$ext"]]]]],"^6","@return {!string}","~:top-fn",["^ ","^2P",false,"^2T",2,"^2Q",["^1:",[["~$p"],["~$p","^41"]]],"^2L",["^1:",[["~$p"],["~$p","^41"]]],"^2S",["^1:",[null,null]]]],"^P","~$cljs-node-io.fs/basename","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^42",["^ ","^2P",false,"^2T",2,"^2Q",["^1:",[["~$p"],["~$p","^41"]]],"^2L",["^1:",[["~$p"],["~$p","^41"]]],"^2S",["^1:",[null,null]]],"^2Q",["^1:",[["~$p"],["~$p","^41"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",256,"^:",256,"^2T",2,"^2U",true,"^2L",["^1:",[["~$p"],["~$p","^41"]]],"^6","@return {!string}"],"~$normalize-path",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",265,"^9",7,"^:",265,"^;",21,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring :: pathstring to normalize\n   @return {!string}"],"^P","~$cljs-node-io.fs/normalize-path","^2P",false,"^7","cljs_node_io/fs.cljs","^;",21,"^2Q",["^1:",[["^3I"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",265,"^:",265,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring :: pathstring to normalize\n   @return {!string}"],"~$readFile",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",604,"^9",7,"^:",604,"^;",15,"^2L",["^1:",["^2M",["^1:",[["^2N","^3Z"]]]]],"^6","@param {!string} pathstr :: the file path to read\n   @param {!string} enc :: encoding , if \"\" (an explicit empty string), => raw buffer\n   @return {(buffer.Buffer|string)} or throw"],"^P","~$cljs-node-io.fs/readFile","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^2N","^3Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",604,"^:",604,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^3Z"]]]]],"^6","@param {!string} pathstr :: the file path to read\n   @param {!string} enc :: encoding , if \"\" (an explicit empty string), => raw buffer\n   @return {(buffer.Buffer|string)} or throw"],"~$writable?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",187,"^9",16,"^:",187,"^;",25,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously test if a file is writable to the process\n   @param {!string} pathstr :: path to test for process write permission\n   @return {!boolean}"],"^P","~$cljs-node-io.fs/writable?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",25,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",187,"^3;","^39","^:",187,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously test if a file is writable to the process\n   @param {!string} pathstr :: path to test for process write permission\n   @return {!boolean}"],"~$sep",["^ ","^P","~$cljs-node-io.fs/sep","^7","cljs_node_io/fs.cljs","^8",9,"^9",1,"^:",9,"^;",35,"^6","@type {!string}","^5",["^ ","^7","cljs_node_io/fs.cljs","^8",9,"^9",32,"^:",9,"^;",35,"^6","@type {!string}"],"^38","^3>"],"~$readdir",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",306,"^9",7,"^:",306,"^;",14,"^2L",["^1:",["^2M",["^1:",[["~$dirpath"]]]]],"^6","Synchronously reads directory content\n   @param {!string} dirpath :: directory path to read\n   @return {!IVector} Vector<strings> representing directory content"],"^P","~$cljs-node-io.fs/readdir","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^4="]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",306,"^:",306,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^4="]]]]],"^6","Synchronously reads directory content\n   @param {!string} dirpath :: directory path to read\n   @return {!IVector} Vector<strings> representing directory content"],"~$aunlink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",494,"^9",7,"^:",494,"^;",14,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously unlink a file\n   @param {!string} pathstr :: path of file to unlink\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/aunlink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",494,"^:",494,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously unlink a file\n   @param {!string} pathstr :: path of file to unlink\n   @return {!Channel} promise-chan receiving [?err]"],"^41",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",271,"^9",7,"^:",271,"^;",10,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring :: file to get extension from\n   @return {!string}"],"^P","~$cljs-node-io.fs/ext","^2P",false,"^7","cljs_node_io/fs.cljs","^;",10,"^2Q",["^1:",[["^3I"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",271,"^:",271,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring :: file to get extension from\n   @return {!string}"],"~$arm",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",512,"^9",7,"^:",512,"^;",10,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously delete the file or directory path\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/arm","^2P",false,"^7","cljs_node_io/fs.cljs","^;",10,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",512,"^:",512,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously delete the file or directory path\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]"],"~$permissions",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",79,"^9",7,"^:",79,"^;",18,"^2L",["^1:",["^2M",["^1:",[["~$st"]]]]],"^6","@param {!fs.Stats} st\n   @return {!Number}"],"^P","~$cljs-node-io.fs/permissions","^2P",false,"^7","cljs_node_io/fs.cljs","^;",18,"^2Q",["^1:",[["^4E"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",79,"^:",79,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^4E"]]]]],"^6","@param {!fs.Stats} st\n   @return {!Number}"],"~$arm-r",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",540,"^9",7,"^:",540,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","asynchronous recursive delete. Crawls in order provided by readdir and makes unlink/rmdir calls sequentially\n   after the previous has completed. Breaks on any err which is returned as [err].\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/arm-r","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",540,"^:",540,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","asynchronous recursive delete. Crawls in order provided by readdir and makes unlink/rmdir calls sequentially\n   after the previous has completed. Breaks on any err which is returned as [err].\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]"],"~$atruncate",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",591,"^9",7,"^:",591,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N","~$len"]]]]],"^6","Asynchronous truncate\n   @param {!string} pathstr\n   @param {!number} len\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/atruncate","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N","^4J"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",591,"^:",591,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^4J"]]]]],"^6","Asynchronous truncate\n   @param {!string} pathstr\n   @param {!number} len\n   @return {!Channel} promise-chan receiving [?err]"],"~$autimes",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",410,"^9",7,"^:",410,"^;",14,"^2L",["^1:",["^2M",["^1:",[["^2N","^3C","^3D"]]]]],"^6","asynchronous utimes\n   - If the value is NaN or Infinity, the value would get converted to Date.now()\n   - numerable strings ie '12235' are converted to numbers\n   @param {!string} pathstr\n   @param {(string|Number)} atime\n   @param {(string|Number)} mtime\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/autimes","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^2N","^3C","^3D"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",410,"^:",410,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^3C","^3D"]]]]],"^6","asynchronous utimes\n   - If the value is NaN or Infinity, the value would get converted to Date.now()\n   - numerable strings ie '12235' are converted to numbers\n   @param {!string} pathstr\n   @param {(string|Number)} atime\n   @param {(string|Number)} mtime\n   @return {!Channel} promise-chan receiving [?err]"],"~$->Watcher",["^ ","^2K",null,"^5",["^ ","~:protocols",["^O",["~$cljs.core/Object","~$cljs.core.async.impl.protocols/ReadPort"]],"^7","cljs_node_io/fs.cljs","^;",17,"^9",10,"~:factory","~:positional","^8",661,"^:",661,"^2L",["^1:",["^2M",["^1:",[["~$FSWatcher","~$out"]]]]],"~:skip-protocol-flag",null,"^6","Positional factory function for cljs-node-io.fs/Watcher."],"^4O",["^O",["^4P","^4Q"]],"^P","~$cljs-node-io.fs/->Watcher","^2P",false,"^7","cljs_node_io/fs.cljs","^;",17,"^2Q",["^1:",[["^4T","^4U"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^4R","^4S","^8",661,"^:",661,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^4T","^4U"]]]]],"^4V",null,"^6","Positional factory function for cljs-node-io.fs/Watcher."],"~$stat",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",11,"^9",7,"^:",11,"^;",11,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","Synchronous stat\n   @param {!string} pathstring\n   @return {!fs.Stats} file stats object"],"^P","~$cljs-node-io.fs/stat","^2P",false,"^7","cljs_node_io/fs.cljs","^;",11,"^2Q",["^1:",[["^3I"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",11,"^:",11,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","Synchronous stat\n   @param {!string} pathstring\n   @return {!fs.Stats} file stats object"],"~$awriteFile",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",631,"^9",7,"^:",631,"^;",17,"^2L",["^1:",["^2M",["^1:",[["^3I","~$content","~$opts"]]]]],"^6","Asynchronously write to a file.\n   @param {!string} pathstring : file to write to\n   @param {(string|buffer.Buffer)} content : if buffer, :encoding is ignored\n   @param {?IMap} opts : :encoding {string}, :append {bool}, :flags {string}, :mode {int}\n    - flags override append\n   @return {!Channel} promise-chan recieving [?err]"],"^P","~$cljs-node-io.fs/awriteFile","^2P",false,"^7","cljs_node_io/fs.cljs","^;",17,"^2Q",["^1:",[["^3I","^4[","^50"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",631,"^:",631,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I","^4[","^50"]]]]],"^6","Asynchronously write to a file.\n   @param {!string} pathstring : file to write to\n   @param {(string|buffer.Buffer)} content : if buffer, :encoding is ignored\n   @param {?IMap} opts : :encoding {string}, :append {bool}, :flags {string}, :mode {int}\n    - flags override append\n   @return {!Channel} promise-chan recieving [?err]"],"~$stat->clj",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",42,"^9",7,"^:",42,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^4E"]]]]],"^6","Convert a fs.Stats object to edn. Function are swapped out for their return values.\n   This is useful at repl but not particularly efficient.\n   @param {!fs.Stats} st\n   @return {!IMap}"],"^P","~$cljs-node-io.fs/stat->clj","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^4E"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",42,"^:",42,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^4E"]]]]],"^6","Convert a fs.Stats object to edn. Function are swapped out for their return values.\n   This is useful at repl but not particularly efficient.\n   @param {!fs.Stats} st\n   @return {!IMap}"],"~$truncate",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",583,"^9",7,"^:",583,"^;",15,"^2L",["^1:",["^2M",["^1:",[["^2N","~$length"]]]]],"^6","Synchronous truncate\n   @param {!string} pathstr\n   @param {!number} length\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/truncate","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^2N","^55"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",583,"^:",583,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^55"]]]]],"^6","Synchronous truncate\n   @param {!string} pathstr\n   @param {!number} length\n   @return {nil} or throws"],"~$rl",["^ ","^P","~$cljs-node-io.fs/rl","^7","cljs_node_io/fs.cljs","^8",735,"^9",1,"^:",735,"^;",8,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",735,"^9",6,"^:",735,"^;",8],"^38","^3>"],"~$mkdir",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",422,"^9",7,"^:",422,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously create a directory\n   @param {!string} pathstr :: path of directory to create\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/mkdir","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",422,"^:",422,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously create a directory\n   @param {!string} pathstr :: path of directory to create\n   @return {nil} or throws"],"~$armdir",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",444,"^9",7,"^:",444,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously remove a directory\n   @param {!string} pathstr :: path of directory to remove\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/armdir","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",444,"^:",444,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously remove a directory\n   @param {!string} pathstr :: path of directory to remove\n   @return {!Channel} promise-chan receiving [?err]"],"~$resolve-path",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",261,"^9",7,"^:",261,"^;",19,"^2L",["^1:",["^2M",["^1:",[["~$&","~$paths"]]]]],"^6","@return {!string}","^42",["^ ","^2P",true,"^2T",0,"^2Q",[["^1:",["^5>"]]],"^2L",["^1:",[["~$&","^5>"]]],"^2S",["^1:",[null]]]],"^P","~$cljs-node-io.fs/resolve-path","^2P",true,"^7","cljs_node_io/fs.cljs","^;",19,"^42",["^ ","^2P",true,"^2T",0,"^2Q",[["^1:",["^5>"]]],"^2L",["^1:",[["~$&","^5>"]]],"^2S",["^1:",[null]]],"^2Q",[["^1:",["^5>"]]],"^2R",null,"^2S",["^1:",[null]],"^9",1,"^8",261,"^:",261,"^2T",0,"^2U",true,"^2L",["^1:",[["~$&","^5>"]]],"^6","@return {!string}"],"~$watcher->ch",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",650,"^9",7,"^:",650,"^;",18,"^2L",["^1:",["^2M",["^1:",[["^4T","~$out-ch"],["^4T","^5A",["^ ","~:keys",["~$key","~$buf-or-n"],"~:or",["^ ","^5D",10]]]]]]],"^42",["^ ","^2P",false,"^2T",3,"^2Q",["^1:",[["^4T","^5A"],["^4T","^5A",["^ ","^5B",["^5C","^5D"],"^5E",["^ ","^5D",10]]]]],"^2L",["^1:",[["^4T","^5A"],["^4T","^5A",["^ ","^5B",["^5C","^5D"],"^5E",["^ ","^5D",10]]]]],"^2S",["^1:",[null,null]]]],"^P","~$cljs-node-io.fs/watcher->ch","^2P",false,"^7","cljs_node_io/fs.cljs","^;",18,"^42",["^ ","^2P",false,"^2T",3,"^2Q",["^1:",[["^4T","^5A"],["^4T","^5A",["^ ","^5B",["^5C","^5D"],"^5E",["^ ","^5D",10]]]]],"^2L",["^1:",[["^4T","^5A"],["^4T","^5A",["^ ","^5B",["^5C","^5D"],"^5E",["^ ","^5D",10]]]]],"^2S",["^1:",[null,null]]],"^2Q",["^1:",[["^4T","^5A"],["^4T","^5A",["^ ","^5B",["^5C","^5D"],"^5E",["^ ","^5D",10]]]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",650,"^:",650,"^2T",3,"^2U",true,"^2L",["^1:",[["^4T","^5A"],["^4T","^5A",["^ ","^5B",["^5C","^5D"],"^5E",["^ ","^5D",10]]]]]],"~$readline",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",737,"^9",7,"^:",737,"^;",15,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","A simple file line reader.\n   @param {!string} pathstr\n   @return {!Channel} chan receiving [?err ?line] until file is consumed,\n   and then the channel closes."],"^P","~$cljs-node-io.fs/readline","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",737,"^:",737,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","A simple file line reader.\n   @param {!string} pathstr\n   @return {!Channel} chan receiving [?err ?line] until file is consumed,\n   and then the channel closes."],"~$atouch",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",728,"^9",7,"^:",728,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","creates a file if non-existent, writes blank string to an existing\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/atouch","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",728,"^:",728,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","creates a file if non-existent, writes blank string to an existing\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err]"],"~$achmod",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",335,"^9",7,"^:",335,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N","~$mode"]]]]],"^6","Asynchronous chmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/achmod","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N","^5L"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",335,"^:",335,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Asynchronous chmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {!Channel} promise-chan receiving [?err]"],"~$afexists?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",163,"^9",7,"^:",163,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file or directory exists\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/afexists?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",163,"^:",163,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file or directory exists\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"~$achown",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",370,"^9",7,"^:",370,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Asynchronous chown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/achown","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N","^2Y","^2Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",370,"^:",370,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Asynchronous chown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {!Channel} promise-chan receiving [?err]"],"~$arealpath",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",283,"^9",7,"^:",283,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous realpath\n   @param {!string} pathstr\n   @return {!Channel} promise-chan recieving [?err ?resolvedPathstr]"],"^P","~$cljs-node-io.fs/arealpath","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",283,"^:",283,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous realpath\n   @param {!string} pathstr\n   @return {!Channel} promise-chan recieving [?err ?resolvedPathstr]"],"~$stat->perm-bita",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",62,"^9",8,"^:",62,"^;",23,"^3L",true,"^2L",["^1:",["^2M",["^1:",[["~$s"]]]]],"^6","@param {!fs.Stats} s :: a fs.Stats object\n   @return {!Array<Number>}"],"^3L",true,"^P","~$cljs-node-io.fs/stat->perm-bita","^2P",false,"^7","cljs_node_io/fs.cljs","^;",23,"^2Q",["^1:",[["~$s"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",62,"^:",62,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["~$s"]]]]],"^6","@param {!fs.Stats} s :: a fs.Stats object\n   @return {!Array<Number>}"],"~$areadlink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",298,"^9",7,"^:",298,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous readlink\n   @param {!string} pathstr :: the symbolic link to read\n   @return {!Channel} promise-chan receiving [?err ?linkstring]"],"^P","~$cljs-node-io.fs/areadlink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",298,"^:",298,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous readlink\n   @param {!string} pathstr :: the symbolic link to read\n   @return {!Channel} promise-chan receiving [?err ?linkstring]"],"~$arename",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",574,"^9",7,"^:",574,"^;",14,"^2L",["^1:",["^2M",["^1:",[["~$oldpathstr","~$newpathstr"]]]]],"^6","Asynchronously rename a file\n   @param {!string} oldpathstr :: file to rename\n   @param {!string} newpathstr :: what to rename it to\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/arename","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^5Y","^5Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",574,"^:",574,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^5Y","^5Z"]]]]],"^6","Asynchronously rename a file\n   @param {!string} oldpathstr :: file to rename\n   @param {!string} newpathstr :: what to rename it to\n   @return {!Channel} promise-chan receiving [?err]"],"~$executable?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",203,"^9",16,"^:",203,"^;",27,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr :: path to test for process executable permission\n   @return {!boolean}"],"^P","~$cljs-node-io.fs/executable?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",27,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",203,"^3;","^39","^:",203,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr :: path to test for process executable permission\n   @return {!boolean}"],"~$chmod",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",327,"^9",7,"^:",327,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Synchronous chmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/chmod","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N","^5L"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",327,"^:",327,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Synchronous chmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {nil} or throws"],"~$unwatchFile",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",714,"^9",7,"^:",714,"^;",18,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","remove all watchers from a file\n   @param {!string} pathstr\n   @return {nil}"],"^P","~$cljs-node-io.fs/unwatchFile","^2P",false,"^7","cljs_node_io/fs.cljs","^;",18,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",714,"^:",714,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","remove all watchers from a file\n   @param {!string} pathstr\n   @return {nil}"],"~$rename",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",566,"^9",7,"^:",566,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^5Y","^5Z"]]]]],"^6","Synchronously rename a file.\n   @param {!string} oldpathstr :: file to rename\n   @param {!string} newpathstr :: what to rename it to\n   @return {nil}"],"^P","~$cljs-node-io.fs/rename","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^5Y","^5Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",566,"^:",566,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^5Y","^5Z"]]]]],"^6","Synchronously rename a file.\n   @param {!string} oldpathstr :: file to rename\n   @param {!string} newpathstr :: what to rename it to\n   @return {nil}"],"~$file?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",124,"^9",16,"^:",124,"^;",21,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","Synchronous file predicate\n   @param {!string} pathstring\n   @return {!boolean} iff abstract pathname exists and is a file"],"^P","~$cljs-node-io.fs/file?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",21,"^2Q",["^1:",[["^3I"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",124,"^3;","^39","^:",124,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","Synchronous file predicate\n   @param {!string} pathstring\n   @return {!boolean} iff abstract pathname exists and is a file"],"~$alstat",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",34,"^9",7,"^:",34,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous lstat\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err ?fs.Stats]"],"^P","~$cljs-node-io.fs/alstat","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",34,"^:",34,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous lstat\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err ?fs.Stats]"],"~$Watcher",["^ ","~:num-fields",2,"^4O",["^O",["^4P","^4Q"]],"^P","~$cljs-node-io.fs/Watcher","^7","cljs_node_io/fs.cljs","^;",17,"~:type",true,"^9",10,"^8",661,"~:record",false,"^:",661,"^38","~$function","^4V",null],"~$realpath",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",276,"^9",7,"^:",276,"^;",15,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous realpath\n   @param {!string} pathstr\n   @return {!string} resolved path"],"^P","~$cljs-node-io.fs/realpath","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",276,"^:",276,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous realpath\n   @param {!string} pathstr\n   @return {!string} resolved path"],"~$fexists?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",155,"^9",16,"^:",155,"^;",24,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously test if a file or directory exists\n   @param {!string} pathstr :: file path to test\n   @return {!boolean}"],"^P","~$cljs-node-io.fs/fexists?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",24,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",155,"^3;","^39","^:",155,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously test if a file or directory exists\n   @param {!string} pathstr :: file path to test\n   @return {!boolean}"],"~$readable?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",171,"^9",16,"^:",171,"^;",25,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously test if a file is readable to the process\n   @param {!string} pathstr :: path to test for process read permission\n   @return {!boolean}"],"^P","~$cljs-node-io.fs/readable?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",25,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",171,"^3;","^39","^:",171,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously test if a file is readable to the process\n   @param {!string} pathstr :: path to test for process read permission\n   @return {!boolean}"],"~$asymlink?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",233,"^9",7,"^:",233,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if path is a symbolic link\n   @param {!string} pathstr :: path to test\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/asymlink?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",233,"^:",233,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if path is a symbolic link\n   @param {!string} pathstr :: path to test\n   @return {!Channel} promise-chan receiving boolean"],"~$watchFile",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",691,"^9",7,"^:",691,"^;",16,"^2L",["^1:",["^2M",["^1:",[["~$filename"],["^6K","^50"]]]]],"^6","Prefer watch. Polls files and returns stat objects. Opts:\n     :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n     :interval {number} (5007) :: polling interval in msecs\n     :edn? {boolean} (true) :: converts stats to edn\n     :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n   @return {!Channel} <= [filename [current fs.stat, previous fs.stat]]","^42",["^ ","^2P",false,"^2T",2,"^2Q",["^1:",[["^6K"],["^6K","^50"]]],"^2L",["^1:",[["^6K"],["^6K","^50"]]],"^2S",["^1:",[null,null]]]],"^P","~$cljs-node-io.fs/watchFile","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^42",["^ ","^2P",false,"^2T",2,"^2Q",["^1:",[["^6K"],["^6K","^50"]]],"^2L",["^1:",[["^6K"],["^6K","^50"]]],"^2S",["^1:",[null,null]]],"^2Q",["^1:",[["^6K"],["^6K","^50"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",691,"^:",691,"^2T",2,"^2U",true,"^2L",["^1:",[["^6K"],["^6K","^50"]]],"^6","Prefer watch. Polls files and returns stat objects. Opts:\n     :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n     :interval {number} (5007) :: polling interval in msecs\n     :edn? {boolean} (true) :: converts stats to edn\n     :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n   @return {!Channel} <= [filename [current fs.stat, previous fs.stat]]"],"~$lchmod",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",344,"^9",7,"^:",344,"^;",13,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Synchronous lchmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {nil}"],"^P","~$cljs-node-io.fs/lchmod","^2P",false,"^7","cljs_node_io/fs.cljs","^;",13,"^2Q",["^1:",[["^2N","^5L"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",344,"^:",344,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Synchronous lchmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {nil}"],"~$alchmod",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",352,"^9",7,"^:",352,"^;",14,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Asynchronous lchmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/alchmod","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^2N","^5L"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",352,"^:",352,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^5L"]]]]],"^6","Asynchronous lchmod\n   @param {!string} pathstr\n   @param {!Number} mode :: must be an integer\n   @return {!Channel} promise-chan receiving [?err]"],"~$areadable?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",179,"^9",7,"^:",179,"^;",17,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file is readable to the process\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/areadable?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",17,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",179,"^:",179,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file is readable to the process\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"~$alchown",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",389,"^9",7,"^:",389,"^;",14,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Asynchronous lchown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/alchown","^2P",false,"^7","cljs_node_io/fs.cljs","^;",14,"^2Q",["^1:",[["^2N","^2Y","^2Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",389,"^:",389,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Asynchronous lchown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {!Channel} promise-chan receiving [?err]"],"~$writeFile",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",617,"^9",7,"^:",617,"^;",16,"^2L",["^1:",["^2M",["^1:",[["^2N","^4[","^50"]]]]],"^6","synchronously writes content to file represented by pathstring.\n   @param {!string} pathstr :: file to write to\n   @param {(string|buffer.Buffer)} content :: if buffer, :encoding is ignored\n   @param {?IMap} opts :: {:encoding {string}, :append {boolean}, :flags {string}, :mode {int}}\n    - flags override append\n    - :encoding defaults to utf8\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/writeFile","^2P",false,"^7","cljs_node_io/fs.cljs","^;",16,"^2Q",["^1:",[["^2N","^4[","^50"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",617,"^:",617,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^4[","^50"]]]]],"^6","synchronously writes content to file represented by pathstring.\n   @param {!string} pathstr :: file to write to\n   @param {(string|buffer.Buffer)} content :: if buffer, :encoding is ignored\n   @param {?IMap} opts :: {:encoding {string}, :append {boolean}, :flags {string}, :mode {int}}\n    - flags override append\n    - :encoding defaults to utf8\n   @return {nil} or throws"],"~$symlink?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",222,"^9",16,"^:",222,"^;",24,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous test for symbolic link\n   @param {!string} pathstr :: path to test\n   @return {!boolean}"],"^P","~$cljs-node-io.fs/symlink?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",24,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",222,"^3;","^39","^:",222,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronous test for symbolic link\n   @param {!string} pathstr :: path to test\n   @return {!boolean}"],"~$link",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",452,"^9",7,"^:",452,"^;",11,"^2L",["^1:",["^2M",["^1:",[["~$srcpathstr","~$dstpathstr"]]]]],"^6","Synchronous link. Will not overwrite newpath if it exists.\n   @param {!string} srcpathstr\n   @param {!string} dstpathstr\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/link","^2P",false,"^7","cljs_node_io/fs.cljs","^;",11,"^2Q",["^1:",[["^6Z","^6["]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",452,"^:",452,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^6Z","^6["]]]]],"^6","Synchronous link. Will not overwrite newpath if it exists.\n   @param {!string} srcpathstr\n   @param {!string} dstpathstr\n   @return {nil} or throws"],"~$hidden?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",92,"^9",16,"^:",92,"^;",23,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr\n   @return {!boolean} is the file hidden (unix only)"],"^P","~$cljs-node-io.fs/hidden?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",23,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",92,"^3;","^39","^:",92,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","@param {!string} pathstr\n   @return {!boolean} is the file hidden (unix only)"],"~$dir?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",98,"^9",16,"^:",98,"^;",20,"^38","^39","^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring\n   @return {!boolean} iff abstract pathname exists and is a directory"],"^P","~$cljs-node-io.fs/dir?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",20,"^2Q",["^1:",[["^3I"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",98,"^3;","^39","^:",98,"^2T",1,"^38","^39","^2U",true,"^2L",["^1:",["^2M",["^1:",[["^3I"]]]]],"^6","@param {!string} pathstring\n   @return {!boolean} iff abstract pathname exists and is a directory"],"~$astat",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",18,"^9",7,"^:",18,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous stat\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err ?fs.Stats]"],"^P","~$cljs-node-io.fs/astat","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",18,"^:",18,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous stat\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving [?err ?fs.Stats]"],"~$touch",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",721,"^9",7,"^:",721,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","creates a file if non-existent, writes blank string to an existing\n   @param {!string} pathstr\n   @return {nil}"],"^P","~$cljs-node-io.fs/touch","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",721,"^:",721,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","creates a file if non-existent, writes blank string to an existing\n   @param {!string} pathstr\n   @return {nil}"],"~$watch",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",669,"^9",7,"^:",669,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^6K"],["^6K","^50"]]]]],"^6","Watch a file or directory.\n   Make note of caveats https://nodejs.org/api/fs.html#fs_caveats\n   events : 'rename', 'change' , 'error', 'close'\n   opts :\n    :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n    :recursive {boolean} (false) :: watch subdirectories\n    :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n    :encoding {string} ('utf8') :: used to interpret passed filename\n   @return {!Watcher}","^42",["^ ","^2P",false,"^2T",2,"^2Q",["^1:",[["^6K"],["^6K","^50"]]],"^2L",["^1:",[["^6K"],["^6K","^50"]]],"^2S",["^1:",[null,null]]]],"^P","~$cljs-node-io.fs/watch","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^42",["^ ","^2P",false,"^2T",2,"^2Q",["^1:",[["^6K"],["^6K","^50"]]],"^2L",["^1:",[["^6K"],["^6K","^50"]]],"^2S",["^1:",[null,null]]],"^2Q",["^1:",[["^6K"],["^6K","^50"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",669,"^:",669,"^2T",2,"^2U",true,"^2L",["^1:",[["^6K"],["^6K","^50"]]],"^6","Watch a file or directory.\n   Make note of caveats https://nodejs.org/api/fs.html#fs_caveats\n   events : 'rename', 'change' , 'error', 'close'\n   opts :\n    :peristent {boolean} (true) :: whether the process should continue as long as files are being watched.\n    :recursive {boolean} (false) :: watch subdirectories\n    :buf-or-n {(impl/Buffer|number)} (10) :: channel buffer\n    :encoding {string} ('utf8') :: used to interpret passed filename\n   @return {!Watcher}"],"~$areaddir",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",314,"^9",7,"^:",314,"^;",15,"^2L",["^1:",["^2M",["^1:",[["^4="]]]]],"^6","Asynchronously reads directory content\n   @param {!string} dirpath :: directory path to read\n   @return {!Channel} promise-chan receiving [?err, ?Vector<string>]\n    where strings are representing directory content"],"^P","~$cljs-node-io.fs/areaddir","^2P",false,"^7","cljs_node_io/fs.cljs","^;",15,"^2Q",["^1:",[["^4="]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",314,"^:",314,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^4="]]]]],"^6","Asynchronously reads directory content\n   @param {!string} dirpath :: directory path to read\n   @return {!Channel} promise-chan receiving [?err, ?Vector<string>]\n    where strings are representing directory content"],"~$aexecutable?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",212,"^9",7,"^:",212,"^;",19,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file is executable to the process\n   @param {!string} pathstr :: path to test for process execute permission\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/aexecutable?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",19,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",212,"^:",212,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronously test if a file is executable to the process\n   @param {!string} pathstr :: path to test for process execute permission\n   @return {!Channel} promise-chan receiving boolean"],"~$chown",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",361,"^9",7,"^:",361,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Synchronous chown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {nil}"],"^P","~$cljs-node-io.fs/chown","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N","^2Y","^2Z"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",361,"^:",361,"^2T",3,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N","^2Y","^2Z"]]]]],"^6","Synchronous chown\n   @param {!string} pathstr\n   @param {!Number} uid\n   @param {!Number} gid\n   @return {nil}"],"~$rmdir",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",437,"^9",7,"^:",437,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously remove a directory\n   @param {!string} pathstr :: path of directory to remove\n   @return {nil} or throws"],"^P","~$cljs-node-io.fs/rmdir","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",437,"^:",437,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Synchronously remove a directory\n   @param {!string} pathstr :: path of directory to remove\n   @return {nil} or throws"],"~$adir?",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",108,"^9",7,"^:",108,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous directory predicate.\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"^P","~$cljs-node-io.fs/adir?","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^2N"]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",108,"^:",108,"^2T",1,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^2N"]]]]],"^6","Asynchronous directory predicate.\n   @param {!string} pathstr\n   @return {!Channel} promise-chan receiving boolean"],"~$alink",["^ ","^2K",null,"^5",["^ ","^7","cljs_node_io/fs.cljs","^8",461,"^9",7,"^:",461,"^;",12,"^2L",["^1:",["^2M",["^1:",[["^6Z","^6["]]]]],"^6","Synchronous link. Will not overwrite newpath if it exists.\n   @param {!string} srcpathstr\n   @param {!string} dstpathstr\n   @return {!Channel} promise-chan receiving [?err]"],"^P","~$cljs-node-io.fs/alink","^2P",false,"^7","cljs_node_io/fs.cljs","^;",12,"^2Q",["^1:",[["^6Z","^6["]]],"^2R",null,"^2S",["^1:",[null,null]],"^9",1,"^8",461,"^:",461,"^2T",2,"^2U",true,"^2L",["^1:",["^2M",["^1:",[["^6Z","^6["]]]]],"^6","Synchronous link. Will not overwrite newpath if it exists.\n   @param {!string} srcpathstr\n   @param {!string} dstpathstr\n   @return {!Channel} promise-chan receiving [?err]"]],"^11",["^ ","^I","^I","^M","^M","^Y","^Y","^D","^D","^V","^D"],"~:cljs.analyzer/constants",["^ ","^[",["^O",["~:encoding","~:key","~:else","~:uid","~:persistent","~:append","~:mode","~:recur","~:close","~:buf-or-n","~:gid","~:recursive","^4T","~:error","~:interval","^4U","^1>","~:edn?"]],"~:order",["^7R","^7K","^7J","^7O","^1>","^7M","^7N","^7H","^7I","^7Q","^7T","^7P","^4T","^4U","^7L","^7S","^7U","^7V"]],"^1>",["^ ","^11",["^O",[]],"^10",["^O",[]]],"^1?",["^ "],"^1@",["^Z","^Y","^D","^W"]],"^S","^Q","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1N",[["^7Z","~:static-fns"],true,["^7Z","~:elide-asserts"],false,["^7Z","~:optimize-constants"],null,["^7Z","~:external-config"],null,["^7Z","~:tooling-config"],null,["^7Z","~:emit-constants"],null,["^7Z","~:infer-externs"],true,["^7Z","^1G"],null,["~:js-options","~:js-provider"],"^10",["^7N"],"~:dev",["^7Z","~:fn-invoke-direct"],null,["^7Z","~:source-map"],"/dev/null"]]]