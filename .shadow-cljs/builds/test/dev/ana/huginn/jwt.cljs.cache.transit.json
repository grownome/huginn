["^ ","~:output",["^ ","~:js","goog.provide('huginn.jwt');\ngoog.require('cljs.core');\ngoog.require('clojure.string');\ngoog.require('promesa.core');\ngoog.require('cljs_node_io.core');\ngoog.require('cljs.nodejs');\ngoog.require('shadow.js.shim.module$jsonwebtoken');\nhuginn.jwt.round_now = (function huginn$jwt$round_now(){\nreturn ((Date.now() / (1000)) | (0));\n});\n/**\n * becuase env vars don't get assinged with newlines in resin\n */\nhuginn.jwt.clean_env_key = (function huginn$jwt$clean_env_key(private_key){\nif(cljs.core.truth_(private_key)){\nvar split = clojure.string.split.cljs$core$IFn$_invoke$arity$2(private_key,/ /);\nvar header = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.take.cljs$core$IFn$_invoke$arity$2((3),split));\nvar footer = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.take_last((3),split));\nvar body = cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((3),cljs.core.drop.cljs$core$IFn$_invoke$arity$2((3),split));\nvar joined_body = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",body);\nvar joined_text = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"\\n\",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [header,joined_body,footer], null));\nreturn joined_text;\n} else {\nreturn null;\n}\n});\n/**\n * Builds a jwt with an experation\n */\nhuginn.jwt.create_jwt = (function huginn$jwt$create_jwt(p__39799){\nvar map__39800 = p__39799;\nvar map__39800__$1 = ((((!((map__39800 == null)))?(((((map__39800.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__39800.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__39800):map__39800);\nvar opts = map__39800__$1;\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39800__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar tokenExpMins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39800__$1,new cljs.core.Keyword(null,\"tokenExpMins\",\"tokenExpMins\",-1638711857));\nvar privateKey = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39800__$1,new cljs.core.Keyword(null,\"privateKey\",\"privateKey\",1845961641));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39800__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nvar algorithm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39800__$1,new cljs.core.Keyword(null,\"algorithm\",\"algorithm\",739262820));\nvar token = ({\"iat\": huginn.jwt.round_now(), \"exp\": ((tokenExpMins * (60)) + huginn.jwt.round_now()), \"aud\": projectId});\nvar privKey = (function (){var or__3949__auto__ = huginn.jwt.clean_env_key(privateKey);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn cljs_node_io.core.slurp(privateKeyFile);\n}\n})();\nvar G__39802 = token;\nvar G__39803 = privKey;\nvar G__39804 = ({\"algorithm\": algorithm});\nreturn shadow.js.shim.module$jsonwebtoken.sign(G__39802,G__39803,G__39804);\n});\nhuginn.jwt.client_id = (function huginn$jwt$client_id(p__39806){\nvar map__39807 = p__39806;\nvar map__39807__$1 = ((((!((map__39807 == null)))?(((((map__39807.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__39807.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__39807):map__39807);\nvar opts = map__39807__$1;\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39807__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar registryId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39807__$1,new cljs.core.Keyword(null,\"registryId\",\"registryId\",-1767694006));\nvar cloudRegion = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39807__$1,new cljs.core.Keyword(null,\"cloudRegion\",\"cloudRegion\",-857757214));\nvar deviceId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39807__$1,new cljs.core.Keyword(null,\"deviceId\",\"deviceId\",1909987208));\nreturn [\"projects/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(projectId),\"/locations/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cloudRegion),\"/registries/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(registryId),\"/devices/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(deviceId)].join('');\n});\n/**\n * builds connection args for connecting to mqtt\n *   The same args are used no matter what topic you\n *   are connecting too\n */\nhuginn.jwt.connection_args = (function huginn$jwt$connection_args(p__39813){\nvar map__39814 = p__39813;\nvar map__39814__$1 = ((((!((map__39814 == null)))?(((((map__39814.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__39814.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__39814):map__39814);\nvar opts = map__39814__$1;\nvar mqttBridgeHostname = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39814__$1,new cljs.core.Keyword(null,\"mqttBridgeHostname\",\"mqttBridgeHostname\",1814277029));\nvar mqttBridgePort = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39814__$1,new cljs.core.Keyword(null,\"mqttBridgePort\",\"mqttBridgePort\",1181584124));\nvar projectId = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39814__$1,new cljs.core.Keyword(null,\"projectId\",\"projectId\",-1551013096));\nvar privateKeyFile = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39814__$1,new cljs.core.Keyword(null,\"privateKeyFile\",\"privateKeyFile\",2040006267));\nvar algorithm = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__39814__$1,new cljs.core.Keyword(null,\"algorithm\",\"algorithm\",739262820));\nreturn ({\"host\": mqttBridgeHostname, \"port\": mqttBridgePort, \"clean\": true, \"clientId\": huginn.jwt.client_id(opts), \"username\": \"unused\", \"password\": huginn.jwt.create_jwt(opts), \"protocol\": \"mqtts\", \"secureProtocol\": \"TLSv1_2_method\"});\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","huginn/jwt.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$jsonwebtoken","~$shadow.js.shim.module$jsonwebtoken","~$mqtt","~$shadow.js.shim.module$mqtt","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$huginn.jwt","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$p","~$promesa.core","^O","^O","^<","^=","~$cljs.core","^P","~$io","~$cljs-node-io.core","~$goog","^S","~$cljs.nodejs","^T","^=","^=","~$nodejs","^T","^R","^R","~$jwt","^=","~$clojure.string","^W","~$st","^W"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^J",["^12",["^Z",["^W","~:as","^X"],["^O","^14","~$p"],["^R","^14","^Q"],["^T","^14","^U"],["^<","^14","^V"]]]]],"~:flags",["^ ","^Z",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^S","^P","^W","^O","^R","^T","^="]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","huginn/jwt.cljs"],"~:compiled-at",1540147874172,"~:resource-name","huginn/jwt.cljs","~:warnings",[],"~:source","(ns huginn.jwt\n  (:require\n   [clojure.string :as st]\n   [promesa.core :as p]\n   [cljs-node-io.core :as io]\n   [cljs.nodejs :as nodejs]\n   [jsonwebtoken :as jwt]))\n\n(defn round-now []\n  (int (/ (js/Date.now) 1000)))\n\n(defn clean-env-key\n  \"becuase env vars don't get assinged with newlines in resin\"\n  [private-key]\n  (when private-key\n    (let [split  (st/split private-key  #\" \")\n          header (st/join \" \" (take 3 split))\n          footer (st/join \" \" (take-last 3 split))\n          body   (drop-last 3 (drop 3 split))\n          joined-body (st/join \"\\n\" body)\n          joined-text (st/join \"\\n\" [header joined-body footer])]\n      joined-text)))\n\n(defn create-jwt\n  \"Builds a jwt with an experation\"\n  [{:keys [projectId tokenExpMins privateKey privateKeyFile algorithm] :as opts}]\n  (let [token\n        #js {:iat (round-now)\n             :exp (+ (* tokenExpMins 60) (round-now)) ;now + 20 min\n             :aud projectId}\n        privKey (or (clean-env-key privateKey) (io/slurp privateKeyFile))]\n    (jwt/sign token privKey #js {:algorithm algorithm })))\n\n(defn client-id\n  [{:keys [projectId registryId cloudRegion deviceId] :as opts}]\n  (str \"projects/\" projectId\n       \"/locations/\" cloudRegion\n       \"/registries/\" registryId\n       \"/devices/\" deviceId))\n\n\n(defn connection-args\n  \"builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too\"\n  [{:keys [mqttBridgeHostname mqttBridgePort projectId privateKeyFile algorithm] :as opts}]\n  #js {:host mqttBridgeHostname\n       :port mqttBridgePort\n       :clean true\n       :clientId (client-id opts)\n       :username \"unused\"\n       :password (create-jwt opts)\n       :protocol \"mqtts\"\n       :secureProtocol \"TLSv1_2_method\"})\n\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;;;;AAQA,uBAAA,vBAAMA;AAAN,AACE,gCAAA,xBAAK,cAAA,bAAG,AAACC;;AAEX;;;2BAAA,3BAAMC,8DAEHC;AAFH,AAGE,oBAAMA;AAAN,AACE,IAAMC,QAAO,+DAAA,/DAACC,mDAASF;IACjBG,SAAO,kDAAA,lDAACC,sDAAY,6CAAA,7CAACC,iDAAOJ;IAC5BK,SAAO,kDAAA,lDAACF,sDAAY,oBAAA,pBAACG,wBAAYN;IACjCO,OAAO,kDAAA,lDAACC,sDAAY,6CAAA,7CAACC,iDAAOT;IAC5BU,cAAY,kDAAA,lDAACP,uDAAaI;IAC1BI,cAAY,kDAAA,KAAA,vDAACR,0IAAcD,OAAOQ,YAAYL;AALpD,AAMEM;;AAPJ;;;AASF;;;wBAAA,gCAAAC,xDAAMM;AAAN,AAAA,IAAAL,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAAA,PAE2EW;gBAF3E,AAAAP,4CAAAJ,eAAA,vEAEWM;mBAFX,AAAAF,4CAAAJ,eAAA,1EAEqBO;iBAFrB,AAAAH,4CAAAJ,eAAA,xEAEkCQ;qBAFlC,AAAAJ,4CAAAJ,eAAA,5EAE6CS;gBAF7C,AAAAL,4CAAAJ,eAAA,vEAE4DU;AAF5D,AAGE,YAAA,RAAME,iBACU,AAAC7B,+BACD,CAAG,gBAAA,fAAGwB,uBAAiB,AAACxB,gCACxBuB;IACVO,UAAQ,iBAAAC,mBAAI,AAAC7B,yBAAcuB;AAAnB,AAAA,oBAAAM;AAAAA;;AAA+B,OAACC,wBAASN;;;AAJvD,AAKE,IAAAO,WAAUJ;IAAVK,WAAgBJ;IAAhBK,WAAA,eAAwCR;AAAxC,AAAA,+CAAAM,SAAAC,SAAAC,1DAACC;;AAEL,uBAAA,+BAAAC,tDAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAApB,gCAAA,AAAAoB,+BAAA,KAAA,OAAA,QAAA,AAAAnB,8CAAAC,mBAAAkB,YAAAA;WAAAA,PAC0DV;gBAD1D,AAAAP,4CAAAiB,eAAA,vEACWf;iBADX,AAAAF,4CAAAiB,eAAA,xEACqBE;kBADrB,AAAAnB,4CAAAiB,eAAA,zEACgCG;eADhC,AAAApB,4CAAAiB,eAAA,tEAC4CI;AAD5C,AAEE,QAAA,mEAAA,uEAAA,uEAAA,zJAAiBnB,qEACEkB,wEACCD,oEACHE;;AAGnB;;;;;6BAAA,qCAAAC,lEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAA1B,gCAAA,AAAA0B,+BAAA,KAAA,OAAA,QAAA,AAAAzB,8CAAAC,mBAAAwB,YAAAA;WAAAA,PAIqFhB;yBAJrF,AAAAP,4CAAAuB,eAAA,hFAIWE;qBAJX,AAAAzB,4CAAAuB,eAAA,5EAI8BG;gBAJ9B,AAAA1B,4CAAAuB,eAAA,vEAI6CrB;qBAJ7C,AAAAF,4CAAAuB,eAAA,5EAIuDlB;gBAJvD,AAAAL,4CAAAuB,eAAA,vEAIsEjB;AAJtE,AAAA,sEAAA,0DAAA,+DAAA,2BAAA,zMAKamB,4BACAC,2CAEI,AAACR,qBAAUX,yCAEX,AAACN,sBAAWM","names",["huginn.jwt/round-now","js/Date.now","huginn.jwt/clean-env-key","private-key","split","clojure.string.split.cljs$core$IFn$_invoke$arity$2","header","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","footer","cljs.core/take-last","body","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","joined-body","joined-text","p__39799","map__39800","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","huginn.jwt/create-jwt","projectId","tokenExpMins","privateKey","privateKeyFile","algorithm","opts","token","privKey","or__3949__auto__","cljs-node-io.core/slurp","G__39802","G__39803","G__39804","js/shadow.js.shim.module$jsonwebtoken.sign","p__39806","map__39807","huginn.jwt/client-id","registryId","cloudRegion","deviceId","p__39813","map__39814","huginn.jwt/connection-args","mqttBridgeHostname","mqttBridgePort"]]],"~:cache-keys",["~#cmap",[["^19","cljs_node_io/file.cljs"],[1537666007418,"^S","^P","~$goog.Uri","~$cljs-node-io.streams","~$cljs-node-io.fs","~$cljs-node-io.protocols"],["^19","goog/dom/tagname.js"],[1530991559994,"^S","~$goog.dom.HtmlElement"],["^19","cljs/core/async/impl/ioc_helpers.cljs"],[1534380136417,"^S","^P","~$cljs.core.async.impl.protocols"],["~:macro","^P"],[1534380137000],["^19","cljs/core/async.cljs"],[1534380136417,"^S","^P","^1K","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers"],["^19","cljs/nodejs.cljs"],[1534380137690,"^S","^P"],["^19","cljs_node_io/fs.cljs"],[1537666007418,"^S","^P","^C","^1K"],["^19","cljs_node_io/core.cljs"],[1537666007418,"^S","^P","^C","^1K","~$cljs-node-io.file","^1G","^1I","^1F"],["^19","goog/math/math.js"],[1530991559994,"^S","~$goog.array","~$goog.asserts"],["^19","goog/labs/useragent/browser.js"],[1530991559994,"^S","^1S","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^19","goog/array/array.js"],[1530991559994,"^S","^1T"],["^19","cljs_node_io/protocols.cljs"],[1537666007418,"^S","^P"],["^1L","~$cljs.core.async.macros"],[1534380136000],["^19","cljs_node_io/streams.cljs"],[1537666007418,"^S","^P","^1F","^C","^1I"],["^19","goog/debug/error.js"],[1530991559994,"^S"],["^19","huginn/jwt.cljs"],[1539537129814,"^S","^P","^W","^O","^R","^T","^="],["^19","promesa/impl/scheduler.cljc"],[1535586406328,"^S","^P","~$promesa.protocols"],["^19","promesa/impl.cljc"],[1535586406328,"^S","^P","^1Y","~$org.bluebird"],["^19","goog/dom/nodetype.js"],[1530991559994,"^S"],["^19","goog/object/object.js"],[1530991559994,"^S"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^19","goog/math/long.js"],[1530991559994,"^S","^1T","~$goog.reflect"],["^19","cljs/core/async/impl/channels.cljs"],[1534380136417,"^S","^P","^1K","^1P","^1N"],["^19","goog/functions/functions.js"],[1530991559994,"^S"],["^19","cljs/core/async/impl/dispatch.cljs"],[1534380136417,"^S","^P","^1N","~$goog.async.nextTick"],["^19","cljs/core/async/impl/protocols.cljs"],[1534380136417,"^S","^P"],["^19","goog/structs/map.js"],[1530991559994,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1V"],["^19","goog/labs/useragent/engine.js"],[1530991559994,"^S","^1S","^1U","^1W"],["~:shadow.build.js-support/require","bluebird"],["~$shadow.js.shim.module$bluebird","shadow.js.shim.module$bluebird.js","^S"],["^1L","~$cljs-node-io.macros"],[1537666007000],["^19","goog/asserts/asserts.js"],[1530991559994,"^S","~$goog.debug.Error","~$goog.dom.NodeType","^1W"],["^19","cljs/core/async/impl/buffers.cljs"],[1534380136417,"^S","^P","^1K"],["^24","jsonwebtoken"],["^=","shadow.js.shim.module$jsonwebtoken.js","^S"],["^19","goog/uri/uri.js"],[1530991559994,"^S","^1S","^1T","^1W","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1L","^C"],[1534380136000],["^19","cljs/core/async/impl/timers.cljs"],[1534380136417,"^S","^P","^1K","^1M","^1P"],["^19","goog/base.js"],[1530991559994],["^19","promesa/core.cljc"],[1535586406328,"^S","^P","^1Y","~$promesa.impl","~$promesa.impl.scheduler"],["^19","goog/structs/structs.js"],[1530991559994,"^S","^1S","^1V"],["^19","org/bluebird.cljs"],[1535669979047,"^S","^P","^25"],["^19","clojure/string.cljs"],[1534380137690,"^S","^P","^1W","~$goog.string.StringBuffer"],["^19","goog/debug/entrypointregistry.js"],[1530991559994,"^S","^1T"],["^19","goog/string/string.js"],[1530991559994,"^S"],["^19","goog/reflect/reflect.js"],[1530991559994,"^S"],["^19","goog/labs/useragent/util.js"],[1530991559994,"^S","^1W"],["^1L","~$cljs.core.async.impl.ioc-macros"],[1534380136000],["^19","goog/string/stringbuffer.js"],[1530991559994,"^S"],["^19","promesa/protocols.cljc"],[1535586406328,"^S","^P"],["^19","goog/iter/iter.js"],[1530991559994,"^S","^1S","^1T","~$goog.functions","~$goog.math"],["^19","goog/async/nexttick.js"],[1530991559994,"^S","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2B","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^19","goog/dom/htmlelement.js"],[1530991559994,"^S"],["^19","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1W","^1V","^1S","^1F","^2@"],["^19","goog/math/integer.js"],[1530991559994,"^S"],["^19","goog/uri/utils.js"],[1530991559994,"^S","^1S","^1T","^1W"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","huginn/jwt.cljs","^7",1,"^8",5,"^9",1,"^:",15],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"~:shadow/js-access-properties",["^H",["now","sign"]],"^I","^J","^M",null,"^N",["^ ","~$p","^O","^O","^O","^<","^=","^P","^P","^Q","^R","^S","^S","^T","^T","^=","^=","^U","^T","^R","^R","^V","^=","^W","^W","^X","^W"],"^Y",["^H",["^Z"]],"~:shadow/js-access-global",["^H",["Date"]],"^[",null,"~:defs",["^ ","~$round-now",["^ ","~:protocol-inline",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",9,"^8",7,"^9",9,"^:",16,"~:arglists",["^12",["~$quote",["^12",[[]]]]]],"^I","~$huginn.jwt/round-now","~:variadic",false,"^6","huginn/jwt.cljs","^:",16,"~:method-params",["^12",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^8",1,"^7",9,"^9",9,"~:max-fixed-arity",0,"~:fn-var",true,"^2P",["^12",["^2Q",["^12",[[]]]]]],"~$clean-env-key",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",12,"^8",7,"^9",12,"^:",20,"^2P",["^12",["^2Q",["^12",[["~$private-key"]]]]],"~:doc","becuase env vars don't get assinged with newlines in resin"],"^I","~$huginn.jwt/clean-env-key","^2S",false,"^6","huginn/jwt.cljs","^:",20,"^2T",["^12",[["^2Z"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",12,"^9",12,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[["^2Z"]]]]],"^2[","becuase env vars don't get assinged with newlines in resin"],"~$create-jwt",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",24,"^8",7,"^9",24,"^:",17,"^2P",["^12",["^2Q",["^12",[[["^ ","~:keys",["~$projectId","~$tokenExpMins","~$privateKey","~$privateKeyFile","~$algorithm"],"^14","~$opts"]]]]]],"^2[","Builds a jwt with an experation"],"^I","~$huginn.jwt/create-jwt","^2S",false,"^6","huginn/jwt.cljs","^:",17,"^2T",["^12",[["~$p__39799"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",24,"^9",24,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^33","^34","^35","^36","^37"],"^14","^38"]]]]]],"^2[","Builds a jwt with an experation"],"~$client-id",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",34,"^8",7,"^9",34,"^:",16,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^33","~$registryId","~$cloudRegion","~$deviceId"],"^14","^38"]]]]]]],"^I","~$huginn.jwt/client-id","^2S",false,"^6","huginn/jwt.cljs","^:",16,"^2T",["^12",[["~$p__39806"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",34,"^9",34,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^33","^3<","^3=","^3>"],"^14","^38"]]]]]]],"~$connection-args",["^ ","^2O",null,"^5",["^ ","^6","huginn/jwt.cljs","^7",42,"^8",7,"^9",42,"^:",22,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["~$mqttBridgeHostname","~$mqttBridgePort","^33","^36","^37"],"^14","^38"]]]]]],"^2[","builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too"],"^I","~$huginn.jwt/connection-args","^2S",false,"^6","huginn/jwt.cljs","^:",22,"^2T",["^12",[["~$p__39813"]]],"^2U",null,"^2V",["^12",[null,null]],"^8",1,"^7",42,"^9",42,"^2W",1,"^2X",true,"^2P",["^12",["^2Q",["^12",[[["^ ","^32",["^3B","^3C","^33","^36","^37"],"^14","^38"]]]]]],"^2[","builds connection args for connecting to mqtt\n  The same args are used no matter what topic you\n  are connecting too"]],"^10",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^Y",["^H",["~:cloudRegion","~:algorithm","~:mqttBridgeHostname","~:deviceId","~:privateKey","~:registryId","~:tokenExpMins","~:projectId","~:privateKeyFile","~:mqttBridgePort"]],"~:order",["^3N","^3M","^3K","^3O","^3H","^3L","^3G","^3J","^3I","^3P"]],"^15",["^ ","^Z",["^H",[]]],"^16",["^ "],"^17",["^S","^P","^W","^O","^R","^T","^="]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1E",[["^3T","~:static-fns"],true,["^3T","~:elide-asserts"],false,["^3T","~:optimize-constants"],null,["^3T","~:external-config"],null,["^3T","~:tooling-config"],null,["^3T","~:emit-constants"],null,["^3T","~:infer-externs"],true,["^3T","^1>"],null,["~:js-options","~:js-provider"],"^Z",["~:mode"],"~:dev",["^3T","~:fn-invoke-direct"],null,["^3T","~:source-map"],"/dev/null"]]]