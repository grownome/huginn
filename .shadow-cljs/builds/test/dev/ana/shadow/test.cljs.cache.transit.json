["^ ","~:output",["^ ","~:js","goog.provide('shadow.test');\ngoog.require('cljs.core');\ngoog.require('cljs.test');\ngoog.require('shadow.test.env');\n/**\n * Like test-vars, but returns a block for further composition and\n *   later execution.\n */\nshadow.test.run_tests_block = (function shadow$test$run_tests_block(env,namespaces){\nvar summary = cljs.core.volatile_BANG_(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"test\",\"test\",577538877),(0),new cljs.core.Keyword(null,\"pass\",\"pass\",1574159993),(0),new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930),(0),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),(0),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"summary\",\"summary\",380847952)], null));\nvar merge_counters = ((function (summary){\nreturn (function (){\nreturn cljs.core._vreset_BANG_(summary,(function (){var G__28070 = cljs.core._deref(summary);\nvar G__28071 = new cljs.core.Keyword(null,\"report-counters\",\"report-counters\",-1702609242).cljs$core$IFn$_invoke$arity$1(cljs.test.get_current_env());\nvar fexpr__28069 = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.merge_with,cljs.core._PLUS_);\nreturn (fexpr__28069.cljs$core$IFn$_invoke$arity$2 ? fexpr__28069.cljs$core$IFn$_invoke$arity$2(G__28070,G__28071) : fexpr__28069.call(null,G__28070,G__28071));\n})());\n});})(summary))\n;\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [((function (summary,merge_counters){\nreturn (function (){\nreturn cljs.test.set_env_BANG_(env);\n});})(summary,merge_counters))\n], null),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(((function (summary,merge_counters){\nreturn (function (ns){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2((shadow.test.test_ns_block.cljs$core$IFn$_invoke$arity$2 ? shadow.test.test_ns_block.cljs$core$IFn$_invoke$arity$2(env,ns) : shadow.test.test_ns_block.call(null,env,ns)),merge_counters);\n});})(summary,merge_counters))\n,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([namespaces], 0))),((function (summary,merge_counters){\nreturn (function (){\nvar G__28074_28156 = cljs.core.deref(summary);\n(cljs.test.report.cljs$core$IFn$_invoke$arity$1 ? cljs.test.report.cljs$core$IFn$_invoke$arity$1(G__28074_28156) : cljs.test.report.call(null,G__28074_28156));\n\nvar G__28076_28159 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(summary),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-run-tests\",\"end-run-tests\",267300563));\n(cljs.test.report.cljs$core$IFn$_invoke$arity$1 ? cljs.test.report.cljs$core$IFn$_invoke$arity$1(G__28076_28159) : cljs.test.report.call(null,G__28076_28159));\n\nreturn cljs.test.clear_env_BANG_();\n});})(summary,merge_counters))\n);\n});\nshadow.test.run_tests = (function shadow$test$run_tests(var_args){\nvar G__28079 = arguments.length;\nswitch (G__28079) {\ncase 0:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nshadow.test.run_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0());\n});\n\nshadow.test.run_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,shadow.test.env.get_test_namespaces());\n});\n\nshadow.test.run_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,namespaces){\nreturn cljs.test.run_block(shadow.test.run_tests_block(env,namespaces));\n});\n\nshadow.test.run_tests.cljs$lang$maxFixedArity = 2;\n\n/**\n * Runs all tests in all namespaces; prints results.\n *   Optional argument is a regular expression; only namespaces with\n *   names matching the regular expression (with re-matches) will be\n *   tested.\n */\nshadow.test.run_all_tests = (function shadow$test$run_all_tests(var_args){\nvar G__28091 = arguments.length;\nswitch (G__28091) {\ncase 0:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nshadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),null);\n});\n\nshadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$1 = (function (env){\nreturn shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2(env,null);\n});\n\nshadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2 = (function (env,re){\nreturn shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2(env,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__28085_SHARP_){\nvar or__3949__auto__ = (re == null);\nif(or__3949__auto__){\nreturn or__3949__auto__;\n} else {\nreturn cljs.core.re_matches(re,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__28085_SHARP_)].join(''));\n}\n}),shadow.test.env.get_test_namespaces())));\n});\n\nshadow.test.run_all_tests.cljs$lang$maxFixedArity = 2;\n\nshadow.test.test_all_vars_block = (function shadow$test$test_all_vars_block(ns){\nvar env = cljs.test.get_current_env();\nvar map__28101 = shadow.test.env.get_test_ns_info(ns);\nvar map__28101__$1 = ((((!((map__28101 == null)))?(((((map__28101.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__28101.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__28101):map__28101);\nvar test_ns = map__28101__$1;\nvar fixtures = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28101__$1,new cljs.core.Keyword(null,\"fixtures\",\"fixtures\",1009814994));\nvar each_fixtures = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28101__$1,new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977));\nvar vars = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__28101__$1,new cljs.core.Keyword(null,\"vars\",\"vars\",-2046957217));\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [((function (env,map__28101,map__28101__$1,test_ns,fixtures,each_fixtures,vars){\nreturn (function (){\nif((env == null)){\ncljs.test.set_env_BANG_(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0());\n} else {\n}\n\nvar temp__5457__auto___28170 = new cljs.core.Keyword(null,\"once\",\"once\",-262568523).cljs$core$IFn$_invoke$arity$1(fixtures);\nif(cljs.core.truth_(temp__5457__auto___28170)){\nvar fix_28171 = temp__5457__auto___28170;\ncljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"once-fixtures\",\"once-fixtures\",1253947167)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns,fix_28171], 0));\n} else {\n}\n\nvar temp__5457__auto__ = new cljs.core.Keyword(null,\"each\",\"each\",940016129).cljs$core$IFn$_invoke$arity$1(fixtures);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar fix = temp__5457__auto__;\nreturn cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"each-fixtures\",\"each-fixtures\",802243977)], null),cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns,fix], 0));\n} else {\nreturn null;\n}\n});})(env,map__28101,map__28101__$1,test_ns,fixtures,each_fixtures,vars))\n], null),cljs.test.test_vars_block(cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(((function (env,map__28101,map__28101__$1,test_ns,fixtures,each_fixtures,vars){\nreturn (function (p1__28096_SHARP_){\nreturn new cljs.core.Keyword(null,\"line\",\"line\",212345235).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(p1__28096_SHARP_));\n});})(env,map__28101,map__28101__$1,test_ns,fixtures,each_fixtures,vars))\n,cljs.core.vals(vars))));\n});\n/**\n * Calls test-vars on every var with :test metadata interned in the\n *   namespace, with fixtures.\n */\nshadow.test.test_all_vars = (function shadow$test$test_all_vars(ns){\nreturn cljs.test.run_block(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(shadow.test.test_all_vars_block(ns),(function (){\nvar G__28121 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-test-all-vars\",\"end-test-all-vars\",548827253),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null);\nreturn (cljs.test.report.cljs$core$IFn$_invoke$arity$1 ? cljs.test.report.cljs$core$IFn$_invoke$arity$1(G__28121) : cljs.test.report.call(null,G__28121));\n})));\n});\n/**\n * Like test-ns, but returns a block for further composition and\n *   later execution.  Does not clear the current env.\n */\nshadow.test.test_ns_block = (function shadow$test$test_ns_block(env,ns){\nif((ns instanceof cljs.core.Symbol)){\n} else {\nthrow (new Error(\"Assert failed: (symbol? ns)\"));\n}\n\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\ncljs.test.set_env_BANG_(env);\n\ncljs.test.do_report(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"begin-test-ns\",\"begin-test-ns\",-1701237033),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n\nreturn cljs.test.block(shadow.test.test_all_vars_block(ns));\n}),(function (){\nreturn cljs.test.do_report(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"end-test-ns\",\"end-test-ns\",1620675645),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),ns], null));\n})], null);\n});\n/**\n * If the namespace defines a function named test-ns-hook, calls that.\n *   Otherwise, calls test-all-vars on the namespace.  'ns' is a\n *   namespace object or a symbol.\n * \n *   Internally binds *report-counters* to a ref initialized to\n *   *initial-report-counters*.  \n */\nshadow.test.test_ns = (function shadow$test$test_ns(var_args){\nvar G__28135 = arguments.length;\nswitch (G__28135) {\ncase 1:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nshadow.test.test_ns.cljs$core$IFn$_invoke$arity$1 = (function (ns){\nreturn shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2(cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0(),ns);\n});\n\nshadow.test.test_ns.cljs$core$IFn$_invoke$arity$2 = (function (env,ns){\nreturn cljs.test.run_block(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(shadow.test.test_ns_block(env,ns),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){\nreturn cljs.test.clear_env_BANG_();\n})], null)));\n});\n\nshadow.test.test_ns.cljs$lang$maxFixedArity = 2;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","~:file","shadow/test.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",16],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$shadow.test","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.test","^J","~$ct","^J","~$shadow.test.env","^L","~$env","^L","~$cljs.core","^N","~$goog","^O"],"~:seen",["^C",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^N","^N","^J","^J","^K","^J"],"~:form",["~#list",["~$ns","^E","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test",["^U",["^Q",["^J","~:as","^K"],["^L","^W","^M"]]]]],"~:flags",["^ ","^Q",["^C",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^J","^L"]],"^G","^E","~:resource-id",["~:shadow.build.classpath/resource","shadow/test.cljs"],"~:compiled-at",1540144999917,"~:resource-name","shadow/test.cljs","~:warnings",[],"~:source","(ns shadow.test\n  \"cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test\"\n  (:require [cljs.test :as ct]\n            [shadow.test.env :as env]))\n\n(declare test-ns-block)\n\n(defn run-tests-block\n  \"Like test-vars, but returns a block for further composition and\n  later execution.\"\n  [env namespaces]\n\n  (let [summary\n        (volatile!\n          {:test 0 :pass 0 :fail 0 :error 0\n           :type :summary})\n\n        merge-counters\n        (fn []\n          (vswap!\n            summary\n            (partial merge-with +)\n            (:report-counters (ct/get-current-env))))]\n\n    (-> [(fn [] (ct/set-env! env))]\n        (into (->> namespaces\n                   (mapcat (fn [ns]\n                             (-> (test-ns-block env ns)\n                                 (conj merge-counters))))))\n        (conj (fn []\n                (ct/report @summary)\n                (ct/report (assoc @summary :type :end-run-tests))\n                (ct/clear-env!))))))\n\n(defn run-tests\n  ([]\n   (run-tests (ct/empty-env)))\n  ([env]\n   (run-tests env (env/get-test-namespaces)))\n  ([env namespaces]\n   (ct/run-block (run-tests-block env namespaces))))\n\n(defn run-all-tests\n  \"Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.\"\n  ([] (run-all-tests (ct/empty-env) nil))\n  ([env] (run-all-tests env nil))\n  ([env re]\n   (run-tests env\n     (->> (env/get-test-namespaces)\n          (filter #(or (nil? re)\n                       (re-matches re (str %))))\n          (into [])))))\n\n(defn test-all-vars-block [ns]\n  (let [env (ct/get-current-env)\n        {:keys [fixtures each-fixtures vars] :as test-ns}\n        (env/get-test-ns-info ns)]\n\n    (-> [(fn []\n           (when (nil? env)\n             (ct/set-env! (ct/empty-env)))\n           (when-let [fix (:once fixtures)]\n             (ct/update-current-env! [:once-fixtures] assoc ns fix))\n           (when-let [fix (:each fixtures)]\n             (ct/update-current-env! [:each-fixtures] assoc ns fix)))]\n\n        (into (ct/test-vars-block\n                (->> vars ;; vars is {test-name test-var}\n                     (vals)\n                     (sort-by #(-> % meta :line)))))\n        #_(conj (fn []\n                  (when (nil? env)\n                    (ct/clear-env!)))))))\n\n(defn test-all-vars\n  \"Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures.\"\n  [ns]\n  (ct/run-block\n    (-> (test-all-vars-block ns)\n        (conj (fn []\n                (ct/report {:type :end-test-all-vars :ns ns}))))))\n\n(defn test-ns-block\n  \"Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env.\"\n  ([env ns]\n   {:pre [(symbol? ns)]}\n   [(fn []\n      (ct/set-env! env)\n      (ct/do-report {:type :begin-test-ns, :ns ns})\n      ;; If the namespace has a test-ns-hook function, call that:\n      ;; FIXME: must turn test-ns-hook into macro so it registers itself instead of just calling a defn\n      (ct/block (test-all-vars-block ns)))\n    (fn []\n      (ct/do-report {:type :end-test-ns, :ns ns}))]))\n\n(defn test-ns\n  \"If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  \"\n  ([ns] (test-ns (ct/empty-env) ns))\n  ([env ns]\n   (ct/run-block\n     (concat (test-ns-block env ns)\n       [(fn []\n          (ct/clear-env!))]))))\n","~:reader-features",["^C",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["shadow.test/run-tests-block","env","namespaces","summary","cljs.core/volatile!","merge-counters","cljs.core/-vreset!","G__28070","cljs.core/-deref","G__28071","fexpr__28069","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/merge-with","cljs.core/+","cljs.test/get-current-env","cljs.test/set-env!","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","ns","shadow.test/test-ns-block","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__28074","cljs.core/deref","cljs.test/report","G__28076","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.test/clear-env!","var_args","G__28079","shadow.test/run-tests","js/Error","shadow.test.run_tests.cljs$core$IFn$_invoke$arity$1","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0","shadow.test.run_tests.cljs$core$IFn$_invoke$arity$2","shadow.test.env/get-test-namespaces","cljs.test/run-block","G__28091","shadow.test/run-all-tests","shadow.test.run_all_tests.cljs$core$IFn$_invoke$arity$2","re","p1__28085#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","or__3949__auto__","cljs.core/re-matches","shadow.test/test-all-vars-block","map__28101","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","fixtures","each-fixtures","vars","test-ns","shadow.test.env/get-test-ns-info","temp__5457__auto__","fix","cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cljs.test/test-vars-block","cljs.core/vals","p1__28096#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/meta","shadow.test/test-all-vars","G__28121","cljs.core/Symbol","cljs.test/do-report","cljs.test/block","G__28135","shadow.test/test-ns","shadow.test.test_ns.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"]]],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1534380137000],["^10","goog/math/math.js"],[1530991559994,"^O","~$goog.array","~$goog.asserts"],["^10","goog/array/array.js"],[1530991559994,"^O","^1?"],["^10","goog/debug/error.js"],[1530991559994,"^O"],["^10","goog/dom/nodetype.js"],[1530991559994,"^O"],["^10","cljs/pprint.cljs"],[1534380137690,"^O","^N","~$clojure.string","~$goog.string","~$goog.string.StringBuffer"],["^10","shadow/test.cljs"],[1540077702615,"^O","^N","^J","^L"],["^10","goog/object/object.js"],[1530991559994,"^O"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^10","goog/math/long.js"],[1530991559994,"^O","^1?","~$goog.reflect"],["^10","shadow/test/env.cljs"],[1540077702615,"^O","^N"],["^10","goog/functions/functions.js"],[1530991559994,"^O"],["^10","goog/structs/map.js"],[1530991559994,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^10","goog/asserts/asserts.js"],[1530991559994,"^O","~$goog.debug.Error","~$goog.dom.NodeType","^1A"],["^1=","~$cljs.pprint"],[1534380137000],["^10","goog/uri/uri.js"],[1530991559994,"^O","^1>","^1?","^1A","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1=","^J"],[1534380137000],["^10","goog/base.js"],[1530991559994],["^10","goog/structs/structs.js"],[1530991559994,"^O","^1>","^1G"],["^10","clojure/string.cljs"],[1534380137690,"^O","^N","^1A","^1B"],["^10","goog/string/string.js"],[1530991559994,"^O"],["^10","goog/reflect/reflect.js"],[1530991559994,"^O"],["^1=","~$clojure.template"],[1534380136000],["^10","goog/string/stringbuffer.js"],[1530991559994,"^O"],["^10","goog/iter/iter.js"],[1530991559994,"^O","^1>","^1?","~$goog.functions","~$goog.math"],["^10","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1A","^1G","^1>","~$goog.Uri","^1B"],["^10","goog/math/integer.js"],[1530991559994,"^O"],["^10","goog/uri/utils.js"],[1530991559994,"^O","^1>","^1?","^1A"],["^10","cljs/test.cljs"],[1534380137690,"^L","^O","^N","^1@","^1J"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs.test just without all those damn macros\n   requires the shadow.build.cljs-hacks deftest mod which calls shadow.test/register-test","^7","shadow/test.cljs","^8",1,"^9",5,"^:",1,"^;",16],"^<",["^ ","^=","^>","^?","^@"],"^A",null,"^B",["^C",[]],"^D","^E","^H",null,"^I",["^ ","^J","^J","^K","^J","^L","^L","^M","^L","^N","^N","^O","^O"],"^P",["^C",["^Q"]],"~:shadow/js-access-global",["^C",["Error"]],"^R",null,"~:defs",["^ ","~$test-ns-block",["^ ","~:protocol-inline",null,"^5",["^ ","^7","shadow/test.cljs","^8",88,"^9",7,"^:",88,"^;",20,"~:arglists",["^U",["~$quote",["^U",[["^M","^V"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"^D","~$shadow.test/test-ns-block","~:variadic",false,"^7","shadow/test.cljs","^;",20,"~:method-params",["^U",[["^M","^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^9",1,"^8",88,"^:",88,"~:max-fixed-arity",2,"~:fn-var",true,"^1[",["^U",["^20",["^U",[["^M","^V"]]]]],"^6","Like test-ns, but returns a block for further composition and\n  later execution.  Does not clear the current env."],"~$run-tests-block",["^ ","^1Z",null,"^5",["^ ","^7","shadow/test.cljs","^8",9,"^9",7,"^:",9,"^;",22,"^1[",["^U",["^20",["^U",[["^M","~$namespaces"]]]]],"^6","Like test-vars, but returns a block for further composition and\n  later execution."],"^D","~$shadow.test/run-tests-block","^22",false,"^7","shadow/test.cljs","^;",22,"^23",["^U",[["^M","^29"]]],"^24",null,"^25",["^U",[null,null]],"^9",1,"^8",9,"^:",9,"^26",2,"^27",true,"^1[",["^U",["^20",["^U",[["^M","^29"]]]]],"^6","Like test-vars, but returns a block for further composition and\n  later execution."],"~$run-tests",["^ ","^1Z",null,"^5",["^ ","^7","shadow/test.cljs","^8",36,"^9",7,"^:",36,"^;",16,"^1[",["^U",["^20",["^U",[[],["^M"],["^M","^29"]]]]],"~:top-fn",["^ ","^22",false,"^26",2,"^23",["^U",[[],["^M"],["^M","^29"]]],"^1[",["^U",[[],["^M"],["^M","^29"]]],"^25",["^U",[null,null,null]]]],"^D","~$shadow.test/run-tests","^22",false,"^7","shadow/test.cljs","^;",16,"^2<",["^ ","^22",false,"^26",2,"^23",["^U",[[],["^M"],["^M","^29"]]],"^1[",["^U",[[],["^M"],["^M","^29"]]],"^25",["^U",[null,null,null]]],"^23",["^U",[[],["^M"],["^M","^29"]]],"^24",null,"^25",["^U",[null,null,null]],"^9",1,"^8",36,"^:",36,"^26",2,"^27",true,"^1[",["^U",[[],["^M"],["^M","^29"]]]],"~$run-all-tests",["^ ","^1Z",null,"^5",["^ ","^7","shadow/test.cljs","^8",44,"^9",7,"^:",44,"^;",20,"^1[",["^U",["^20",["^U",[[],["^M"],["^M","~$re"]]]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested.","^2<",["^ ","^22",false,"^26",2,"^23",["^U",[[],["^M"],["^M","^2?"]]],"^1[",["^U",[[],["^M"],["^M","^2?"]]],"^25",["^U",[null,null,null]]]],"^D","~$shadow.test/run-all-tests","^22",false,"^7","shadow/test.cljs","^;",20,"^2<",["^ ","^22",false,"^26",2,"^23",["^U",[[],["^M"],["^M","^2?"]]],"^1[",["^U",[[],["^M"],["^M","^2?"]]],"^25",["^U",[null,null,null]]],"^23",["^U",[[],["^M"],["^M","^2?"]]],"^24",null,"^25",["^U",[null,null,null]],"^9",1,"^8",44,"^:",44,"^26",2,"^27",true,"^1[",["^U",[[],["^M"],["^M","^2?"]]],"^6","Runs all tests in all namespaces; prints results.\n  Optional argument is a regular expression; only namespaces with\n  names matching the regular expression (with re-matches) will be\n  tested."],"~$test-all-vars-block",["^ ","^1Z",null,"^5",["^ ","^7","shadow/test.cljs","^8",58,"^9",7,"^:",58,"^;",26,"^1[",["^U",["^20",["^U",[["^V"]]]]]],"^D","~$shadow.test/test-all-vars-block","^22",false,"^7","shadow/test.cljs","^;",26,"^23",["^U",[["^V"]]],"^24",null,"^25",["^U",[null,null]],"^9",1,"^8",58,"^:",58,"^26",1,"^27",true,"^1[",["^U",["^20",["^U",[["^V"]]]]]],"~$test-all-vars",["^ ","^1Z",null,"^5",["^ ","^7","shadow/test.cljs","^8",79,"^9",7,"^:",79,"^;",20,"^1[",["^U",["^20",["^U",[["^V"]]]]],"^6","Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures."],"^D","~$shadow.test/test-all-vars","^22",false,"^7","shadow/test.cljs","^;",20,"^23",["^U",[["^V"]]],"^24",null,"^25",["^U",[null,null]],"^9",1,"^8",79,"^:",79,"^26",1,"^27",true,"^1[",["^U",["^20",["^U",[["^V"]]]]],"^6","Calls test-vars on every var with :test metadata interned in the\n  namespace, with fixtures."],"~$test-ns",["^ ","^1Z",null,"^5",["^ ","^7","shadow/test.cljs","^8",102,"^9",7,"^:",102,"^;",14,"^1[",["^U",["^20",["^U",[["^V"],["^M","^V"]]]]],"^6","If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  ","^2<",["^ ","^22",false,"^26",2,"^23",["^U",[["^V"],["^M","^V"]]],"^1[",["^U",[["^V"],["^M","^V"]]],"^25",["^U",[null,null]]]],"^D","~$shadow.test/test-ns","^22",false,"^7","shadow/test.cljs","^;",14,"^2<",["^ ","^22",false,"^26",2,"^23",["^U",[["^V"],["^M","^V"]]],"^1[",["^U",[["^V"],["^M","^V"]]],"^25",["^U",[null,null]]],"^23",["^U",[["^V"],["^M","^V"]]],"^24",null,"^25",["^U",[null,null]],"^9",1,"^8",102,"^:",102,"^26",2,"^27",true,"^1[",["^U",[["^V"],["^M","^V"]]],"^6","If the namespace defines a function named test-ns-hook, calls that.\n  Otherwise, calls test-all-vars on the namespace.  'ns' is a\n  namespace object or a symbol.\n\n  Internally binds *report-counters* to a ref initialized to\n  *initial-report-counters*.  "]],"^S",["^ ","^N","^N","^J","^J","^K","^J"],"~:cljs.analyzer/constants",["^ ","^P",["^C",["~:each","~:report-counters","^G","~:each-fixtures","~:type","~:summary","~:fixtures","~:fail","^8","~:end-run-tests","~:end-test-all-vars","~:once","~:begin-test-ns","~:error","~:pass","~:end-test-ns","~:test","~:vars","~:once-fixtures"]],"~:order",["^2V","^2T","^2N","^2S","^2K","^2L","^2I","^2O","^2M","^2J","^2W","^2Q","^2X","^2H","^8","^G","^2P","^2R","^2U"]],"^X",["^ ","^Q",["^C",[]]],"^Y",["^ "],"^Z",["^O","^N","^J","^L"]],"^G","^E","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1<",[["^30","~:static-fns"],true,["^30","~:elide-asserts"],false,["^30","~:optimize-constants"],null,["^30","~:external-config"],null,["^30","~:tooling-config"],null,["^30","~:emit-constants"],null,["^30","~:infer-externs"],true,["^30","^15"],null,["~:js-options","~:js-provider"],"^Q",["~:mode"],"~:dev",["^30","~:fn-invoke-direct"],null,["^30","~:source-map"],"/dev/null"]]]