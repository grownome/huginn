["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.generators');\ngoog.require('clojure.test.check.random');\ngoog.require('clojure.test.check.results');\ngoog.require('clojure.test.check.rose_tree');\ngoog.require('clojure.test.check.impl');\n\nclojure.test.check.make_rng = (function clojure$test$check$make_rng(seed){\nif(cljs.core.truth_(seed)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed,clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1(seed)], null);\n} else {\nvar non_nil_seed = clojure.test.check.impl.get_current_time_millis();\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [non_nil_seed,clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1(non_nil_seed)], null);\n}\n});\nclojure.test.check.complete = (function clojure$test$check$complete(property,num_trials,seed,reporter_fn){\nvar G__27050_27052 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"complete\",\"complete\",-500388775),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),true,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),num_trials,new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27050_27052) : reporter_fn.call(null,G__27050_27052));\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),true,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),num_trials,new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null);\n});\n/**\n * Tests `property` `num-tests` times.\n * \n *   Takes several optional keys:\n * \n *   `:seed`\n *  Can be used to re-run previous tests, as the seed used is returned\n *  after a test is run.\n * \n *   `:max-size`.\n *  can be used to control the 'size' of generated values. The size will\n *  start at 0, and grow up to max-size, as the number of tests increases.\n *  Generators will use the size parameter to bound their growth. This\n *  prevents, for example, generating a five-thousand element vector on\n *  the very first test.\n * \n *   `:reporter-fn`\n *  A callback function that will be called at various points in the test\n *  run, with a map like:\n * \n *    ;; called after a passing trial\n *    {:type      :trial\n *     :property  #<...>\n *     :so-far    <number of tests run so far>\n *     :num-tests <total number of tests>}\n * \n *    ;; called after each failing trial\n *    {:type         :failure\n *     :property     #<...>\n *     :result       ...\n *     :trial-number <tests ran before failure found>\n *     :failing-args [...]}\n * \n *  It will also be called on :complete, :shrink-step and :shrunk.\n * \n *   Examples:\n * \n *    (def p (for-all [a gen/pos-int] (> (* a a) a)))\n * \n *    (quick-check 100 p)\n *    (quick-check 200 p\n *                 :seed 42\n *                 :max-size 50\n *                 :reporter-fn (fn [m]\n *                                (when (= :failure (:type m))\n *                                  (println \"Uh oh...\"))))\n */\nclojure.test.check.quick_check = (function clojure$test$check$quick_check(var_args){\nvar args__4534__auto__ = [];\nvar len__4531__auto___27079 = arguments.length;\nvar i__4532__auto___27080 = (0);\nwhile(true){\nif((i__4532__auto___27080 < len__4531__auto___27079)){\nargs__4534__auto__.push((arguments[i__4532__auto___27080]));\n\nvar G__27081 = (i__4532__auto___27080 + (1));\ni__4532__auto___27080 = G__27081;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4535__auto__ = ((((2) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((2)),(0),null)):null);\nreturn clojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4535__auto__);\n});\n\nclojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic = (function (num_tests,property,p__27058){\nvar map__27059 = p__27058;\nvar map__27059__$1 = ((((!((map__27059 == null)))?(((((map__27059.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27059.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27059):map__27059);\nvar seed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27059__$1,new cljs.core.Keyword(null,\"seed\",\"seed\",68613327));\nvar max_size = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__27059__$1,new cljs.core.Keyword(null,\"max-size\",\"max-size\",-874966132),(200));\nvar reporter_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__27059__$1,new cljs.core.Keyword(null,\"reporter-fn\",\"reporter-fn\",1280520247),cljs.core.constantly(null));\nvar vec__27067 = clojure.test.check.make_rng(seed);\nvar created_seed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27067,(0),null);\nvar rng = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27067,(1),null);\nvar size_seq = clojure.test.check.generators.make_size_range_seq(max_size);\nvar so_far = (0);\nvar size_seq__$1 = size_seq;\nvar rstate = rng;\nwhile(true){\nif((so_far === num_tests)){\nreturn clojure.test.check.complete(property,num_tests,created_seed,reporter_fn);\n} else {\nvar vec__27070 = size_seq__$1;\nvar seq__27071 = cljs.core.seq(vec__27070);\nvar first__27072 = cljs.core.first(seq__27071);\nvar seq__27071__$1 = cljs.core.next(seq__27071);\nvar size = first__27072;\nvar rest_size_seq = seq__27071__$1;\nvar vec__27073 = clojure.test.check.random.split(rstate);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27073,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27073,(1),null);\nvar result_map_rose = clojure.test.check.generators.call_gen(property,r1,size);\nvar result_map = clojure.test.check.rose_tree.root(result_map_rose);\nvar result = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(result_map);\nvar args = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(result_map);\nvar so_far__$1 = (so_far + (1));\nif(cljs.core.truth_(clojure.test.check.results.passing_QMARK_(result))){\nvar G__27077_27087 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"trial\",\"trial\",-677458347),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"so-far\",\"so-far\",-1973642241),so_far__$1,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),num_tests], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27077_27087) : reporter_fn.call(null,G__27077_27087));\n\nvar G__27091 = so_far__$1;\nvar G__27092 = rest_size_seq;\nvar G__27093 = r2;\nso_far = G__27091;\nsize_seq__$1 = G__27092;\nrstate = G__27093;\ncontinue;\n} else {\nreturn (clojure.test.check.failure.cljs$core$IFn$_invoke$arity$6 ? clojure.test.check.failure.cljs$core$IFn$_invoke$arity$6(property,result_map_rose,so_far__$1,size,created_seed,reporter_fn) : clojure.test.check.failure.call(null,property,result_map_rose,so_far__$1,size,created_seed,reporter_fn));\n}\n}\nbreak;\n}\n});\n\nclojure.test.check.quick_check.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nclojure.test.check.quick_check.cljs$lang$applyTo = (function (seq27054){\nvar G__27055 = cljs.core.first(seq27054);\nvar seq27054__$1 = cljs.core.next(seq27054);\nvar G__27056 = cljs.core.first(seq27054__$1);\nvar seq27054__$2 = cljs.core.next(seq27054__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__27055,G__27056,seq27054__$2);\n});\n\nclojure.test.check.smallest_shrink = (function clojure$test$check$smallest_shrink(total_nodes_visited,depth,smallest){\nvar map__27100 = smallest;\nvar map__27100__$1 = ((((!((map__27100 == null)))?(((((map__27100.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27100.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27100):map__27100);\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27100__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"total-nodes-visited\",\"total-nodes-visited\",-620132443),total_nodes_visited,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),depth,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),clojure.test.check.results.passing_QMARK_(result),new cljs.core.Keyword(null,\"result-data\",\"result-data\",-1724248844),clojure.test.check.results.result_data(result),new cljs.core.Keyword(null,\"smallest\",\"smallest\",-152623883),new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(smallest)], null);\n});\n/**\n * Shrinking a value produces a sequence of smaller values of the same type.\n *   Each of these values can then be shrunk. Think of this as a tree. We do a\n *   modified depth-first search of the tree:\n * \n *   Do a non-exhaustive search for a deeper (than the root) failing example.\n *   Additional rules added to depth-first search:\n *   * If a node passes the property, you may continue searching at this depth,\n *   but not backtrack\n *   * If a node fails the property, search its children\n *   The value returned is the left-most failing example at the depth where a\n *   passing example was found.\n * \n *   Calls reporter-fn on every shrink step.\n */\nclojure.test.check.shrink_loop = (function clojure$test$check$shrink_loop(rose_tree,reporter_fn){\nvar shrinks_this_depth = clojure.test.check.rose_tree.children(rose_tree);\nvar nodes = shrinks_this_depth;\nvar current_smallest = clojure.test.check.rose_tree.root(rose_tree);\nvar total_nodes_visited = (0);\nvar depth = (0);\nwhile(true){\nif(cljs.core.empty_QMARK_(nodes)){\nreturn clojure.test.check.smallest_shrink(total_nodes_visited,depth,current_smallest);\n} else {\nvar head = cljs.core.first(nodes);\nvar tail = cljs.core.rest(nodes);\nvar result = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(clojure.test.check.rose_tree.root(head));\nvar args = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(clojure.test.check.rose_tree.root(head));\nvar shrink_step_map = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"shrink-step\",\"shrink-step\",-541828120),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),args], null);\nif(cljs.core.truth_(clojure.test.check.results.passing_QMARK_(result))){\nvar G__27109_27112 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([shrink_step_map,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pass?\",\"pass?\",-424635753),true,new cljs.core.Keyword(null,\"current-smallest\",\"current-smallest\",1840631643),current_smallest], null)], 0));\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27109_27112) : reporter_fn.call(null,G__27109_27112));\n\nvar G__27113 = tail;\nvar G__27114 = current_smallest;\nvar G__27115 = (total_nodes_visited + (1));\nvar G__27116 = depth;\nnodes = G__27113;\ncurrent_smallest = G__27114;\ntotal_nodes_visited = G__27115;\ndepth = G__27116;\ncontinue;\n} else {\nvar new_smallest = clojure.test.check.rose_tree.root(head);\nvar G__27111_27117 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([shrink_step_map,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pass?\",\"pass?\",-424635753),false,new cljs.core.Keyword(null,\"current-smallest\",\"current-smallest\",1840631643),new_smallest], null)], 0));\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27111_27117) : reporter_fn.call(null,G__27111_27117));\n\nvar temp__5455__auto__ = cljs.core.seq(clojure.test.check.rose_tree.children(head));\nif(temp__5455__auto__){\nvar children = temp__5455__auto__;\nvar G__27118 = children;\nvar G__27119 = new_smallest;\nvar G__27120 = (total_nodes_visited + (1));\nvar G__27121 = (depth + (1));\nnodes = G__27118;\ncurrent_smallest = G__27119;\ntotal_nodes_visited = G__27120;\ndepth = G__27121;\ncontinue;\n} else {\nvar G__27122 = tail;\nvar G__27123 = new_smallest;\nvar G__27124 = (total_nodes_visited + (1));\nvar G__27125 = depth;\nnodes = G__27122;\ncurrent_smallest = G__27123;\ntotal_nodes_visited = G__27124;\ndepth = G__27125;\ncontinue;\n}\n}\n}\nbreak;\n}\n});\nclojure.test.check.failure = (function clojure$test$check$failure(property,failing_rose_tree,trial_number,size,seed,reporter_fn){\nvar root = clojure.test.check.rose_tree.root(failing_rose_tree);\nvar result = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(root);\nvar failing_args = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(root);\nvar G__27127_27134 = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"failure\",\"failure\",720415879),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),clojure.test.check.results.passing_QMARK_(result),new cljs.core.Keyword(null,\"result-data\",\"result-data\",-1724248844),clojure.test.check.results.result_data(result),new cljs.core.Keyword(null,\"trial-number\",\"trial-number\",1762056689),trial_number,new cljs.core.Keyword(null,\"failing-args\",\"failing-args\",-890623811),failing_args], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27127_27134) : reporter_fn.call(null,G__27127_27134));\n\nvar shrunk = clojure.test.check.shrink_loop(failing_rose_tree,((function (root,result,failing_args){\nreturn (function (p1__27126_SHARP_){\nvar G__27130 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__27126_SHARP_,new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property);\nreturn (reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27130) : reporter_fn.call(null,G__27130));\n});})(root,result,failing_args))\n);\nvar G__27131_27135 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"trial-number\",\"trial-number\",1762056689),trial_number,new cljs.core.Keyword(null,\"failing-args\",\"failing-args\",-890623811),failing_args,new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412),shrunk], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__27131_27135) : reporter_fn.call(null,G__27131_27135));\n\nreturn new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),clojure.test.check.results.passing_QMARK_(result),new cljs.core.Keyword(null,\"result-data\",\"result-data\",-1724248844),clojure.test.check.results.result_data(result),new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed,new cljs.core.Keyword(null,\"failing-size\",\"failing-size\",-429562538),size,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),trial_number,new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930),cljs.core.vec(failing_args),new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412),shrunk], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",23],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.results","^I","~$rose","~$clojure.test.check.rose-tree","~$results","^I","~$clojure.test.check.impl","^M","^K","^K","~$cljs.core","^N","~$clojure.test.check.generators","^O","~$goog","^P","~$gen","^O","~$clojure.test.check.random","^R","~$random","^R"],"~:seen",["^B",["~:require"]],"~:uses",["^ ","~$get-current-time-millis","^M","~$exception-like?","^M"],"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^D",["^[",["^U",["^O","~:as","^Q"],["^R","^11","^S"],["^I","^11","^L"],["^K","^11","^J"],["^M","~:refer",["^W","^X"]]]]]],"~:flags",["^ ","^U",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^P","^N","^O","^R","^I","^K","^M"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check.cljc"],"~:compiled-at",1537546389434,"~:resource-name","clojure/test/check.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.results :as results]\n            [clojure.test.check.rose-tree :as rose]\n            [clojure.test.check.impl :refer [get-current-time-millis\n                                             exception-like?]]))\n\n(declare shrink-loop failure)\n\n(defn- make-rng\n  [seed]\n  (if seed\n    [seed (random/make-random seed)]\n    (let [non-nil-seed (get-current-time-millis)]\n      [non-nil-seed (random/make-random non-nil-seed)])))\n\n(defn- complete\n  [property num-trials seed reporter-fn]\n  (reporter-fn {:type :complete\n                :property property\n                :result true\n                :num-tests num-trials\n                :seed seed})\n\n  {:result true :num-tests num-trials :seed seed})\n\n(defn quick-check\n  \"Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \\\"Uh oh...\\\"))))\"\n  [num-tests property & {:keys [seed max-size reporter-fn]\n                         :or {max-size 200, reporter-fn (constantly nil)}}]\n  (let [[created-seed rng] (make-rng seed)\n        size-seq (gen/make-size-range-seq max-size)]\n    (loop [so-far 0\n           size-seq size-seq\n           rstate rng]\n      (if (== so-far num-tests)\n        (complete property num-tests created-seed reporter-fn)\n        (let [[size & rest-size-seq] size-seq\n              [r1 r2] (random/split rstate)\n              result-map-rose (gen/call-gen property r1 size)\n              result-map (rose/root result-map-rose)\n              result (:result result-map)\n              args (:args result-map)\n              so-far (inc so-far)]\n          (if (results/passing? result)\n            (do\n              (reporter-fn {:type :trial\n                            :property property\n                            :so-far so-far\n                            :num-tests num-tests})\n              (recur so-far rest-size-seq r2))\n            (failure property result-map-rose so-far size created-seed reporter-fn)))))))\n\n(defn- smallest-shrink\n  [total-nodes-visited depth smallest]\n  (let [{:keys [result]} smallest]\n    {:total-nodes-visited total-nodes-visited\n     :depth depth\n     :result (results/passing? result)\n     :result-data (results/result-data result)\n     :smallest (:args smallest)}))\n\n(defn- shrink-loop\n  \"Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step.\"\n  [rose-tree reporter-fn]\n  (let [shrinks-this-depth (rose/children rose-tree)]\n    (loop [nodes shrinks-this-depth\n           current-smallest (rose/root rose-tree)\n           total-nodes-visited 0\n           depth 0]\n      (if (empty? nodes)\n        (smallest-shrink total-nodes-visited depth current-smallest)\n        (let [;; can't destructure here because that could force\n              ;; evaluation of (second nodes)\n              head (first nodes)\n              tail (rest nodes)\n              result (:result (rose/root head))\n              args (:args (rose/root head))\n              shrink-step-map {:type :shrink-step\n                               :result result\n                               :args args}]\n          (if (results/passing? result)\n            ;; this node passed the test, so now try testing its right-siblings\n            (do\n              (reporter-fn (merge shrink-step-map {:pass? true\n                                                   :current-smallest current-smallest}))\n              (recur tail current-smallest (inc total-nodes-visited) depth))\n            ;; this node failed the test, so check if it has children,\n            ;; if so, traverse down them. If not, save this as the best example\n            ;; seen now and then look at the right-siblings\n            ;; children\n            (let [new-smallest (rose/root head)]\n              (reporter-fn (merge shrink-step-map {:pass? false\n                                                   :current-smallest new-smallest}))\n              (if-let [children (seq (rose/children head))]\n                (recur children new-smallest (inc total-nodes-visited) (inc depth))\n                (recur tail new-smallest (inc total-nodes-visited) depth)))))))))\n\n(defn- failure\n  [property failing-rose-tree trial-number size seed reporter-fn]\n  (let [root (rose/root failing-rose-tree)\n        result (:result root)\n        failing-args (:args root)]\n\n    (reporter-fn {:type :failure\n                  :property property\n                  :result (results/passing? result)\n                  :result-data (results/result-data result)\n                  :trial-number trial-number\n                  :failing-args failing-args})\n\n    (let [shrunk (shrink-loop failing-rose-tree\n                              #(reporter-fn (assoc % :property property)))]\n      (reporter-fn {:type :shrunk\n                    :property property\n                    :trial-number trial-number\n                    :failing-args failing-args\n                    :shrunk shrunk})\n      {:result (results/passing? result)\n       :result-data (results/result-data result)\n       :seed seed\n       :failing-size size\n       :num-tests trial-number\n       :fail (vec failing-args)\n       :shrunk shrunk})))\n","~:reader-features",["^B",["~:cljs"]],"~:source-map",["^ ","~i17",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",7],["^ ","^1@",0,"^1A",7],["^ ","^1@",0,"^1A",8]]],"~i19",["^ ","~i0",[["^ ","^1@",0,"^1A",8],["^ ","^1@",30,"^1A",8],["^ ","^1@",0,"^1A",9]],"~i7",[["^ ","^1@",0,"^1A",8,"^C","clojure.test.check/make-rng"]]],"~i20",["^ ","~i3",[["^ ","^1@",68,"^1A",8,"^C","seed"]]],"~i21",["^ ","~i2",[["^ ","^1@",0,"^1A",9],["^ ","^1@",0,"^1A",10]],"~i6",[["^ ","^1@",20,"^1A",9,"^C","seed"]]],"~i22",["^ ","~i5",[["^ ","^1@",90,"^1A",10,"^C","seed"]],"~i10",[["^ ","^1@",95,"^1A",10]],"~i11",[["^ ","^1@",95,"^1A",10,"^C","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1"]],"~i30",[["^ ","^1@",163,"^1A",10,"^C","seed"]]],"~i23",["^ ","~i4",[["^ ","^1@",0,"^1A",12],["^ ","^1@",0,"^1A",13],["^ ","^1@",0,"^1A",13]],"^1F",[["^ ","^1@",4,"^1A",12,"^C","non-nil-seed"]],"^1I",[["^ ","^1@",19,"^1A",12]],"~i24",[["^ ","^1@",19,"^1A",12,"^C","clojure.test.check.impl/get-current-time-millis"]]],"^1J",["^ ","~i7",[["^ ","^1@",90,"^1A",13,"^C","non-nil-seed"]],"^1C",[["^ ","^1@",103,"^1A",13]],"^1D",[["^ ","^1@",103,"^1A",13,"^C","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1"]],"~i40",[["^ ","^1@",171,"^1A",13,"^C","non-nil-seed"]]],"~i26",["^ ","~i0",[["^ ","^1@",0,"^1A",16],["^ ","^1@",30,"^1A",16],["^ ","^1@",0,"^1A",17],["^ ","^1@",0,"^1A",20],["^ ","^1@",50,"^1A",20],["^ ","^1@",107,"^1A",20],["^ ","^1@",112,"^1A",20],["^ ","^1@",186,"^1A",20]],"~i7",[["^ ","^1@",0,"^1A",16,"^C","clojure.test.check/complete"]]],"~i27",["^ ","~i3",[["^ ","^1@",68,"^1A",16,"^C","property"]],"~i12",[["^ ","^1@",77,"^1A",16,"^C","num-trials"]],"^1I",[["^ ","^1@",88,"^1A",16,"^C","seed"]],"~i28",[["^ ","^1@",93,"^1A",16,"^C","reporter-fn"]]],"^1O",["^ ","~i2",[["^ ","^1@",0,"^1A",17],["^ ","^1@",4,"^1A",17,"^C","G__27050"],["^ ","^1@",21,"^1A",17],["^ ","^1@",64,"^1A",17],["^ ","^1@",117,"^1A",17],["^ ","^1@",178,"^1A",17],["^ ","^1@",249,"^1A",17],["^ ","^1@",306,"^1A",17],["^ ","^1@",311,"^1A",17],["^ ","^1@",385,"^1A",17],["^ ","^1@",0,"^1A",18],["^ ","^1@",0,"^1A",18],["^ ","^1@",87,"^1A",18,"^C","G__27050"],["^ ","^1@",127,"^1A",18,"^C","G__27050"]],"~i3",[["^ ","^1@",1,"^1A",18,"^C","reporter-fn"],["^ ","^1@",45,"^1A",18,"^C","reporter-fn"],["^ ","^1@",105,"^1A",18,"^C","reporter-fn"]]],"~i29",["^ ","^1L",[["^ ","^1@",240,"^1A",17,"^C","property"]]],"~i31",["^ ","^1M",[["^ ","^1@",374,"^1A",17,"^C","num-trials"]]],"~i32",["^ ","^1E",[["^ ","^1@",436,"^1A",17,"^C","seed"]]],"~i34",["^ ","^1M",[["^ ","^1@",175,"^1A",20,"^C","num-trials"]],"~i44",[["^ ","^1@",237,"^1A",20,"^C","seed"]]],"~i36",["^ ","~i0",[["^ ","^1@",0,"^1A",22],["^ ","^1@",0,"^1A",22],["^ ","^1@",33,"^1A",69],["^ ","^1@",74,"^1A",69,"^C","var_args"],["^ ","^1@",0,"^1A",70],["^ ","^1@",0,"^1A",70],["^ ","^1@",4,"^1A",70,"^C","args__4534__auto__"],["^ ","^1@",25,"^1A",70],["^ ","^1@",0,"^1A",71],["^ ","^1@",0,"^1A",71],["^ ","^1@",4,"^1A",71,"^C","len__4531__auto__"],["^ ","^1@",30,"^1A",71],["^ ","^1@",30,"^1A",71],["^ ","^1@",0,"^1A",72],["^ ","^1@",0,"^1A",72],["^ ","^1@",4,"^1A",72,"^C","i__4532__auto__"],["^ ","^1@",28,"^1A",72],["^ ","^1@",0,"^1A",74],["^ ","^1@",0,"^1A",74],["^ ","^1@",3,"^1A",74],["^ ","^1@",4,"^1A",74,"^C","i__4532__auto__"],["^ ","^1@",28,"^1A",74,"^C","len__4531__auto__"],["^ ","^1@",0,"^1A",75],["^ ","^1@",0,"^1A",75],["^ ","^1@",0,"^1A",75,"^C","args__4534__auto__"],["^ ","^1@",24,"^1A",75],["^ ","^1@",25,"^1A",75],["^ ","^1@",35,"^1A",75,"^C","i__4532__auto__"],["^ ","^1@",0,"^1A",77],["^ ","^1@",15,"^1A",77],["^ ","^1@",16,"^1A",77,"^C","i__4532__auto__"],["^ ","^1@",40,"^1A",77],["^ ","^1@",0,"^1A",81],["^ ","^1@",0,"^1A",85],["^ ","^1@",4,"^1A",85,"^C","argseq__4535__auto__"],["^ ","^1@",27,"^1A",85],["^ ","^1@",29,"^1A",85],["^ ","^1@",30,"^1A",85],["^ ","^1@",36,"^1A",85],["^ ","^1@",36,"^1A",85,"^C","args__4534__auto__"],["^ ","^1@",64,"^1A",85],["^ ","^1@",64,"^1A",85],["^ ","^1@",69,"^1A",85,"^C","cljs.core/IndexedSeq"],["^ ","^1@",90,"^1A",85],["^ ","^1@",90,"^1A",85,"^C","args__4534__auto__"],["^ ","^1@",115,"^1A",85],["^ ","^1@",120,"^1A",85],["^ ","^1@",124,"^1A",85],["^ ","^1@",131,"^1A",85],["^ ","^1@",0,"^1A",86],["^ ","^1@",0,"^1A",86],["^ ","^1@",7,"^1A",86,"^C","clojure.test.check/quick-check"],["^ ","^1@",75,"^1A",86],["^ ","^1@",76,"^1A",86],["^ ","^1@",86,"^1A",86],["^ ","^1@",92,"^1A",86],["^ ","^1@",93,"^1A",86],["^ ","^1@",103,"^1A",86],["^ ","^1@",109,"^1A",86,"^C","argseq__4535__auto__"],["^ ","^1@",0,"^1A",89],["^ ","^1@",0,"^1A",89],["^ ","^1@",0,"^1A",89],["^ ","^1@",0,"^1A",89,"^C","clojure.test.check/quick-check"],["^ ","^1@",70,"^1A",89],["^ ","^1@",100,"^1A",89,"^C","p__27058"],["^ ","^1@",0,"^1A",90],["^ ","^1@",0,"^1A",90],["^ ","^1@",4,"^1A",90,"^C","map__27059"],["^ ","^1@",17,"^1A",90,"^C","p__27058"],["^ ","^1@",4,"^1A",91,"^C","map__27059"],["^ ","^1@",21,"^1A",91],["^ ","^1@",23,"^1A",91],["^ ","^1@",25,"^1A",91],["^ ","^1@",27,"^1A",91],["^ ","^1@",28,"^1A",91,"^C","map__27059"],["^ ","^1@",42,"^1A",91],["^ ","^1@",50,"^1A",91],["^ ","^1@",52,"^1A",91],["^ ","^1@",54,"^1A",91],["^ ","^1@",55,"^1A",91],["^ ","^1@",55,"^1A",91,"^C","map__27059"],["^ ","^1@",104,"^1A",91],["^ ","^1@",115,"^1A",91],["^ ","^1@",116,"^1A",91,"^C","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1@",148,"^1A",91],["^ ","^1@",148,"^1A",91,"^C","map__27059"],["^ ","^1@",179,"^1A",91],["^ ","^1@",184,"^1A",91],["^ ","^1@",191,"^1A",91],["^ ","^1@",199,"^1A",91],["^ ","^1@",199,"^1A",91,"^C","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1@",245,"^1A",91,"^C","cljs.core/hash-map"],["^ ","^1@",264,"^1A",91,"^C","map__27059"],["^ ","^1@",276,"^1A",91,"^C","map__27059"],["^ ","^1@",11,"^1A",92],["^ ","^1@",11,"^1A",92,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1@",55,"^1A",92,"^C","map__27059"],["^ ","^1@",70,"^1A",92],["^ ","^1@",15,"^1A",93],["^ ","^1@",15,"^1A",93,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1@",59,"^1A",93,"^C","map__27059"],["^ ","^1@",74,"^1A",93],["^ ","^1@",135,"^1A",93],["^ ","^1@",18,"^1A",94],["^ ","^1@",18,"^1A",94,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1@",62,"^1A",94,"^C","map__27059"],["^ ","^1@",77,"^1A",94],["^ ","^1@",0,"^1A",95],["^ ","^1@",0,"^1A",139],["^ ","^1@",0,"^1A",139],["^ ","^1@",0,"^1A",139,"^C","clojure.test.check/quick-check"],["^ ","^1@",57,"^1A",139],["^ ","^1@",0,"^1A",141],["^ ","^1@",0,"^1A",142],["^ ","^1@",0,"^1A",142],["^ ","^1@",0,"^1A",142,"^C","clojure.test.check/quick-check"],["^ ","^1@",51,"^1A",142],["^ ","^1@",62,"^1A",142,"^C","seq27054"],["^ ","^1@",0,"^1A",143],["^ ","^1@",0,"^1A",143],["^ ","^1@",4,"^1A",143,"^C","G__27055"],["^ ","^1@",15,"^1A",143],["^ ","^1@",15,"^1A",143,"^C","cljs.core/first"],["^ ","^1@",31,"^1A",143,"^C","seq27054"],["^ ","^1@",4,"^1A",144,"^C","seq27054"],["^ ","^1@",19,"^1A",144],["^ ","^1@",19,"^1A",144,"^C","cljs.core/next"],["^ ","^1@",34,"^1A",144,"^C","seq27054"],["^ ","^1@",4,"^1A",145,"^C","G__27056"],["^ ","^1@",15,"^1A",145],["^ ","^1@",15,"^1A",145,"^C","cljs.core/first"],["^ ","^1@",31,"^1A",145,"^C","seq27054"],["^ ","^1@",4,"^1A",146,"^C","seq27054"],["^ ","^1@",19,"^1A",146],["^ ","^1@",19,"^1A",146,"^C","cljs.core/next"],["^ ","^1@",34,"^1A",146,"^C","seq27054"],["^ ","^1@",0,"^1A",147],["^ ","^1@",0,"^1A",147],["^ ","^1@",4,"^1A",147,"^C","self__4518__auto__"],["^ ","^1@",25,"^1A",147],["^ ","^1@",0,"^1A",148],["^ ","^1@",0,"^1A",148],["^ ","^1@",7,"^1A",148,"^C","self__4518__auto__"],["^ ","^1@",63,"^1A",148,"^C","G__27055"],["^ ","^1@",72,"^1A",148,"^C","G__27056"],["^ ","^1@",81,"^1A",148,"^C","seq27054"],["^ ","^1@",0,"^1A",151]],"~i6",[["^ ","^1@",0,"^1A",69,"^C","clojure.test.check/quick-check"]]],"~i82",["^ ","~i3",[["^ ","^1@",81,"^1A",89,"^C","num-tests"]],"~i13",[["^ ","^1@",91,"^1A",89,"^C","property"]],"^1R",[["^ ","^1@",4,"^1A",92,"^C","seed"]],"~i37",[["^ ","^1@",4,"^1A",93,"^C","max-size"]],"~i46",[["^ ","^1@",4,"^1A",94,"^C","reporter-fn"]]],"~i83",["^ ","~i56",[["^ ","^1@",144,"^1A",94],["^ ","^1@",165,"^1A",94]],"~i57",[["^ ","^1@",144,"^1A",94,"^C","cljs.core/constantly"]]],"~i84",["^ ","~i2",[["^ ","^1@",0,"^1A",95],["^ ","^1@",4,"^1A",95,"^C","vec__27067"],["^ ","^1@",19,"^1A",96],["^ ","^1@",19,"^1A",96,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1@",63,"^1A",96,"^C","vec__27067"],["^ ","^1@",74,"^1A",96],["^ ","^1@",78,"^1A",96],["^ ","^1@",10,"^1A",97],["^ ","^1@",10,"^1A",97,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1@",54,"^1A",97,"^C","vec__27067"],["^ ","^1@",65,"^1A",97],["^ ","^1@",69,"^1A",97],["^ ","^1@",0,"^1A",99]],"~i9",[["^ ","^1@",4,"^1A",96,"^C","created-seed"]],"^1E",[["^ ","^1@",4,"^1A",97,"^C","rng"]],"^1M",[["^ ","^1@",17,"^1A",95]],"^1O",[["^ ","^1@",17,"^1A",95,"^C","clojure.test.check/make-rng"]],"^1X",[["^ ","^1@",45,"^1A",95,"^C","seed"]]],"~i85",["^ ","~i8",[["^ ","^1@",4,"^1A",98,"^C","size-seq"]],"^1?",[["^ ","^1@",15,"^1A",98]],"~i18",[["^ ","^1@",15,"^1A",98,"^C","clojure.test.check.generators/make-size-range-seq"]],"~i42",[["^ ","^1@",65,"^1A",98,"^C","max-size"]]],"~i86",["^ ","~i4",[["^ ","^1@",0,"^1A",99],["^ ","^1@",13,"^1A",99],["^ ","^1@",0,"^1A",103]],"^1G",[["^ ","^1@",4,"^1A",99,"^C","so-far"]]],"~i87",["^ ","^1G",[["^ ","^1@",4,"^1A",100,"^C","size-seq"]],"^1C",[["^ ","^1@",19,"^1A",100,"^C","size-seq"]]],"~i88",["^ ","^1G",[["^ ","^1@",4,"^1A",101,"^C","rstate"]],"^23",[["^ ","^1@",13,"^1A",101,"^C","rng"]]],"~i89",["^ ","~i6",[["^ ","^1@",0,"^1A",103]],"^1F",[["^ ","^1@",3,"^1A",103]],"~i14",[["^ ","^1@",4,"^1A",103,"^C","so-far"]],"^1D",[["^ ","^1@",15,"^1A",103,"^C","num-tests"]]],"~i90",["^ ","~i8",[["^ ","^1@",0,"^1A",104]],"~i9",[["^ ","^1@",7,"^1A",104,"^C","clojure.test.check/complete"]],"^23",[["^ ","^1@",35,"^1A",104,"^C","property"]],"^1M",[["^ ","^1@",44,"^1A",104,"^C","num-tests"]],"^1X",[["^ ","^1@",54,"^1A",104,"^C","created-seed"]],"~i50",[["^ ","^1@",67,"^1A",104,"^C","reporter-fn"]]],"~i91",["^ ","~i8",[["^ ","^1@",0,"^1A",106],["^ ","^1@",4,"^1A",106,"^C","vec__27070"],["^ ","^1@",4,"^1A",107,"^C","seq__27071"],["^ ","^1@",17,"^1A",107],["^ ","^1@",17,"^1A",107,"^C","cljs.core/seq"],["^ ","^1@",31,"^1A",107,"^C","vec__27070"],["^ ","^1@",4,"^1A",108,"^C","first__27072"],["^ ","^1@",19,"^1A",108],["^ ","^1@",19,"^1A",108,"^C","cljs.core/first"],["^ ","^1@",35,"^1A",108,"^C","seq__27071"],["^ ","^1@",4,"^1A",109,"^C","seq__27071"],["^ ","^1@",21,"^1A",109],["^ ","^1@",21,"^1A",109,"^C","cljs.core/next"],["^ ","^1@",36,"^1A",109,"^C","seq__27071"],["^ ","^1@",11,"^1A",110,"^C","first__27072"],["^ ","^1@",20,"^1A",111,"^C","seq__27071"],["^ ","^1@",4,"^1A",112,"^C","vec__27073"],["^ ","^1@",9,"^1A",113],["^ ","^1@",9,"^1A",113,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1@",53,"^1A",113,"^C","vec__27073"],["^ ","^1@",64,"^1A",113],["^ ","^1@",68,"^1A",113],["^ ","^1@",9,"^1A",114],["^ ","^1@",9,"^1A",114,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1@",53,"^1A",114,"^C","vec__27073"],["^ ","^1@",64,"^1A",114],["^ ","^1@",68,"^1A",114],["^ ","^1@",0,"^1A",120]],"~i15",[["^ ","^1@",4,"^1A",110,"^C","size"]],"^1E",[["^ ","^1@",4,"^1A",111,"^C","rest-size-seq"]],"^1X",[["^ ","^1@",17,"^1A",106,"^C","size-seq"]]],"~i92",["^ ","^2=",[["^ ","^1@",4,"^1A",113,"^C","r1"]],"^23",[["^ ","^1@",4,"^1A",114,"^C","r2"]],"^1E",[["^ ","^1@",17,"^1A",112]],"^1I",[["^ ","^1@",17,"^1A",112,"^C","clojure.test.check.random/split"]],"^1U",[["^ ","^1@",49,"^1A",112,"^C","rstate"]]],"~i93",["^ ","^29",[["^ ","^1@",4,"^1A",115,"^C","result-map-rose"]],"^1H",[["^ ","^1@",22,"^1A",115]],"^1Q",[["^ ","^1@",22,"^1A",115,"^C","clojure.test.check.generators/call-gen"]],"^1T",[["^ ","^1@",61,"^1A",115,"^C","property"]],"~i53",[["^ ","^1@",70,"^1A",115,"^C","r1"]],"^1[",[["^ ","^1@",73,"^1A",115,"^C","size"]]],"~i94",["^ ","^29",[["^ ","^1@",4,"^1A",116,"^C","result-map"]],"~i25",[["^ ","^1@",17,"^1A",116]],"^1L",[["^ ","^1@",17,"^1A",116,"^C","clojure.test.check.rose-tree/root"]],"^1U",[["^ ","^1@",51,"^1A",116,"^C","result-map-rose"]]],"~i95",["^ ","^29",[["^ ","^1@",4,"^1A",117,"^C","result"]],"^1D",[["^ ","^1@",13,"^1A",117],["^ ","^1@",13,"^1A",117]],"^1H",[["^ ","^1@",100,"^1A",117,"^C","result-map"]]],"~i96",["^ ","^29",[["^ ","^1@",4,"^1A",118,"^C","args"]],"^1B",[["^ ","^1@",11,"^1A",118],["^ ","^1@",11,"^1A",118]],"^1L",[["^ ","^1@",94,"^1A",118,"^C","result-map"]]],"~i97",["^ ","^29",[["^ ","^1@",4,"^1A",119,"^C","so-far"]],"^1D",[["^ ","^1@",17,"^1A",119],["^ ","^1@",27,"^1A",119]],"^1L",[["^ ","^1@",18,"^1A",119,"^C","so-far"]]],"~i98",["^ ","^1F",[["^ ","^1@",0,"^1A",120]],"^29",[["^ ","^1@",20,"^1A",120]],"^2=",[["^ ","^1@",20,"^1A",120,"^C","clojure.test.check.results/passing?"]],"^1R",[["^ ","^1@",62,"^1A",120,"^C","result"]]],"~i99",["^ ","^1N",[["^ ","^1@",0,"^1A",121]]],"~i100",["^ ","^29",[["^ ","^1@",0,"^1A",121],["^ ","^1@",4,"^1A",121,"^C","G__27077"],["^ ","^1@",21,"^1A",121],["^ ","^1@",64,"^1A",121],["^ ","^1@",117,"^1A",121],["^ ","^1@",172,"^1A",121],["^ ","^1@",243,"^1A",121],["^ ","^1@",312,"^1A",121],["^ ","^1@",0,"^1A",122],["^ ","^1@",0,"^1A",122],["^ ","^1@",87,"^1A",122,"^C","G__27077"],["^ ","^1@",127,"^1A",122,"^C","G__27077"]],"^2=",[["^ ","^1@",1,"^1A",122,"^C","reporter-fn"],["^ ","^1@",45,"^1A",122,"^C","reporter-fn"],["^ ","^1@",105,"^1A",122,"^C","reporter-fn"]]],"~i101",["^ ","~i38",[["^ ","^1@",234,"^1A",121,"^C","property"]]],"~i102",["^ ","^1U",[["^ ","^1@",301,"^1A",121,"^C","so-far"]]],"~i103",["^ ","~i39",[["^ ","^1@",375,"^1A",121,"^C","num-tests"]]],"~i104",["^ ","^29",[["^ ","^1@",0,"^1A",124]],"^1D",[["^ ","^1@",15,"^1A",124,"^C","so-far"]],"^1O",[["^ ","^1@",15,"^1A",125,"^C","rest-size-seq"]],"^24",[["^ ","^1@",15,"^1A",126,"^C","r2"]]],"~i105",["^ ","^1N",[["^ ","^1@",0,"^1A",132]],"^1W",[["^ ","^1@",8,"^1A",132,"^C","clojure.test.check/failure"],["^ ","^1@",67,"^1A",132,"^C","clojure.test.check/failure"],["^ ","^1@",193,"^1A",132,"^C","clojure.test.check/failure"]],"^1D",[["^ ","^1@",124,"^1A",132,"^C","property"],["^ ","^1@",230,"^1A",132,"^C","property"]],"^1H",[["^ ","^1@",133,"^1A",132,"^C","result-map-rose"],["^ ","^1@",239,"^1A",132,"^C","result-map-rose"]],"^1Y",[["^ ","^1@",149,"^1A",132,"^C","so-far"],["^ ","^1@",255,"^1A",132,"^C","so-far"]],"^2@",[["^ ","^1@",160,"^1A",132,"^C","size"],["^ ","^1@",266,"^1A",132,"^C","size"]],"~i58",[["^ ","^1@",165,"^1A",132,"^C","created-seed"],["^ ","^1@",271,"^1A",132,"^C","created-seed"]],"~i71",[["^ ","^1@",178,"^1A",132,"^C","reporter-fn"],["^ ","^1@",284,"^1A",132,"^C","reporter-fn"]]],"~i107",["^ ","~i0",[["^ ","^1@",0,"^1A",151],["^ ","^1@",37,"^1A",151],["^ ","^1@",0,"^1A",152]],"~i7",[["^ ","^1@",0,"^1A",151,"^C","clojure.test.check/smallest-shrink"]]],"~i108",["^ ","~i3",[["^ ","^1@",82,"^1A",151,"^C","total-nodes-visited"]],"^1I",[["^ ","^1@",102,"^1A",151,"^C","depth"]],"^1P",[["^ ","^1@",108,"^1A",151,"^C","smallest"]]],"~i109",["^ ","~i2",[["^ ","^1@",0,"^1A",152],["^ ","^1@",4,"^1A",152,"^C","map__27100"],["^ ","^1@",4,"^1A",153,"^C","map__27100"],["^ ","^1@",21,"^1A",153],["^ ","^1@",23,"^1A",153],["^ ","^1@",25,"^1A",153],["^ ","^1@",27,"^1A",153],["^ ","^1@",28,"^1A",153,"^C","map__27100"],["^ ","^1@",42,"^1A",153],["^ ","^1@",50,"^1A",153],["^ ","^1@",52,"^1A",153],["^ ","^1@",54,"^1A",153],["^ ","^1@",55,"^1A",153],["^ ","^1@",55,"^1A",153,"^C","map__27100"],["^ ","^1@",104,"^1A",153],["^ ","^1@",115,"^1A",153],["^ ","^1@",116,"^1A",153,"^C","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1@",148,"^1A",153],["^ ","^1@",148,"^1A",153,"^C","map__27100"],["^ ","^1@",179,"^1A",153],["^ ","^1@",184,"^1A",153],["^ ","^1@",191,"^1A",153],["^ ","^1@",199,"^1A",153],["^ ","^1@",199,"^1A",153,"^C","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1@",245,"^1A",153,"^C","cljs.core/hash-map"],["^ ","^1@",264,"^1A",153,"^C","map__27100"],["^ ","^1@",276,"^1A",153,"^C","map__27100"],["^ ","^1@",13,"^1A",154],["^ ","^1@",13,"^1A",154,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1@",57,"^1A",154,"^C","map__27100"],["^ ","^1@",72,"^1A",154],["^ ","^1@",0,"^1A",155],["^ ","^1@",0,"^1A",155],["^ ","^1@",50,"^1A",155],["^ ","^1@",153,"^1A",155],["^ ","^1@",214,"^1A",155],["^ ","^1@",321,"^1A",155],["^ ","^1@",436,"^1A",155]],"~i16",[["^ ","^1@",4,"^1A",154,"^C","result"]],"^2B",[["^ ","^1@",17,"^1A",152,"^C","smallest"]]],"~i110",["^ ","^1L",[["^ ","^1@",133,"^1A",155,"^C","total-nodes-visited"]]],"~i111",["^ ","^1N",[["^ ","^1@",208,"^1A",155,"^C","depth"]]],"~i112",["^ ","^1W",[["^ ","^1@",271,"^1A",155]],"^29",[["^ ","^1@",271,"^1A",155,"^C","clojure.test.check.results/passing?"]],"^1Q",[["^ ","^1@",313,"^1A",155,"^C","result"]]],"~i113",["^ ","^23",[["^ ","^1@",389,"^1A",155]],"^1B",[["^ ","^1@",389,"^1A",155,"^C","clojure.test.check.results/result-data"]],"^2M",[["^ ","^1@",428,"^1A",155,"^C","result"]]],"~i114",["^ ","^2=",[["^ ","^1@",497,"^1A",155],["^ ","^1@",497,"^1A",155]],"^1E",[["^ ","^1@",580,"^1A",155,"^C","smallest"]]],"~i116",["^ ","~i0",[["^ ","^1@",0,"^1A",157],["^ ","^1@",33,"^1A",172],["^ ","^1@",0,"^1A",173]],"~i7",[["^ ","^1@",0,"^1A",172,"^C","clojure.test.check/shrink-loop"]]],"~i130",["^ ","~i3",[["^ ","^1@",74,"^1A",172,"^C","rose-tree"]],"^1W",[["^ ","^1@",84,"^1A",172,"^C","reporter-fn"]]],"~i131",["^ ","~i2",[["^ ","^1@",0,"^1A",173],["^ ","^1@",0,"^1A",174]],"~i8",[["^ ","^1@",4,"^1A",173,"^C","shrinks-this-depth"]],"^1M",[["^ ","^1@",25,"^1A",173]],"^1O",[["^ ","^1@",25,"^1A",173,"^C","clojure.test.check.rose-tree/children"]],"^24",[["^ ","^1@",63,"^1A",173,"^C","rose-tree"]]],"~i132",["^ ","~i4",[["^ ","^1@",0,"^1A",174],["^ ","^1@",26,"^1A",176],["^ ","^1@",12,"^1A",177],["^ ","^1@",0,"^1A",179]],"^1G",[["^ ","^1@",4,"^1A",174,"^C","nodes"]],"^1?",[["^ ","^1@",12,"^1A",174,"^C","shrinks-this-depth"]]],"~i133",["^ ","^1G",[["^ ","^1@",4,"^1A",175,"^C","current-smallest"]],"^1O",[["^ ","^1@",23,"^1A",175]],"^1P",[["^ ","^1@",23,"^1A",175,"^C","clojure.test.check.rose-tree/root"]],"^2M",[["^ ","^1@",57,"^1A",175,"^C","rose-tree"]]],"~i134",["^ ","^1G",[["^ ","^1@",4,"^1A",176,"^C","total-nodes-visited"]]],"~i135",["^ ","^1G",[["^ ","^1@",4,"^1A",177,"^C","depth"]]],"~i136",["^ ","~i6",[["^ ","^1@",0,"^1A",179]],"^1F",[["^ ","^1@",3,"^1A",179]],"^1G",[["^ ","^1@",3,"^1A",179,"^C","cljs.core/empty?"]],"^23",[["^ ","^1@",26,"^1A",179,"^C","nodes"]]],"~i137",["^ ","~i8",[["^ ","^1@",0,"^1A",180]],"~i9",[["^ ","^1@",7,"^1A",180,"^C","clojure.test.check/smallest-shrink"]],"^2B",[["^ ","^1@",42,"^1A",180,"^C","total-nodes-visited"]],"~i45",[["^ ","^1@",62,"^1A",180,"^C","depth"]],"~i51",[["^ ","^1@",68,"^1A",180,"^C","current-smallest"]]],"~i138",["^ ","~i8",[["^ ","^1@",0,"^1A",182],["^ ","^1@",22,"^1A",186],["^ ","^1@",65,"^1A",186],["^ ","^1@",118,"^1A",186],["^ ","^1@",185,"^1A",186],["^ ","^1@",249,"^1A",186],["^ ","^1@",0,"^1A",187]]],"~i140",["^ ","^29",[["^ ","^1@",4,"^1A",182,"^C","head"]],"^1B",[["^ ","^1@",11,"^1A",182]],"^1C",[["^ ","^1@",11,"^1A",182,"^C","cljs.core/first"]],"^1L",[["^ ","^1@",27,"^1A",182,"^C","nodes"]]],"~i141",["^ ","^29",[["^ ","^1@",4,"^1A",183,"^C","tail"]],"^1B",[["^ ","^1@",11,"^1A",183]],"^1C",[["^ ","^1@",11,"^1A",183,"^C","cljs.core/rest"]],"^2B",[["^ ","^1@",26,"^1A",183,"^C","nodes"]]],"~i142",["^ ","^29",[["^ ","^1@",4,"^1A",184,"^C","result"]],"^1D",[["^ ","^1@",13,"^1A",184],["^ ","^1@",13,"^1A",184]],"^1H",[["^ ","^1@",100,"^1A",184]],"^1Q",[["^ ","^1@",100,"^1A",184,"^C","clojure.test.check.rose-tree/root"]],"~i41",[["^ ","^1@",134,"^1A",184,"^C","head"]]],"~i143",["^ ","^29",[["^ ","^1@",4,"^1A",185,"^C","args"]],"^1B",[["^ ","^1@",11,"^1A",185],["^ ","^1@",11,"^1A",185]],"^1L",[["^ ","^1@",94,"^1A",185]],"^1M",[["^ ","^1@",94,"^1A",185,"^C","clojure.test.check.rose-tree/root"]],"^1X",[["^ ","^1@",128,"^1A",185,"^C","head"]]],"~i144",["^ ","^29",[["^ ","^1@",4,"^1A",186,"^C","shrink-step-map"]]],"~i145",["^ ","^2M",[["^ ","^1@",242,"^1A",186,"^C","result"]]],"~i146",["^ ","^1X",[["^ ","^1@",302,"^1A",186,"^C","args"]]],"~i147",["^ ","^1F",[["^ ","^1@",0,"^1A",187]],"^29",[["^ ","^1@",20,"^1A",187]],"^2=",[["^ ","^1@",20,"^1A",187,"^C","clojure.test.check.results/passing?"]],"^1R",[["^ ","^1@",62,"^1A",187,"^C","result"]]],"~i149",["^ ","^1N",[["^ ","^1@",0,"^1A",188]]],"~i150",["^ ","^29",[["^ ","^1@",0,"^1A",188],["^ ","^1@",4,"^1A",188,"^C","G__27109"],["^ ","^1@",0,"^1A",189],["^ ","^1@",0,"^1A",189],["^ ","^1@",87,"^1A",189,"^C","G__27109"],["^ ","^1@",127,"^1A",189,"^C","G__27109"]],"^2=",[["^ ","^1@",1,"^1A",189,"^C","reporter-fn"],["^ ","^1@",45,"^1A",189,"^C","reporter-fn"],["^ ","^1@",105,"^1A",189,"^C","reporter-fn"]],"^1M",[["^ ","^1@",21,"^1A",188],["^ ","^1@",140,"^1A",188],["^ ","^1@",183,"^1A",188],["^ ","^1@",238,"^1A",188],["^ ","^1@",243,"^1A",188]],"^1O",[["^ ","^1@",21,"^1A",188,"^C","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1S",[["^ ","^1@",124,"^1A",188,"^C","shrink-step-map"]]],"~i151",["^ ","~i69",[["^ ","^1@",320,"^1A",188,"^C","current-smallest"]]],"~i152",["^ ","^29",[["^ ","^1@",0,"^1A",191]],"^1D",[["^ ","^1@",15,"^1A",191,"^C","tail"]],"^1L",[["^ ","^1@",15,"^1A",192,"^C","current-smallest"]],"~i43",[["^ ","^1@",15,"^1A",193],["^ ","^1@",38,"^1A",193]],"~i48",[["^ ","^1@",16,"^1A",193,"^C","total-nodes-visited"]],"^3G",[["^ ","^1@",15,"^1A",194,"^C","depth"]]],"~i157",["^ ","^1N",[["^ ","^1@",0,"^1A",201],["^ ","^1@",0,"^1A",202]],"^23",[["^ ","^1@",4,"^1A",201,"^C","new-smallest"]],"^1Q",[["^ ","^1@",19,"^1A",201]],"^1R",[["^ ","^1@",19,"^1A",201,"^C","clojure.test.check.rose-tree/root"]],"^24",[["^ ","^1@",53,"^1A",201,"^C","head"]]],"~i158",["^ ","^29",[["^ ","^1@",0,"^1A",202],["^ ","^1@",4,"^1A",202,"^C","G__27111"],["^ ","^1@",0,"^1A",203],["^ ","^1@",0,"^1A",203],["^ ","^1@",87,"^1A",203,"^C","G__27111"],["^ ","^1@",127,"^1A",203,"^C","G__27111"]],"^2=",[["^ ","^1@",1,"^1A",203,"^C","reporter-fn"],["^ ","^1@",45,"^1A",203,"^C","reporter-fn"],["^ ","^1@",105,"^1A",203,"^C","reporter-fn"]],"^1M",[["^ ","^1@",21,"^1A",202],["^ ","^1@",140,"^1A",202],["^ ","^1@",183,"^1A",202],["^ ","^1@",238,"^1A",202],["^ ","^1@",244,"^1A",202]],"^1O",[["^ ","^1@",21,"^1A",202,"^C","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1S",[["^ ","^1@",124,"^1A",202,"^C","shrink-step-map"]]],"~i159",["^ ","^3G",[["^ ","^1@",321,"^1A",202,"^C","new-smallest"]]],"~i160",["^ ","^29",[["^ ","^1@",0,"^1A",205],["^ ","^1@",4,"^1A",205,"^C","temp__5455__auto__"],["^ ","^1@",0,"^1A",206],["^ ","^1@",0,"^1A",206],["^ ","^1@",3,"^1A",206,"^C","temp__5455__auto__"],["^ ","^1@",0,"^1A",207],["^ ","^1@",15,"^1A",207,"^C","temp__5455__auto__"],["^ ","^1@",0,"^1A",208]],"^1I",[["^ ","^1@",4,"^1A",207,"^C","children"]],"^1R",[["^ ","^1@",25,"^1A",205]],"~i33",[["^ ","^1@",25,"^1A",205,"^C","cljs.core/seq"]],"^1X",[["^ ","^1@",39,"^1A",205]],"^2J",[["^ ","^1@",39,"^1A",205,"^C","clojure.test.check.rose-tree/children"]],"~i52",[["^ ","^1@",77,"^1A",205,"^C","head"]]],"~i161",["^ ","^2U",[["^ ","^1@",0,"^1A",208]],"^1I",[["^ ","^1@",15,"^1A",208,"^C","children"]],"^1R",[["^ ","^1@",15,"^1A",209,"^C","new-smallest"]],"^38",[["^ ","^1@",15,"^1A",210],["^ ","^1@",38,"^1A",210]],"^2;",[["^ ","^1@",16,"^1A",210,"^C","total-nodes-visited"]],"^2Q",[["^ ","^1@",15,"^1A",211],["^ ","^1@",24,"^1A",211]],"~i76",[["^ ","^1@",16,"^1A",211,"^C","depth"]]],"~i162",["^ ","^2U",[["^ ","^1@",0,"^1A",218]],"^1I",[["^ ","^1@",15,"^1A",218,"^C","tail"]],"^1O",[["^ ","^1@",15,"^1A",219,"^C","new-smallest"]],"^3>",[["^ ","^1@",15,"^1A",220],["^ ","^1@",38,"^1A",220]],"^1Y",[["^ ","^1@",16,"^1A",220,"^C","total-nodes-visited"]],"~i67",[["^ ","^1@",15,"^1A",221,"^C","depth"]]],"~i164",["^ ","~i0",[["^ ","^1@",0,"^1A",233],["^ ","^1@",29,"^1A",233],["^ ","^1@",0,"^1A",234]],"~i7",[["^ ","^1@",0,"^1A",233,"^C","clojure.test.check/failure"]]],"~i165",["^ ","~i3",[["^ ","^1@",66,"^1A",233,"^C","property"]],"^1N",[["^ ","^1@",75,"^1A",233,"^C","failing-rose-tree"]],"^1H",[["^ ","^1@",93,"^1A",233,"^C","trial-number"]],"^3I",[["^ ","^1@",106,"^1A",233,"^C","size"]],"^3J",[["^ ","^1@",111,"^1A",233,"^C","seed"]],"^2@",[["^ ","^1@",116,"^1A",233,"^C","reporter-fn"]]],"~i166",["^ ","~i2",[["^ ","^1@",0,"^1A",234],["^ ","^1@",0,"^1A",237]],"~i8",[["^ ","^1@",4,"^1A",234,"^C","root"]],"^1W",[["^ ","^1@",11,"^1A",234]],"^29",[["^ ","^1@",11,"^1A",234,"^C","clojure.test.check.rose-tree/root"]],"^1J",[["^ ","^1@",45,"^1A",234,"^C","failing-rose-tree"]]],"~i167",["^ ","~i8",[["^ ","^1@",4,"^1A",235,"^C","result"]],"^2=",[["^ ","^1@",13,"^1A",235],["^ ","^1@",13,"^1A",235]],"^1J",[["^ ","^1@",100,"^1A",235,"^C","root"]]],"~i168",["^ ","~i8",[["^ ","^1@",4,"^1A",236,"^C","failing-args"]],"^1D",[["^ ","^1@",19,"^1A",236],["^ ","^1@",19,"^1A",236]],"^1O",[["^ ","^1@",102,"^1A",236,"^C","root"]]],"~i170",["^ ","~i4",[["^ ","^1@",0,"^1A",237],["^ ","^1@",4,"^1A",237,"^C","G__27127"],["^ ","^1@",21,"^1A",237],["^ ","^1@",64,"^1A",237],["^ ","^1@",117,"^1A",237],["^ ","^1@",175,"^1A",237],["^ ","^1@",246,"^1A",237],["^ ","^1@",353,"^1A",237],["^ ","^1@",468,"^1A",237],["^ ","^1@",550,"^1A",237],["^ ","^1@",0,"^1A",238],["^ ","^1@",0,"^1A",238],["^ ","^1@",87,"^1A",238,"^C","G__27127"],["^ ","^1@",127,"^1A",238,"^C","G__27127"]],"~i5",[["^ ","^1@",1,"^1A",238,"^C","reporter-fn"],["^ ","^1@",45,"^1A",238,"^C","reporter-fn"],["^ ","^1@",105,"^1A",238,"^C","reporter-fn"]]],"~i171",["^ ","^1O",[["^ ","^1@",237,"^1A",237,"^C","property"]]],"~i172",["^ ","^1L",[["^ ","^1@",303,"^1A",237]],"^1M",[["^ ","^1@",303,"^1A",237,"^C","clojure.test.check.results/passing?"]],"^1T",[["^ ","^1@",345,"^1A",237,"^C","result"]]],"~i173",["^ ","^1Q",[["^ ","^1@",421,"^1A",237]],"^1R",[["^ ","^1@",421,"^1A",237,"^C","clojure.test.check.results/result-data"]],"^3P",[["^ ","^1@",460,"^1A",237,"^C","result"]]],"~i174",["^ ","^1R",[["^ ","^1@",537,"^1A",237,"^C","trial-number"]]],"~i175",["^ ","^1R",[["^ ","^1@",619,"^1A",237,"^C","failing-args"]]],"~i177",["^ ","~i4",[["^ ","^1@",0,"^1A",240],["^ ","^1@",0,"^1A",246],["^ ","^1@",0,"^1A",249],["^ ","^1@",50,"^1A",249],["^ ","^1@",157,"^1A",249],["^ ","^1@",272,"^1A",249],["^ ","^1@",328,"^1A",249],["^ ","^1@",402,"^1A",249],["^ ","^1@",478,"^1A",249],["^ ","^1@",559,"^1A",249]],"^1F",[["^ ","^1@",4,"^1A",240,"^C","shrunk"]],"^1?",[["^ ","^1@",13,"^1A",240],["^ ","^1@",62,"^1A",240],["^ ","^1@",18,"^1A",241,"^C","p1__27126#"],["^ ","^1@",0,"^1A",242]],"^23",[["^ ","^1@",13,"^1A",240,"^C","clojure.test.check/shrink-loop"]],"^1H",[["^ ","^1@",44,"^1A",240,"^C","failing-rose-tree"]]],"~i178",["^ ","^1Q",[["^ ","^1@",0,"^1A",242],["^ ","^1@",4,"^1A",242,"^C","G__27130"],["^ ","^1@",0,"^1A",243],["^ ","^1@",0,"^1A",243],["^ ","^1@",94,"^1A",243,"^C","G__27130"],["^ ","^1@",128,"^1A",243,"^C","G__27130"]],"^1R",[["^ ","^1@",8,"^1A",243,"^C","reporter-fn"],["^ ","^1@",52,"^1A",243,"^C","reporter-fn"],["^ ","^1@",106,"^1A",243,"^C","reporter-fn"]],"^1T",[["^ ","^1@",15,"^1A",242],["^ ","^1@",61,"^1A",242,"^C","p1__27126#"],["^ ","^1@",78,"^1A",242]],"^38",[["^ ","^1@",15,"^1A",242,"^C","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"~i63",[["^ ","^1@",140,"^1A",242,"^C","property"]]],"~i179",["^ ","~i6",[["^ ","^1@",0,"^1A",246],["^ ","^1@",4,"^1A",246,"^C","G__27131"],["^ ","^1@",21,"^1A",246],["^ ","^1@",64,"^1A",246],["^ ","^1@",117,"^1A",246],["^ ","^1@",175,"^1A",246],["^ ","^1@",246,"^1A",246],["^ ","^1@",328,"^1A",246],["^ ","^1@",410,"^1A",246],["^ ","^1@",0,"^1A",247],["^ ","^1@",0,"^1A",247],["^ ","^1@",87,"^1A",247,"^C","G__27131"],["^ ","^1@",127,"^1A",247,"^C","G__27131"]],"~i7",[["^ ","^1@",1,"^1A",247,"^C","reporter-fn"],["^ ","^1@",45,"^1A",247,"^C","reporter-fn"],["^ ","^1@",105,"^1A",247,"^C","reporter-fn"]]],"~i180",["^ ","^1H",[["^ ","^1@",237,"^1A",246,"^C","property"]]],"~i181",["^ ","^1S",[["^ ","^1@",315,"^1A",246,"^C","trial-number"]]],"~i182",["^ ","^1S",[["^ ","^1@",397,"^1A",246,"^C","failing-args"]]],"~i183",["^ ","^1O",[["^ ","^1@",468,"^1A",246,"^C","shrunk"]]],"~i184",["^ ","^2=",[["^ ","^1@",107,"^1A",249]],"^2U",[["^ ","^1@",107,"^1A",249,"^C","clojure.test.check.results/passing?"]],"^3O",[["^ ","^1@",149,"^1A",249,"^C","result"]]],"~i185",["^ ","^1C",[["^ ","^1@",225,"^1A",249]],"^1D",[["^ ","^1@",225,"^1A",249,"^C","clojure.test.check.results/result-data"]],"^3>",[["^ ","^1@",264,"^1A",249,"^C","result"]]],"~i186",["^ ","^1W",[["^ ","^1@",323,"^1A",249,"^C","seed"]]],"~i187",["^ ","^1D",[["^ ","^1@",397,"^1A",249,"^C","size"]]],"~i188",["^ ","^23",[["^ ","^1@",465,"^1A",249,"^C","trial-number"]]],"~i189",["^ ","^1W",[["^ ","^1@",531,"^1A",249]],"^29",[["^ ","^1@",531,"^1A",249,"^C","cljs.core/vec"]],"^23",[["^ ","^1@",545,"^1A",249,"^C","failing-args"]]],"~i190",["^ ","^2=",[["^ ","^1@",617,"^1A",249,"^C","shrunk"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1534380137000],["^17","goog/math/math.js"],[1530991559994,"^P","~$goog.array","~$goog.asserts"],["^17","goog/array/array.js"],[1530991559994,"^P","^4H"],["^17","clojure/test/check/generators.cljc"],[1535586405418,"^P","^N","^R","^K","~$goog.string","~$clojure.string"],["^17","goog/debug/error.js"],[1530991559994,"^P"],["^17","clojure/test/check/random/doubles.cljs"],[1535586405418,"^P","^N","~$clojure.test.check.random.longs"],["^17","goog/dom/nodetype.js"],[1530991559994,"^P"],["^17","clojure/test/check/rose_tree.cljc"],[1535586405418,"^P","^N"],["^17","clojure/test/check/impl.cljc"],[1535586405418,"^P","^N"],["^17","clojure/test/check/random.cljs"],[1535586405418,"^P","^N","~$clojure.test.check.random.doubles","^4K"],["^17","goog/object/object.js"],[1530991559994,"^P"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^17","goog/math/long.js"],[1530991559994,"^P","^4H","~$goog.reflect"],["^17","clojure/test/check.cljc"],[1535586405418,"^P","^N","^O","^R","^I","^K","^M"],["^17","goog/functions/functions.js"],[1530991559994,"^P"],["^17","goog/structs/map.js"],[1530991559994,"^P","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^17","goog/asserts/asserts.js"],[1530991559994,"^P","~$goog.debug.Error","~$goog.dom.NodeType","^4I"],["^17","goog/uri/uri.js"],[1530991559994,"^P","^4G","^4H","^4I","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^17","goog/base.js"],[1530991559994],["^17","goog/structs/structs.js"],[1530991559994,"^P","^4G","^4Q"],["^17","clojure/string.cljs"],[1534380137690,"^P","^N","^4I","~$goog.string.StringBuffer"],["^17","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^P","^N"],["^17","goog/string/string.js"],[1530991559994,"^P"],["^17","goog/reflect/reflect.js"],[1530991559994,"^P"],["^17","goog/string/stringbuffer.js"],[1530991559994,"^P"],["^17","goog/iter/iter.js"],[1530991559994,"^P","^4G","^4H","~$goog.functions","~$goog.math"],["^17","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^4I","^4Q","^4G","~$goog.Uri","^4Y"],["^17","clojure/test/check/random/longs.cljs"],[1535586405418,"^P","^N","~$clojure.test.check.random.longs.bit-count-impl","^50"],["^17","goog/math/integer.js"],[1530991559994,"^P"],["^17","goog/uri/utils.js"],[1530991559994,"^P","^4G","^4H","^4I"],["^17","clojure/test/check/results.cljc"],[1535586405418,"^P","^N"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check.cljc","^7",10,"^8",5,"^9",10,"^:",23],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^K","^L","^I","^M","^M","^K","^K","^N","^N","^O","^O","^P","^P","^Q","^O","^R","^R","^S","^R"],"^T",["^B",["^U"]],"^V",["^ ","^W","^M","^X","^M"],"~:defs",["^ ","~$shrink-loop",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",117,"^8",8,"^9",117,"^:",19,"~:private",true,"~:arglists",["^[",["~$quote",["^[",[["~$rose-tree","~$reporter-fn"]]]]],"~:doc","Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step."],"^58",true,"^C","~$clojure.test.check/shrink-loop","~:variadic",false,"^6","clojure/test/check.cljc","^:",19,"~:method-params",["^[",[["^5;","^5<"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^8",1,"^7",117,"^9",117,"~:max-fixed-arity",2,"~:fn-var",true,"^59",["^[",["^5:",["^[",[["^5;","^5<"]]]]],"^5=","Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step."],"~$failure",["^ ","^57",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",165,"^8",8,"^9",165,"^:",15,"^58",true,"^59",["^[",["^5:",["^[",[["~$property","~$failing-rose-tree","~$trial-number","~$size","~$seed","^5<"]]]]]],"^58",true,"^C","~$clojure.test.check/failure","^5?",false,"^6","clojure/test/check.cljc","^:",15,"^5@",["^[",[["^5F","^5G","^5H","^5I","^5J","^5<"]]],"^5A",null,"^5B",["^[",[null,null]],"^8",1,"^7",165,"^9",165,"^5C",6,"^5D",true,"^59",["^[",["^5:",["^[",[["^5F","^5G","^5H","^5I","^5J","^5<"]]]]]],"~$make-rng",["^ ","^57",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",20,"^8",8,"^9",20,"^:",16,"^58",true,"^59",["^[",["^5:",["^[",[["^5J"]]]]]],"^58",true,"^C","~$clojure.test.check/make-rng","^5?",false,"^6","clojure/test/check.cljc","^:",16,"^5@",["^[",[["^5J"]]],"^5A",null,"^5B",["^[",[null,null]],"^8",1,"^7",20,"^9",20,"^5C",1,"^5D",true,"^59",["^[",["^5:",["^[",[["^5J"]]]]]],"~$complete",["^ ","^57",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",27,"^8",8,"^9",27,"^:",16,"^58",true,"^59",["^[",["^5:",["^[",[["^5F","~$num-trials","^5J","^5<"]]]]]],"^58",true,"^C","~$clojure.test.check/complete","^5?",false,"^6","clojure/test/check.cljc","^:",16,"^5@",["^[",[["^5F","^5O","^5J","^5<"]]],"^5A",null,"^5B",["^[",[null,null]],"^8",1,"^7",27,"^9",27,"^5C",4,"^5D",true,"^59",["^[",["^5:",["^[",[["^5F","^5O","^5J","^5<"]]]]]],"~$quick-check",["^ ","^57",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",37,"^8",7,"^9",37,"^:",18,"^59",["^[",["^5:",["^[",[["~$num-tests","^5F","~$&",["^ ","~:keys",["^5J","~$max-size","^5<"],"~:or",["^ ","^5T",200,"^5<",["^[",["~$constantly",null]]]]]]]]],"^5=","Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \"Uh oh...\"))))","~:top-fn",["^ ","^5?",true,"^5C",2,"^5@",[["^[",["^5R","^5F",["^ ","^5S",["^5J","^5T","^5<"],"^5U",["^ ","^5T",200,"^5<",["^[",["^5V",null]]]]]]],"^59",["^[",[["^5R","^5F","~$&",["^ ","^5S",["^5J","^5T","^5<"],"^5U",["^ ","^5T",200,"^5<",["^[",["^5V",null]]]]]]],"^5B",["^[",[null]]]],"^C","~$clojure.test.check/quick-check","^5?",true,"^6","clojure/test/check.cljc","^:",18,"^5W",["^ ","^5?",true,"^5C",2,"^5@",[["^[",["^5R","^5F",["^ ","^5S",["^5J","^5T","^5<"],"^5U",["^ ","^5T",200,"^5<",["^[",["^5V",null]]]]]]],"^59",["^[",[["^5R","^5F","~$&",["^ ","^5S",["^5J","^5T","^5<"],"^5U",["^ ","^5T",200,"^5<",["^[",["^5V",null]]]]]]],"^5B",["^[",[null]]],"^5@",[["^[",["^5R","^5F",["^ ","^5S",["^5J","^5T","^5<"],"^5U",["^ ","^5T",200,"^5<",["^[",["^5V",null]]]]]]],"^5A",null,"^5B",["^[",[null]],"^8",1,"^7",37,"^9",37,"^5C",2,"^5D",true,"^59",["^[",[["^5R","^5F","~$&",["^ ","^5S",["^5J","^5T","^5<"],"^5U",["^ ","^5T",200,"^5<",["^[",["^5V",null]]]]]]],"^5=","Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \"Uh oh...\"))))"],"~$smallest-shrink",["^ ","^57",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",108,"^8",8,"^9",108,"^:",23,"^58",true,"^59",["^[",["^5:",["^[",[["~$total-nodes-visited","~$depth","~$smallest"]]]]]],"^58",true,"^C","~$clojure.test.check/smallest-shrink","^5?",false,"^6","clojure/test/check.cljc","^:",23,"^5@",["^[",[["^5Z","^5[","^60"]]],"^5A",null,"^5B",["^[",[null,null]],"^8",1,"^7",108,"^9",108,"^5C",3,"^5D",true,"^59",["^[",["^5:",["^[",[["^5Z","^5[","^60"]]]]]]],"^Y",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^T",["^B",["~:args","~:shrunk","~:total-nodes-visited","~:failure","~:property","~:shrink-step","~:num-tests","~:type","~:max-size","~:seed","~:trial-number","~:fail","~:result","~:result-data","~:smallest","~:trial","~:failing-size","~:reporter-fn","~:pass?","~:depth","~:complete","~:current-smallest","~:failing-args","~:so-far"]],"~:order",["^6:","^67","^6?","^69","^6<","^6G","^6;","^6D","^63","^6J","^6B","^65","^6F","^6@","^6A","^68","^6E","^6H","^6=","^6I","^66","^64","^6C","^6>"]],"^13",["^ ","^U",["^B",[]]],"^14",["^ "],"^15",["^P","^N","^O","^R","^I","^K","^M"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^4E",[["^6N","~:static-fns"],true,["^6N","~:elide-asserts"],false,["^6N","~:optimize-constants"],null,["^6N","~:external-config"],null,["^6N","~:tooling-config"],null,["^6N","~:emit-constants"],null,["^6N","~:infer-externs"],true,["^6N","^1<"],null,["~:js-options","~:js-provider"],"^U",["~:mode"],"~:dev",["^6N","~:fn-invoke-direct"],null,["^6N","^1>"],"/dev/null"]]]