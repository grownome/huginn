["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.longs.bit_count_impl');\ngoog.require('goog.math.Long');\nclojure.test.check.random.longs.unsigned_bit_shift_right = (function clojure$test$check$random$longs$unsigned_bit_shift_right(x,n){\nreturn x.shiftRightUnsigned(n);\n});\nclojure.test.check.random.longs._PLUS_ = (function clojure$test$check$random$longs$_PLUS_(x,y){\nreturn x.add(y);\n});\nclojure.test.check.random.longs._STAR_ = (function clojure$test$check$random$longs$_STAR_(x,y){\nreturn x.multiply(y);\n});\nclojure.test.check.random.longs.bit_xor = (function clojure$test$check$random$longs$bit_xor(x,y){\nreturn x.xor(y);\n});\nclojure.test.check.random.longs.bit_or = (function clojure$test$check$random$longs$bit_or(x,y){\nreturn x.or(y);\n});\nclojure.test.check.random.longs.from_string = (function clojure$test$check$random$longs$from_string(s,radix){\nreturn goog.math.Long.fromString(s,radix);\n});\nclojure.test.check.random.longs.from_number = (function clojure$test$check$random$longs$from_number(x){\nreturn goog.math.Long.fromNumber(x);\n});\n/**\n * Coerces to long, or returns nil if not possible.\n */\nclojure.test.check.random.longs.__GT_long = (function clojure$test$check$random$longs$__GT_long(x){\nif(typeof x === 'number'){\nreturn goog.math.Long.fromNumber(x);\n} else {\nif((x instanceof goog.math.Long)){\nreturn x;\n} else {\nreturn null;\n}\n}\n});\nclojure.test.check.random.longs.ONE = goog.math.Long.getOne();\nclojure.test.check.random.longs.bit_count = clojure.test.check.random.longs.bit_count_impl.bit_count;\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",33,"~:author","Gary Fredericks","~:doc","Internal namespace, wrapping some goog.math.Long functionality."],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random.longs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.longs.bit-count-impl","^O","^E","^O","~$goog.math.Long","^P","~$long","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^D",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^J",["^Y",["~:refer-clojure","~:exclude",["~$+","~$*","^F","^H","^E","^G"]]],["^Y",["^U",["^O","~:as","^E"],["^P","^11","^Q"]]]]],"~:flags",["^ ","^U",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^O","^P"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs.cljs"],"~:compiled-at",1540144999623,"~:resource-name","clojure/test/check/random/longs.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Internal namespace, wrapping some goog.math.Long functionality.\"}\n clojure.test.check.random.longs\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.longs.bit-count-impl :as bit-count]\n            [goog.math.Long :as long]))\n\n(defn unsigned-bit-shift-right\n  [x n]\n  (.shiftRightUnsigned x n))\n\n(defn +\n  [x y]\n  (.add x y))\n\n(defn *\n  [x y]\n  (.multiply x y))\n\n(defn bit-xor\n  [x y]\n  (.xor x y))\n\n(defn bit-or\n  [x y]\n  (.or x y))\n\n(defn from-string\n  [s radix]\n  (long/fromString s radix))\n\n(defn from-number\n  [x]\n  (long/fromNumber x))\n\n(defn ->long\n  \"Coerces to long, or returns nil if not possible.\"\n  [x]\n  (cond (number? x)\n        (long/fromNumber x)\n\n        (instance? goog.math.Long x)\n        x))\n\n(def ONE (long/getOne))\n\n(def bit-count bit-count/bit-count)\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;;AAiBA,2DAAA,3DAAMA,8HACHC,EAAEC;AADL,AAEE,OAAqBD,qBAAEC;;AAEzB,yCAAA,zCAAMC,0FACHF,EAAEG;AADL,AAEE,OAAMH,MAAEG;;AAEV,yCAAA,zCAAMC,0FACHJ,EAAEG;AADL,AAEE,OAAWH,WAAEG;;AAEf,0CAAA,1CAAME,4FACHL,EAAEG;AADL,AAEE,OAAMH,MAAEG;;AAEV,yCAAA,zCAAMG,0FACHN,EAAEG;AADL,AAEE,OAAKH,KAAEG;;AAET,8CAAA,9CAAMI,oGACHC,EAAEC;AADL,AAEE,OAACC,0BAAgBF,EAAEC;;AAErB,8CAAA,9CAAME,oGACHX;AADH,AAEE,OAACY,0BAAgBZ;;AAEnB;;;4CAAA,5CAAMa,gGAEHb;AAFH,AAGE,GAAM,OAASA;AACT,OAACY,0BAAgBZ;;AADvB,GAGM,cAAWc,bAAed;AAC1BA;;AAJN;;;;AAMF,AAAKe,sCAAI,AAACC;AAEV,AAAKC,4CAAUC","names",["clojure.test.check.random.longs/unsigned-bit-shift-right","x","n","clojure.test.check.random.longs/+","y","clojure.test.check.random.longs/*","clojure.test.check.random.longs/bit-xor","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/from-string","s","radix","goog.math.Long/fromString","clojure.test.check.random.longs/from-number","goog.math.Long/fromNumber","clojure.test.check.random.longs/->long","goog/math.Long","clojure.test.check.random.longs/ONE","goog.math.Long/getOne","clojure.test.check.random.longs/bit-count","clojure.test.check.random.longs.bit-count-impl/bit-count"]]],"~:cache-keys",["~#cmap",[["~:macro","^R"],[1534380137000],["^16","goog/math/math.js"],[1530991559994,"^S","~$goog.array","~$goog.asserts"],["^16","goog/array/array.js"],[1530991559994,"^S","^1E"],["^16","goog/debug/error.js"],[1530991559994,"^S"],["^16","goog/dom/nodetype.js"],[1530991559994,"^S"],["^16","goog/object/object.js"],[1530991559994,"^S"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^16","goog/math/long.js"],[1530991559994,"^S","^1E","~$goog.reflect"],["^16","goog/functions/functions.js"],[1530991559994,"^S"],["^16","goog/structs/map.js"],[1530991559994,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^16","goog/asserts/asserts.js"],[1530991559994,"^S","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^16","goog/uri/uri.js"],[1530991559994,"^S","^1D","^1E","^1M","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^16","goog/base.js"],[1530991559994],["^16","goog/structs/structs.js"],[1530991559994,"^S","^1D","^1J"],["^16","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^S","^R"],["^16","goog/string/string.js"],[1530991559994,"^S"],["^16","goog/reflect/reflect.js"],[1530991559994,"^S"],["^16","goog/string/stringbuffer.js"],[1530991559994,"^S"],["^16","goog/iter/iter.js"],[1530991559994,"^S","^1D","^1E","~$goog.functions","~$goog.math"],["^16","cljs/core.cljs"],[1534380137690,"^P","~$goog.math.Integer","^1M","^1J","^1D","~$goog.Uri","~$goog.string.StringBuffer"],["^16","clojure/test/check/random/longs.cljs"],[1535586405418,"^S","^R","^O","^P"],["^16","goog/math/integer.js"],[1530991559994,"^S"],["^16","goog/uri/utils.js"],[1530991559994,"^S","^1D","^1E","^1M"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",12,"^8",2,"^9",12,"^:",33,"^;","Gary Fredericks","^<","Internal namespace, wrapping some goog.math.Long functionality."],"^=",["^ ","^>","^?","^@","^A"],"^B",null,"^C",["^D",["^E","^F","^G","~$*","^H","~$+"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^E","^O","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^D",["^U"]],"^V",null,"~:defs",["^ ","~$from-number",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",42,"^8",7,"^9",42,"^:",18,"~:arglists",["^Y",["~$quote",["^Y",[["~$x"]]]]]],"^I","~$clojure.test.check.random.longs/from-number","~:variadic",false,"^6","clojure/test/check/random/longs.cljs","^:",18,"~:method-params",["^Y",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^8",1,"^7",42,"^9",42,"~:max-fixed-arity",1,"~:fn-var",true,"^20",["^Y",["^21",["^Y",[["~$x"]]]]]],"^E",["^ ","^I","~$clojure.test.check.random.longs/bit-count","^6","clojure/test/check/random/longs.cljs","^7",57,"^8",1,"^9",57,"^:",15,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",57,"^8",6,"^9",57,"^:",15]],"^F",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",30,"^8",7,"^9",30,"^:",14,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"^I","~$clojure.test.check.random.longs/bit-xor","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",14,"^24",["^Y",[["~$x","~$y"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",30,"^9",30,"^27",2,"^28",true,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"^G",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",18,"^8",7,"^9",18,"^:",31,"^20",["^Y",["^21",["^Y",[["~$x","~$n"]]]]]],"^I","~$clojure.test.check.random.longs/unsigned-bit-shift-right","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",31,"^24",["^Y",[["~$x","~$n"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",18,"^9",18,"^27",2,"^28",true,"^20",["^Y",["^21",["^Y",[["~$x","~$n"]]]]]],"~$*",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",26,"^8",7,"^9",26,"^:",8,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"^I","~$clojure.test.check.random.longs/*","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",8,"^24",["^Y",[["~$x","~$y"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",26,"^9",26,"^27",2,"^28",true,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"~$from-string",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",38,"^8",7,"^9",38,"^:",18,"^20",["^Y",["^21",["^Y",[["~$s","~$radix"]]]]]],"^I","~$clojure.test.check.random.longs/from-string","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",18,"^24",["^Y",[["~$s","^2>"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",38,"^9",38,"^27",2,"^28",true,"^20",["^Y",["^21",["^Y",[["~$s","^2>"]]]]]],"~$->long",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",46,"^8",7,"^9",46,"^:",13,"^20",["^Y",["^21",["^Y",[["~$x"]]]]],"^<","Coerces to long, or returns nil if not possible."],"^I","~$clojure.test.check.random.longs/->long","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",13,"^24",["^Y",[["~$x"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",46,"^9",46,"^27",1,"^28",true,"^20",["^Y",["^21",["^Y",[["~$x"]]]]],"^<","Coerces to long, or returns nil if not possible."],"^H",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",34,"^8",7,"^9",34,"^:",13,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"^I","~$clojure.test.check.random.longs/bit-or","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",13,"^24",["^Y",[["~$x","~$y"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",34,"^9",34,"^27",2,"^28",true,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"~$ONE",["^ ","^I","~$clojure.test.check.random.longs/ONE","^6","clojure/test/check/random/longs.cljs","^7",55,"^8",1,"^9",55,"^:",9,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",55,"^8",6,"^9",55,"^:",9],"~:tag","~$any"],"~$+",["^ ","^1[",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",22,"^8",7,"^9",22,"^:",8,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]],"^I","~$clojure.test.check.random.longs/+","^23",false,"^6","clojure/test/check/random/longs.cljs","^:",8,"^24",["^Y",[["~$x","~$y"]]],"^25",null,"^26",["^Y",[null,null]],"^8",1,"^7",22,"^9",22,"^27",2,"^28",true,"^20",["^Y",["^21",["^Y",[["~$x","~$y"]]]]]]],"^W",["^ ","^R","^R"],"^12",["^ ","^U",["^D",[]]],"^13",["^ "],"^14",["^S","^R","^O","^P"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1B",[["^2J","~:static-fns"],true,["^2J","~:elide-asserts"],false,["^2J","~:optimize-constants"],null,["^2J","~:external-config"],null,["^2J","~:tooling-config"],null,["^2J","~:emit-constants"],null,["^2J","~:infer-externs"],true,["^2J","^1;"],null,["~:js-options","~:js-provider"],"^U",["~:mode"],"~:dev",["^2J","~:fn-invoke-direct"],null,["^2J","~:source-map"],"/dev/null"]]]