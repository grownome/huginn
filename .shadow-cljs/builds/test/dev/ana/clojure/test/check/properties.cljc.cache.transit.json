["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.properties');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.generators');\ngoog.require('clojure.test.check.results');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {clojure.test.check.results.Result}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.test.check.properties.ErrorResult = (function (error,__meta,__extmap,__hash){\nthis.error = error;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2229667594;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4203__auto__,k__4204__auto__){\nvar self__ = this;\nvar this__4203__auto____$1 = this;\nreturn this__4203__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4204__auto__,null);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4205__auto__,k28500,else__4206__auto__){\nvar self__ = this;\nvar this__4205__auto____$1 = this;\nvar G__28504 = k28500;\nvar G__28504__$1 = (((G__28504 instanceof cljs.core.Keyword))?G__28504.fqn:null);\nswitch (G__28504__$1) {\ncase \"error\":\nreturn self__.error;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k28500,else__4206__auto__);\n\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4217__auto__,writer__4218__auto__,opts__4219__auto__){\nvar self__ = this;\nvar this__4217__auto____$1 = this;\nvar pr_pair__4220__auto__ = ((function (this__4217__auto____$1){\nreturn (function (keyval__4221__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4218__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4219__auto__,keyval__4221__auto__);\n});})(this__4217__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4218__auto__,pr_pair__4220__auto__,\"#clojure.test.check.properties.ErrorResult{\",\", \",\"}\",opts__4219__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"error\",\"error\",-978969032),self__.error],null))], null),self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__28499){\nvar self__ = this;\nvar G__28499__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__28499__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4201__auto__){\nvar self__ = this;\nvar this__4201__auto____$1 = this;\nreturn self__.__meta;\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4198__auto__){\nvar self__ = this;\nvar this__4198__auto____$1 = this;\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4207__auto__){\nvar self__ = this;\nvar this__4207__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4199__auto__){\nvar self__ = this;\nvar this__4199__auto____$1 = this;\nvar h__4061__auto__ = self__.__hash;\nif(!((h__4061__auto__ == null))){\nreturn h__4061__auto__;\n} else {\nvar h__4061__auto____$1 = (function (){var fexpr__28515 = ((function (h__4061__auto__,this__4199__auto____$1){\nreturn (function (coll__4200__auto__){\nreturn (-12654282 ^ cljs.core.hash_unordered_coll(coll__4200__auto__));\n});})(h__4061__auto__,this__4199__auto____$1))\n;\nreturn fexpr__28515(this__4199__auto____$1);\n})();\nself__.__hash = h__4061__auto____$1;\n\nreturn h__4061__auto____$1;\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$passing_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn false;\n});\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$result_data$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"clojure.test.check.properties\",\"error\",\"clojure.test.check.properties/error\",483933635),self__.error], null);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this28501,other28502){\nvar self__ = this;\nvar this28501__$1 = this;\nreturn ((!((other28502 == null))) && ((this28501__$1.constructor === other28502.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this28501__$1.error,other28502.error)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this28501__$1.__extmap,other28502.__extmap)));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4212__auto__,k__4213__auto__){\nvar self__ = this;\nvar this__4212__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null], null), null),k__4213__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4212__auto____$1),self__.__meta),k__4213__auto__);\n} else {\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4213__auto__)),null));\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4210__auto__,k__4211__auto__,G__28499){\nvar self__ = this;\nvar this__4210__auto____$1 = this;\nvar pred__28526 = cljs.core.keyword_identical_QMARK_;\nvar expr__28527 = k__4211__auto__;\nif(cljs.core.truth_((function (){var G__28529 = new cljs.core.Keyword(null,\"error\",\"error\",-978969032);\nvar G__28530 = expr__28527;\nreturn (pred__28526.cljs$core$IFn$_invoke$arity$2 ? pred__28526.cljs$core$IFn$_invoke$arity$2(G__28529,G__28530) : pred__28526.call(null,G__28529,G__28530));\n})())){\nreturn (new clojure.test.check.properties.ErrorResult(G__28499,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4211__auto__,G__28499),null));\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4215__auto__){\nvar self__ = this;\nvar this__4215__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),self__.error,null))], null),self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4202__auto__,G__28499){\nvar self__ = this;\nvar this__4202__auto____$1 = this;\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,G__28499,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4208__auto__,entry__4209__auto__){\nvar self__ = this;\nvar this__4208__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4209__auto__)){\nreturn this__4208__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4209__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4209__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4208__auto____$1,entry__4209__auto__);\n}\n});\n\nclojure.test.check.properties.ErrorResult.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"error\",\"error\",661562495,null)], null);\n});\n\nclojure.test.check.properties.ErrorResult.cljs$lang$type = true;\n\nclojure.test.check.properties.ErrorResult.cljs$lang$ctorPrSeq = (function (this__4240__auto__){\nreturn (new cljs.core.List(null,\"clojure.test.check.properties/ErrorResult\",null,(1),null));\n});\n\nclojure.test.check.properties.ErrorResult.cljs$lang$ctorPrWriter = (function (this__4240__auto__,writer__4241__auto__){\nreturn cljs.core._write(writer__4241__auto__,\"clojure.test.check.properties/ErrorResult\");\n});\n\n/**\n * Positional factory function for clojure.test.check.properties/ErrorResult.\n */\nclojure.test.check.properties.__GT_ErrorResult = (function clojure$test$check$properties$__GT_ErrorResult(error){\nreturn (new clojure.test.check.properties.ErrorResult(error,null,null,null));\n});\n\n/**\n * Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values.\n */\nclojure.test.check.properties.map__GT_ErrorResult = (function clojure$test$check$properties$map__GT_ErrorResult(G__28503){\nvar extmap__4236__auto__ = (function (){var G__28537 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__28503,new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nif(cljs.core.record_QMARK_(G__28503)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__28537);\n} else {\nreturn G__28537;\n}\n})();\nreturn (new clojure.test.check.properties.ErrorResult(new cljs.core.Keyword(null,\"error\",\"error\",-978969032).cljs$core$IFn$_invoke$arity$1(G__28503),null,cljs.core.not_empty(extmap__4236__auto__),null));\n});\n\nclojure.test.check.properties.exception_QMARK_ = (function clojure$test$check$properties$exception_QMARK_(x){\nreturn (x instanceof Error);\n});\nclojure.test.check.properties.apply_gen = (function clojure$test$check$properties$apply_gen(function$){\nreturn (function (args){\nvar result = (function (){try{var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(function$,args);\nif(cljs.core.truth_(clojure.test.check.properties.exception_QMARK_(ret))){\nthrow ret;\n} else {\nreturn ret;\n}\n}catch (e28541){var ex = e28541;\nreturn clojure.test.check.properties.__GT_ErrorResult(ex);\n}})();\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),args], null);\n});\n});\n/**\n * Creates a property (properties are also generators). A property\n *   is a generator that generates the result of applying the function\n *   under test with the realized arguments. Once realized, the arguments\n *   will be applied to `function` with `apply`.\n * \n *   Example:\n * \n *   (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n *   \n */\nclojure.test.check.properties.for_all_STAR_ = (function clojure$test$check$properties$for_all_STAR_(args,function$){\nreturn clojure.test.check.generators.fmap(clojure.test.check.properties.apply_gen(function$),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.tuple,args));\n});\nclojure.test.check.properties.binding_vars = (function clojure$test$check$properties$binding_vars(bindings){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bindings));\n});\nclojure.test.check.properties.binding_gens = (function clojure$test$check$properties$binding_gens(bindings){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.second,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bindings));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/properties.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",34],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.properties","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.generators","^I","~$gen","^I","~$clojure.test.check.results","^K","~$results","^K","~$cljs.core","^M","~$goog","^N"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^M","^M"],"~:form",["~#list",["~$ns","^D",["^T",["^P",["^I","~:as","^J"],["^K","^V","^L"]]]]],"~:flags",["^ ","^P",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^N","^M","^I","^K"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/properties.cljc"],"~:compiled-at",1540145000107,"~:resource-name","clojure/test/check/properties.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check.properties\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.results :as results]))\n\n(defrecord ErrorResult [error]\n  results/Result\n  (passing? [_] false)\n  (result-data [_]\n    ;; spelling out the whole keyword here since `::error` is\n    ;; different in self-hosted cljs.\n    {:clojure.test.check.properties/error error}))\n\n(defn ^:private exception?\n  [x]\n  (instance? #?(:clj Throwable :cljs js/Error) x))\n\n(defn ^:private apply-gen\n  [function]\n  (fn [args]\n    (let [result (try\n                   (let [ret (apply function args)]\n                     ;; TCHECK-131: for backwards compatibility (mainly\n                     ;; for spec), treat returned exceptions like thrown\n                     ;; exceptions\n                     (if (exception? ret)\n                       (throw ret)\n                       ret))\n                   #?(:clj (catch java.lang.ThreadDeath t (throw t)))\n                   (catch #?(:clj Throwable :cljs :default) ex\n                     (->ErrorResult ex)))]\n      {:result result\n       :function function\n       :args args})))\n\n(defn for-all*\n  \"Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  \"\n  [args function]\n  (gen/fmap\n   (apply-gen function)\n   (apply gen/tuple args)))\n\n(defn- binding-vars\n  [bindings]\n  (map first (partition 2 bindings)))\n\n(defn- binding-gens\n  [bindings]\n  (map second (partition 2 bindings)))\n\n(defmacro for-all\n  \"Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  \"\n  [bindings & body]\n  `(for-all* ~(vec (binding-gens bindings))\n             (fn [~@(binding-vars bindings)]\n               ~@body)))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["this__4203__auto__","k__4204__auto__","this__4205__auto__","k28500","else__4206__auto__","G__28504","cljs.core/Keyword","error","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4217__auto__","writer__4218__auto__","opts__4219__auto__","pr-pair__4220__auto__","keyval__4221__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__28499","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4201__auto__","__meta","this__4198__auto__","__hash","this__4207__auto__","cljs.core/count","this__4199__auto__","h__4061__auto__","fexpr__28515","coll__4200__auto__","cljs.core/hash-unordered-coll","cljs.core/PROTOCOL_SENTINEL","this28501","other28502","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4212__auto__","k__4213__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4210__auto__","k__4211__auto__","pred__28526","cljs.core/keyword-identical?","expr__28527","G__28529","G__28530","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4215__auto__","cljs.core/seq","cljs/core.MapEntry","this__4202__auto__","this__4208__auto__","entry__4209__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","clojure.test.check.properties/ErrorResult","this__4240__auto__","cljs.core/List","writer__4241__auto__","cljs.core/-write","G__28503","extmap__4236__auto__","G__28537","cljs.core/record?","clojure.test.check.properties/->ErrorResult","clojure.test.check.properties/map->ErrorResult","_","clojure.test.check.properties/exception?","x","js/Error","clojure.test.check.properties/apply-gen","function","args","result","e28541","ret","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","ex","clojure.test.check.properties/for-all*","clojure.test.check.generators/fmap","clojure.test.check.generators/tuple","clojure.test.check.properties/binding-vars","bindings","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","clojure.test.check.properties/binding-gens","cljs.core/second"]]],"~:cache-keys",["~#cmap",[["~:macro","^M"],[1534380137000],["^[","goog/math/math.js"],[1530991559994,"^N","~$goog.array","~$goog.asserts"],["^[","goog/array/array.js"],[1530991559994,"^N","^1>"],["^[","clojure/test/check/properties.cljc"],[1535586405418,"^N","^M","^I","^K"],["^[","clojure/test/check/generators.cljc"],[1535586405418,"^N","^M","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$goog.string","~$clojure.string"],["^[","goog/debug/error.js"],[1530991559994,"^N"],["^[","clojure/test/check/random/doubles.cljs"],[1535586405418,"^N","^M","~$clojure.test.check.random.longs"],["^[","goog/dom/nodetype.js"],[1530991559994,"^N"],["^[","clojure/test/check/rose_tree.cljc"],[1535586405418,"^N","^M"],["^[","clojure/test/check/random.cljs"],[1535586405418,"^N","^M","~$clojure.test.check.random.doubles","^1C"],["^[","goog/object/object.js"],[1530991559994,"^N"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^[","goog/math/long.js"],[1530991559994,"^N","^1>","~$goog.reflect"],["^[","goog/functions/functions.js"],[1530991559994,"^N"],["^[","goog/structs/map.js"],[1530991559994,"^N","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^[","goog/asserts/asserts.js"],[1530991559994,"^N","~$goog.debug.Error","~$goog.dom.NodeType","^1A"],["^[","goog/uri/uri.js"],[1530991559994,"^N","^1=","^1>","^1A","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^[","goog/base.js"],[1530991559994],["^[","goog/structs/structs.js"],[1530991559994,"^N","^1=","^1I"],["^[","clojure/string.cljs"],[1534380137690,"^N","^M","^1A","~$goog.string.StringBuffer"],["^[","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^N","^M"],["^[","goog/string/string.js"],[1530991559994,"^N"],["^[","goog/reflect/reflect.js"],[1530991559994,"^N"],["^[","goog/string/stringbuffer.js"],[1530991559994,"^N"],["^[","goog/iter/iter.js"],[1530991559994,"^N","^1=","^1>","~$goog.functions","~$goog.math"],["^[","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1A","^1I","^1=","~$goog.Uri","^1Q"],["^[","clojure/test/check/random/longs.cljs"],[1535586405418,"^N","^M","~$clojure.test.check.random.longs.bit-count-impl","^1T"],["^[","goog/math/integer.js"],[1530991559994,"^N"],["^[","goog/uri/utils.js"],[1530991559994,"^N","^1=","^1>","^1A"],["^[","clojure/test/check/results.cljc"],[1535586405418,"^N","^M"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",10,"^8",5,"^9",10,"^:",34],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^I","^K","^K","^L","^K","^M","^M","^N","^N"],"^O",["^B",["^P"]],"~:shadow/js-access-global",["^B",["Error"]],"^Q",null,"~:defs",["^ ","~$ErrorResult",["^ ","~:num-fields",1,"~:protocols",["^B",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$clojure.test.check.results/Result","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^C","~$clojure.test.check.properties/ErrorResult","^6","clojure/test/check/properties.cljc","^:",23,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",14,"~:record",true,"^9",14,"~:tag","~$function","~:skip-protocol-flag",["^B",["^22","^23","^24","^25","^26","^27","^28","^2:","^2;","^2<","^2=","^2>","^2?","^2@"]]],"~$->ErrorResult",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",14,"^8",12,"^9",14,"^:",23,"^2C",true,"~:factory","~:positional","~:arglists",["^T",["~$quote",["^T",[["~$error"]]]]],"~:doc","Positional factory function for clojure.test.check.properties/ErrorResult."],"^C","~$clojure.test.check.properties/->ErrorResult","~:variadic",false,"^6","clojure/test/check/properties.cljc","^:",23,"~:method-params",["^T",[["^2N"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^8",1,"^2C",true,"^2J","^2K","^7",14,"^9",14,"~:max-fixed-arity",1,"~:fn-var",true,"^2L",["^T",["^2M",["^T",[["^2N"]]]]],"^2O","Positional factory function for clojure.test.check.properties/ErrorResult."],"~$map->ErrorResult",["^ ","^2I",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",14,"^8",12,"^9",14,"^:",23,"^2C",true,"^2J","~:map","^2L",["^T",["^2M",["^T",[["~$G__28503"]]]]],"^2O","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"^C","~$clojure.test.check.properties/map->ErrorResult","^2Q",false,"^6","clojure/test/check/properties.cljc","^:",23,"^2R",["^T",[["^2Y"]]],"^2S",null,"^2T",["^T",[null,null]],"^8",1,"^2C",true,"^2J","^2X","^7",14,"^9",14,"^2U",1,"^2V",true,"^2L",["^T",["^2M",["^T",[["^2Y"]]]]],"^2O","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"~$exception?",["^ ","^2I",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",22,"^8",17,"^9",22,"^:",27,"~:private",true,"^2L",["^T",["^2M",["^T",[["~$x"]]]]]],"^30",true,"^C","~$clojure.test.check.properties/exception?","^2Q",false,"^6","clojure/test/check/properties.cljc","^:",27,"^2R",["^T",[["~$x"]]],"^2S",null,"^2T",["^T",[null,null]],"^8",1,"^7",22,"^9",22,"^2U",1,"^2V",true,"^2L",["^T",["^2M",["^T",[["~$x"]]]]]],"~$apply-gen",["^ ","^2I",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",26,"^8",17,"^9",26,"^:",26,"^30",true,"^2L",["^T",["^2M",["^T",[["^2F"]]]]]],"^30",true,"^C","~$clojure.test.check.properties/apply-gen","^2Q",false,"^6","clojure/test/check/properties.cljc","^:",26,"^2R",["^T",[["^2F"]]],"^2S",null,"^2T",["^T",[null,null]],"^8",1,"^7",26,"^9",26,"^2U",1,"^2V",true,"^2L",["^T",["^2M",["^T",[["^2F"]]]]]],"~$for-all*",["^ ","^2I",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",44,"^8",7,"^9",44,"^:",15,"^2L",["^T",["^2M",["^T",[["~$args","^2F"]]]]],"^2O","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"^C","~$clojure.test.check.properties/for-all*","^2Q",false,"^6","clojure/test/check/properties.cljc","^:",15,"^2R",["^T",[["^35","^2F"]]],"^2S",null,"^2T",["^T",[null,null]],"^8",1,"^7",44,"^9",44,"^2U",2,"^2V",true,"^2L",["^T",["^2M",["^T",[["^35","^2F"]]]]],"^2O","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"~$binding-vars",["^ ","^2I",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",59,"^8",8,"^9",59,"^:",20,"^30",true,"^2L",["^T",["^2M",["^T",[["~$bindings"]]]]]],"^30",true,"^C","~$clojure.test.check.properties/binding-vars","^2Q",false,"^6","clojure/test/check/properties.cljc","^:",20,"^2R",["^T",[["^38"]]],"^2S",null,"^2T",["^T",[null,null]],"^8",1,"^7",59,"^9",59,"^2U",1,"^2V",true,"^2L",["^T",["^2M",["^T",[["^38"]]]]]],"~$binding-gens",["^ ","^2I",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",63,"^8",8,"^9",63,"^:",20,"^30",true,"^2L",["^T",["^2M",["^T",[["^38"]]]]]],"^30",true,"^C","~$clojure.test.check.properties/binding-gens","^2Q",false,"^6","clojure/test/check/properties.cljc","^:",20,"^2R",["^T",[["^38"]]],"^2S",null,"^2T",["^T",[null,null]],"^8",1,"^7",63,"^9",63,"^2U",1,"^2V",true,"^2L",["^T",["^2M",["^T",[["^38"]]]]]]],"^R",["^ ","^M","^M"],"~:cljs.analyzer/constants",["^ ","^O",["^B",["~:args","~:clojure.test.check.properties/error","~:function","~:result","~:error","^2N"]],"~:order",["^3A","^3>","^2N","^3@","^3?","^3="]],"^W",["^ ","^P",["^B",[]]],"^X",["^ "],"^Y",["^N","^M","^I","^K"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^3E","~:static-fns"],true,["^3E","~:elide-asserts"],false,["^3E","~:optimize-constants"],null,["^3E","~:external-config"],null,["^3E","~:tooling-config"],null,["^3E","~:emit-constants"],null,["^3E","~:infer-externs"],true,["^3E","^14"],null,["~:js-options","~:js-provider"],"^P",["~:mode"],"~:dev",["^3E","~:fn-invoke-direct"],null,["^3E","~:source-map"],"/dev/null"]]]