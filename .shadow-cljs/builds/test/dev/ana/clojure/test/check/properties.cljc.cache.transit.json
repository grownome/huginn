["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.properties');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.generators');\ngoog.require('clojure.test.check.results');\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {clojure.test.check.results.Result}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nclojure.test.check.properties.ErrorResult = (function (error,__meta,__extmap,__hash){\nthis.error = error;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2229667594;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4203__auto__,k__4204__auto__){\nvar self__ = this;\nvar this__4203__auto____$1 = this;\nreturn this__4203__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4204__auto__,null);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4205__auto__,k27043,else__4206__auto__){\nvar self__ = this;\nvar this__4205__auto____$1 = this;\nvar G__27049 = k27043;\nvar G__27049__$1 = (((G__27049 instanceof cljs.core.Keyword))?G__27049.fqn:null);\nswitch (G__27049__$1) {\ncase \"error\":\nreturn self__.error;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k27043,else__4206__auto__);\n\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4217__auto__,writer__4218__auto__,opts__4219__auto__){\nvar self__ = this;\nvar this__4217__auto____$1 = this;\nvar pr_pair__4220__auto__ = ((function (this__4217__auto____$1){\nreturn (function (keyval__4221__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4218__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4219__auto__,keyval__4221__auto__);\n});})(this__4217__auto____$1))\n;\nreturn cljs.core.pr_sequential_writer(writer__4218__auto__,pr_pair__4220__auto__,\"#clojure.test.check.properties.ErrorResult{\",\", \",\"}\",opts__4219__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"error\",\"error\",-978969032),self__.error],null))], null),self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__27042){\nvar self__ = this;\nvar G__27042__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__27042__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4201__auto__){\nvar self__ = this;\nvar this__4201__auto____$1 = this;\nreturn self__.__meta;\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4198__auto__){\nvar self__ = this;\nvar this__4198__auto____$1 = this;\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4207__auto__){\nvar self__ = this;\nvar this__4207__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4199__auto__){\nvar self__ = this;\nvar this__4199__auto____$1 = this;\nvar h__4061__auto__ = self__.__hash;\nif(!((h__4061__auto__ == null))){\nreturn h__4061__auto__;\n} else {\nvar h__4061__auto____$1 = (function (){var fexpr__27053 = ((function (h__4061__auto__,this__4199__auto____$1){\nreturn (function (coll__4200__auto__){\nreturn (-12654282 ^ cljs.core.hash_unordered_coll(coll__4200__auto__));\n});})(h__4061__auto__,this__4199__auto____$1))\n;\nreturn fexpr__27053(this__4199__auto____$1);\n})();\nself__.__hash = h__4061__auto____$1;\n\nreturn h__4061__auto____$1;\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$passing_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn false;\n});\n\nclojure.test.check.properties.ErrorResult.prototype.clojure$test$check$results$Result$result_data$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"clojure.test.check.properties\",\"error\",\"clojure.test.check.properties/error\",483933635),self__.error], null);\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this27044,other27045){\nvar self__ = this;\nvar this27044__$1 = this;\nreturn ((!((other27045 == null))) && ((this27044__$1.constructor === other27045.constructor)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this27044__$1.error,other27045.error)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this27044__$1.__extmap,other27045.__extmap)));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4212__auto__,k__4213__auto__){\nvar self__ = this;\nvar this__4212__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),null], null), null),k__4213__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4212__auto____$1),self__.__meta),k__4213__auto__);\n} else {\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4213__auto__)),null));\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4210__auto__,k__4211__auto__,G__27042){\nvar self__ = this;\nvar this__4210__auto____$1 = this;\nvar pred__27062 = cljs.core.keyword_identical_QMARK_;\nvar expr__27063 = k__4211__auto__;\nif(cljs.core.truth_((function (){var G__27065 = new cljs.core.Keyword(null,\"error\",\"error\",-978969032);\nvar G__27066 = expr__27063;\nreturn (pred__27062.cljs$core$IFn$_invoke$arity$2 ? pred__27062.cljs$core$IFn$_invoke$arity$2(G__27065,G__27066) : pred__27062.call(null,G__27065,G__27066));\n})())){\nreturn (new clojure.test.check.properties.ErrorResult(G__27042,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4211__auto__,G__27042),null));\n}\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4215__auto__){\nvar self__ = this;\nvar this__4215__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),self__.error,null))], null),self__.__extmap));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4202__auto__,G__27042){\nvar self__ = this;\nvar this__4202__auto____$1 = this;\nreturn (new clojure.test.check.properties.ErrorResult(self__.error,G__27042,self__.__extmap,self__.__hash));\n});\n\nclojure.test.check.properties.ErrorResult.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4208__auto__,entry__4209__auto__){\nvar self__ = this;\nvar this__4208__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4209__auto__)){\nreturn this__4208__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4209__auto__,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry__4209__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4208__auto____$1,entry__4209__auto__);\n}\n});\n\nclojure.test.check.properties.ErrorResult.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"error\",\"error\",661562495,null)], null);\n});\n\nclojure.test.check.properties.ErrorResult.cljs$lang$type = true;\n\nclojure.test.check.properties.ErrorResult.cljs$lang$ctorPrSeq = (function (this__4240__auto__){\nreturn (new cljs.core.List(null,\"clojure.test.check.properties/ErrorResult\",null,(1),null));\n});\n\nclojure.test.check.properties.ErrorResult.cljs$lang$ctorPrWriter = (function (this__4240__auto__,writer__4241__auto__){\nreturn cljs.core._write(writer__4241__auto__,\"clojure.test.check.properties/ErrorResult\");\n});\n\n/**\n * Positional factory function for clojure.test.check.properties/ErrorResult.\n */\nclojure.test.check.properties.__GT_ErrorResult = (function clojure$test$check$properties$__GT_ErrorResult(error){\nreturn (new clojure.test.check.properties.ErrorResult(error,null,null,null));\n});\n\n/**\n * Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values.\n */\nclojure.test.check.properties.map__GT_ErrorResult = (function clojure$test$check$properties$map__GT_ErrorResult(G__27046){\nvar extmap__4236__auto__ = (function (){var G__27078 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__27046,new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nif(cljs.core.record_QMARK_(G__27046)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__27078);\n} else {\nreturn G__27078;\n}\n})();\nreturn (new clojure.test.check.properties.ErrorResult(new cljs.core.Keyword(null,\"error\",\"error\",-978969032).cljs$core$IFn$_invoke$arity$1(G__27046),null,cljs.core.not_empty(extmap__4236__auto__),null));\n});\n\nclojure.test.check.properties.exception_QMARK_ = (function clojure$test$check$properties$exception_QMARK_(x){\nreturn (x instanceof Error);\n});\nclojure.test.check.properties.apply_gen = (function clojure$test$check$properties$apply_gen(function$){\nreturn (function (args){\nvar result = (function (){try{var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(function$,args);\nif(cljs.core.truth_(clojure.test.check.properties.exception_QMARK_(ret))){\nthrow ret;\n} else {\nreturn ret;\n}\n}catch (e27105){var ex = e27105;\nreturn clojure.test.check.properties.__GT_ErrorResult(ex);\n}})();\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"function\",\"function\",-2127255473),function$,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),args], null);\n});\n});\n/**\n * Creates a property (properties are also generators). A property\n *   is a generator that generates the result of applying the function\n *   under test with the realized arguments. Once realized, the arguments\n *   will be applied to `function` with `apply`.\n * \n *   Example:\n * \n *   (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n *   \n */\nclojure.test.check.properties.for_all_STAR_ = (function clojure$test$check$properties$for_all_STAR_(args,function$){\nreturn clojure.test.check.generators.fmap(clojure.test.check.properties.apply_gen(function$),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(clojure.test.check.generators.tuple,args));\n});\nclojure.test.check.properties.binding_vars = (function clojure$test$check$properties$binding_vars(bindings){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bindings));\n});\nclojure.test.check.properties.binding_gens = (function clojure$test$check$properties$binding_gens(bindings){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.second,cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),bindings));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/properties.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",34],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.properties","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.generators","^I","~$gen","^I","~$clojure.test.check.results","^K","~$results","^K","~$cljs.core","^M","~$goog","^N"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^M","^M"],"~:form",["~#list",["~$ns","^D",["^T",["^P",["^I","~:as","^J"],["^K","^V","^L"]]]]],"~:flags",["^ ","^P",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^N","^M","^I","^K"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/properties.cljc"],"~:compiled-at",1537546389425,"~:resource-name","clojure/test/check/properties.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check.properties\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.results :as results]))\n\n(defrecord ErrorResult [error]\n  results/Result\n  (passing? [_] false)\n  (result-data [_]\n    ;; spelling out the whole keyword here since `::error` is\n    ;; different in self-hosted cljs.\n    {:clojure.test.check.properties/error error}))\n\n(defn ^:private exception?\n  [x]\n  (instance? #?(:clj Throwable :cljs js/Error) x))\n\n(defn ^:private apply-gen\n  [function]\n  (fn [args]\n    (let [result (try\n                   (let [ret (apply function args)]\n                     ;; TCHECK-131: for backwards compatibility (mainly\n                     ;; for spec), treat returned exceptions like thrown\n                     ;; exceptions\n                     (if (exception? ret)\n                       (throw ret)\n                       ret))\n                   #?(:clj (catch java.lang.ThreadDeath t (throw t)))\n                   (catch #?(:clj Throwable :cljs :default) ex\n                     (->ErrorResult ex)))]\n      {:result result\n       :function function\n       :args args})))\n\n(defn for-all*\n  \"Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  \"\n  [args function]\n  (gen/fmap\n   (apply-gen function)\n   (apply gen/tuple args)))\n\n(defn- binding-vars\n  [bindings]\n  (map first (partition 2 bindings)))\n\n(defn- binding-gens\n  [bindings]\n  (map second (partition 2 bindings)))\n\n(defmacro for-all\n  \"Macro sugar for `for-all*`. `for-all` lets you name the parameter\n  and use them in expression, without wrapping them in a lambda. Like\n  `for-all*`, it returns a property.\n\n  Examples\n\n  (for-all [a gen/int\n            b gen/int]\n    (>= (+ a b) a))\n  \"\n  [bindings & body]\n  `(for-all* ~(vec (binding-gens bindings))\n             (fn [~@(binding-vars bindings)]\n               ~@body)))\n","~:reader-features",["^B",["~:cljs"]],"~:source-map",["^ ","~i13",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",4],["^ ","^18",0,"^19",4],["^ ","^18",0,"^19",4],["^ ","^18",0,"^19",4],["^ ","^18",0,"^19",31],["^ ","^18",0,"^19",31],["^ ","^18",0,"^19",31],["^ ","^18",0,"^19",31],["^ ","^18",88,"^19",31],["^ ","^18",99,"^19",31,"^C","this__4203__auto__"],["^ ","^18",118,"^19",31,"^C","k__4204__auto__"],["^ ","^18",0,"^19",33],["^ ","^18",0,"^19",33],["^ ","^18",4,"^19",33,"^C","this__4203__auto__"],["^ ","^18",29,"^19",33],["^ ","^18",0,"^19",34],["^ ","^18",0,"^19",34],["^ ","^18",7,"^19",34,"^C","this__4203__auto__"],["^ ","^18",69,"^19",34,"^C","k__4204__auto__"],["^ ","^18",85,"^19",34],["^ ","^18",0,"^19",37],["^ ","^18",0,"^19",37],["^ ","^18",0,"^19",37],["^ ","^18",88,"^19",37],["^ ","^18",99,"^19",37,"^C","this__4205__auto__"],["^ ","^18",118,"^19",37,"^C","k27043"],["^ ","^18",125,"^19",37,"^C","else__4206__auto__"],["^ ","^18",0,"^19",39],["^ ","^18",0,"^19",39],["^ ","^18",4,"^19",39,"^C","this__4205__auto__"],["^ ","^18",29,"^19",39],["^ ","^18",0,"^19",40],["^ ","^18",0,"^19",40],["^ ","^18",4,"^19",40,"^C","G__27049"],["^ ","^18",15,"^19",40,"^C","k27043"],["^ ","^18",4,"^19",41,"^C","G__27049"],["^ ","^18",19,"^19",41],["^ ","^18",21,"^19",41],["^ ","^18",22,"^19",41,"^C","G__27049"],["^ ","^18",42,"^19",41,"^C","cljs.core/Keyword"],["^ ","^18",62,"^19",41],["^ ","^18",62,"^19",41,"^C","G__27049"],["^ ","^18",75,"^19",41],["^ ","^18",0,"^19",42],["^ ","^18",0,"^19",42],["^ ","^18",8,"^19",42,"^C","G__27049"],["^ ","^18",5,"^19",43],["^ ","^18",0,"^19",44,"^C","error"],["^ ","^18",0,"^19",48],["^ ","^18",7,"^19",48,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^18",51,"^19",48,"^C","__extmap"],["^ ","^18",67,"^19",48,"^C","k27043"],["^ ","^18",74,"^19",48,"^C","else__4206__auto__"],["^ ","^18",0,"^19",53],["^ ","^18",0,"^19",53],["^ ","^18",0,"^19",53],["^ ","^18",100,"^19",53],["^ ","^18",111,"^19",53,"^C","this__4217__auto__"],["^ ","^18",130,"^19",53,"^C","writer__4218__auto__"],["^ ","^18",151,"^19",53,"^C","opts__4219__auto__"],["^ ","^18",0,"^19",55],["^ ","^18",0,"^19",55],["^ ","^18",4,"^19",55,"^C","this__4217__auto__"],["^ ","^18",29,"^19",55],["^ ","^18",0,"^19",56],["^ ","^18",0,"^19",56],["^ ","^18",4,"^19",56,"^C","pr-pair__4220__auto__"],["^ ","^18",28,"^19",56],["^ ","^18",18,"^19",57,"^C","keyval__4221__auto__"],["^ ","^18",0,"^19",58],["^ ","^18",0,"^19",58],["^ ","^18",7,"^19",58,"^C","cljs.core/pr-sequential-writer"],["^ ","^18",38,"^19",58,"^C","writer__4218__auto__"],["^ ","^18",59,"^19",58,"^C","cljs.core/pr-writer"],["^ ","^18",79,"^19",58],["^ ","^18",82,"^19",58],["^ ","^18",86,"^19",58],["^ ","^18",89,"^19",58,"^C","opts__4219__auto__"],["^ ","^18",108,"^19",58,"^C","keyval__4221__auto__"],["^ ","^18",0,"^19",61],["^ ","^18",0,"^19",61],["^ ","^18",7,"^19",61,"^C","cljs.core/pr-sequential-writer"],["^ ","^18",38,"^19",61,"^C","writer__4218__auto__"],["^ ","^18",59,"^19",61,"^C","pr-pair__4220__auto__"],["^ ","^18",81,"^19",61],["^ ","^18",127,"^19",61],["^ ","^18",132,"^19",61],["^ ","^18",136,"^19",61,"^C","opts__4219__auto__"],["^ ","^18",155,"^19",61],["^ ","^18",155,"^19",61,"^C","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",202,"^19",61],["^ ","^18",285,"^19",61],["^ ","^18",290,"^19",61,"^C","cljs.core/PersistentVector"],["^ ","^18",317,"^19",61],["^ ","^18",322,"^19",61],["^ ","^18",324,"^19",61],["^ ","^18",328,"^19",61],["^ ","^18",328,"^19",61,"^C","cljs.core/PersistentVector"],["^ ","^18",366,"^19",61],["^ ","^18",367,"^19",61],["^ ","^18",422,"^19",61,"^C","error"],["^ ","^18",436,"^19",61],["^ ","^18",451,"^19",61,"^C","__extmap"],["^ ","^18",0,"^19",64],["^ ","^18",0,"^19",64],["^ ","^18",0,"^19",64],["^ ","^18",92,"^19",64],["^ ","^18",103,"^19",64,"^C","G__27042"],["^ ","^18",0,"^19",66],["^ ","^18",0,"^19",66],["^ ","^18",4,"^19",66,"^C","G__27042"],["^ ","^18",19,"^19",66],["^ ","^18",0,"^19",67],["^ ","^18",0,"^19",67],["^ ","^18",12,"^19",67,"^C","cljs.core/RecordIter"],["^ ","^18",33,"^19",67],["^ ","^18",37,"^19",67,"^C","G__27042"],["^ ","^18",50,"^19",67],["^ ","^18",52,"^19",67],["^ ","^18",135,"^19",67],["^ ","^18",198,"^19",67],["^ ","^18",216,"^19",67,"^C","__extmap"],["^ ","^18",233,"^19",67],["^ ","^18",233,"^19",67,"^C","cljs.core/-iterator"],["^ ","^18",253,"^19",67,"^C","__extmap"],["^ ","^18",270,"^19",67],["^ ","^18",270,"^19",67,"^C","cljs.core/nil-iter"],["^ ","^18",0,"^19",70],["^ ","^18",0,"^19",70],["^ ","^18",0,"^19",70],["^ ","^18",84,"^19",70],["^ ","^18",95,"^19",70,"^C","this__4201__auto__"],["^ ","^18",0,"^19",72],["^ ","^18",0,"^19",72],["^ ","^18",4,"^19",72,"^C","this__4201__auto__"],["^ ","^18",29,"^19",72],["^ ","^18",0,"^19",73],["^ ","^18",0,"^19",73,"^C","__meta"],["^ ","^18",0,"^19",76],["^ ","^18",0,"^19",76],["^ ","^18",0,"^19",76],["^ ","^18",90,"^19",76],["^ ","^18",101,"^19",76,"^C","this__4198__auto__"],["^ ","^18",0,"^19",78],["^ ","^18",0,"^19",78],["^ ","^18",4,"^19",78,"^C","this__4198__auto__"],["^ ","^18",29,"^19",78],["^ ","^18",0,"^19",79],["^ ","^18",0,"^19",79],["^ ","^18",54,"^19",79,"^C","error"],["^ ","^18",67,"^19",79,"^C","__meta"],["^ ","^18",81,"^19",79,"^C","__extmap"],["^ ","^18",97,"^19",79,"^C","__hash"],["^ ","^18",0,"^19",82],["^ ","^18",0,"^19",82],["^ ","^18",0,"^19",82],["^ ","^18",88,"^19",82],["^ ","^18",99,"^19",82,"^C","this__4207__auto__"],["^ ","^18",0,"^19",84],["^ ","^18",0,"^19",84],["^ ","^18",4,"^19",84,"^C","this__4207__auto__"],["^ ","^18",29,"^19",84],["^ ","^18",0,"^19",85],["^ ","^18",0,"^19",85],["^ ","^18",8,"^19",85],["^ ","^18",12,"^19",85],["^ ","^18",12,"^19",85,"^C","cljs.core/count"],["^ ","^18",28,"^19",85,"^C","__extmap"],["^ ","^18",0,"^19",88],["^ ","^18",0,"^19",88],["^ ","^18",0,"^19",88],["^ ","^18",84,"^19",88],["^ ","^18",95,"^19",88,"^C","this__4199__auto__"],["^ ","^18",0,"^19",90],["^ ","^18",0,"^19",90],["^ ","^18",4,"^19",90,"^C","this__4199__auto__"],["^ ","^18",29,"^19",90],["^ ","^18",0,"^19",91],["^ ","^18",0,"^19",91],["^ ","^18",4,"^19",91,"^C","h__4061__auto__"],["^ ","^18",22,"^19",91,"^C","__hash"],["^ ","^18",0,"^19",92],["^ ","^18",0,"^19",92],["^ ","^18",3,"^19",92],["^ ","^18",5,"^19",92],["^ ","^18",6,"^19",92,"^C","h__4061__auto__"],["^ ","^18",25,"^19",92],["^ ","^18",0,"^19",93,"^C","h__4061__auto__"],["^ ","^18",0,"^19",95],["^ ","^18",4,"^19",95,"^C","h__4061__auto__"],["^ ","^18",26,"^19",95],["^ ","^18",43,"^19",95,"^C","fexpr__27053"],["^ ","^18",58,"^19",95],["^ ","^18",18,"^19",96,"^C","coll__4200__auto__"],["^ ","^18",0,"^19",97],["^ ","^18",0,"^19",97],["^ ","^18",8,"^19",97],["^ ","^18",20,"^19",97],["^ ","^18",20,"^19",97,"^C","cljs.core/hash-unordered-coll"],["^ ","^18",50,"^19",97,"^C","coll__4200__auto__"],["^ ","^18",0,"^19",100],["^ ","^18",0,"^19",100],["^ ","^18",7,"^19",100,"^C","fexpr__27053"],["^ ","^18",20,"^19",100,"^C","this__4199__auto__"],["^ ","^18",0,"^19",102],["^ ","^18",0,"^19",102],["^ ","^18",0,"^19",102,"^C","__hash"],["^ ","^18",16,"^19",102,"^C","h__4061__auto__"],["^ ","^18",0,"^19",104,"^C","h__4061__auto__"],["^ ","^18",0,"^19",108],["^ ","^18",0,"^19",108],["^ ","^18",0,"^19",108],["^ ","^18",89,"^19",108,"^C","cljs.core/PROTOCOL_SENTINEL"],["^ ","^18",0,"^19",110],["^ ","^18",0,"^19",110],["^ ","^18",0,"^19",110],["^ ","^18",111,"^19",110],["^ ","^18",0,"^19",112],["^ ","^18",0,"^19",112],["^ ","^18",12,"^19",112],["^ ","^18",0,"^19",113],["^ ","^18",0,"^19",113],["^ ","^18",0,"^19",116],["^ ","^18",0,"^19",116],["^ ","^18",0,"^19",116],["^ ","^18",108,"^19",116],["^ ","^18",0,"^19",118],["^ ","^18",0,"^19",118],["^ ","^18",12,"^19",118],["^ ","^18",0,"^19",119],["^ ","^18",0,"^19",119],["^ ","^18",50,"^19",119],["^ ","^18",0,"^19",122],["^ ","^18",0,"^19",122],["^ ","^18",0,"^19",122],["^ ","^18",86,"^19",122],["^ ","^18",97,"^19",122,"^C","this27044"],["^ ","^18",107,"^19",122,"^C","other27045"],["^ ","^18",0,"^19",124],["^ ","^18",0,"^19",124],["^ ","^18",4,"^19",124,"^C","this27044"],["^ ","^18",20,"^19",124],["^ ","^18",0,"^19",125],["^ ","^18",0,"^19",125],["^ ","^18",9,"^19",125],["^ ","^18",11,"^19",125],["^ ","^18",12,"^19",125,"^C","other27045"],["^ ","^18",26,"^19",125],["^ ","^18",38,"^19",125],["^ ","^18",39,"^19",125],["^ ","^18",39,"^19",125,"^C","this27044"],["^ ","^18",69,"^19",125],["^ ","^18",69,"^19",125,"^C","other27045"],["^ ","^18",98,"^19",125],["^ ","^18",98,"^19",125,"^C","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",143,"^19",125],["^ ","^18",143,"^19",125,"^C","this27044"],["^ ","^18",163,"^19",125],["^ ","^18",163,"^19",125,"^C","other27045"],["^ ","^18",186,"^19",125],["^ ","^18",186,"^19",125,"^C","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",231,"^19",125],["^ ","^18",231,"^19",125,"^C","this27044"],["^ ","^18",254,"^19",125],["^ ","^18",254,"^19",125,"^C","other27045"],["^ ","^18",0,"^19",128],["^ ","^18",0,"^19",128],["^ ","^18",0,"^19",128],["^ ","^18",85,"^19",128],["^ ","^18",96,"^19",128,"^C","this__4212__auto__"],["^ ","^18",115,"^19",128,"^C","k__4213__auto__"],["^ ","^18",0,"^19",130],["^ ","^18",0,"^19",130],["^ ","^18",4,"^19",130,"^C","this__4212__auto__"],["^ ","^18",29,"^19",130],["^ ","^18",0,"^19",131],["^ ","^18",0,"^19",131],["^ ","^18",3,"^19",131],["^ ","^18",3,"^19",131,"^C","cljs.core/contains?"],["^ ","^18",29,"^19",131],["^ ","^18",110,"^19",131],["^ ","^18",185,"^19",131,"^C","k__4213__auto__"],["^ ","^18",0,"^19",132],["^ ","^18",7,"^19",132,"^C","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",54,"^19",132],["^ ","^18",54,"^19",132,"^C","cljs.core/-with-meta"],["^ ","^18",75,"^19",132],["^ ","^18",75,"^19",132,"^C","cljs.core.into.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",120,"^19",132],["^ ","^18",155,"^19",132,"^C","this__4212__auto__"],["^ ","^18",179,"^19",132,"^C","__meta"],["^ ","^18",194,"^19",132,"^C","k__4213__auto__"],["^ ","^18",0,"^19",134],["^ ","^18",54,"^19",134,"^C","error"],["^ ","^18",67,"^19",134,"^C","__meta"],["^ ","^18",81,"^19",134],["^ ","^18",81,"^19",134,"^C","cljs.core/not-empty"],["^ ","^18",101,"^19",134],["^ ","^18",101,"^19",134,"^C","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",148,"^19",134,"^C","__extmap"],["^ ","^18",164,"^19",134,"^C","k__4213__auto__"],["^ ","^18",182,"^19",134],["^ ","^18",0,"^19",138],["^ ","^18",0,"^19",138],["^ ","^18",0,"^19",138],["^ ","^18",92,"^19",138],["^ ","^18",103,"^19",138,"^C","this__4210__auto__"],["^ ","^18",122,"^19",138,"^C","k__4211__auto__"],["^ ","^18",138,"^19",138,"^C","G__27042"],["^ ","^18",0,"^19",140],["^ ","^18",0,"^19",140],["^ ","^18",4,"^19",140,"^C","this__4210__auto__"],["^ ","^18",29,"^19",140],["^ ","^18",0,"^19",141],["^ ","^18",0,"^19",141],["^ ","^18",4,"^19",141,"^C","pred__27062"],["^ ","^18",18,"^19",141,"^C","cljs.core/keyword-identical?"],["^ ","^18",4,"^19",142,"^C","expr__27063"],["^ ","^18",18,"^19",142,"^C","k__4211__auto__"],["^ ","^18",0,"^19",143],["^ ","^18",0,"^19",143],["^ ","^18",20,"^19",143],["^ ","^18",37,"^19",143,"^C","G__27065"],["^ ","^18",48,"^19",143],["^ ","^18",4,"^19",144,"^C","G__27066"],["^ ","^18",15,"^19",144,"^C","expr__27063"],["^ ","^18",0,"^19",145],["^ ","^18",0,"^19",145],["^ ","^18",8,"^19",145,"^C","pred__27062"],["^ ","^18",52,"^19",145,"^C","pred__27062"],["^ ","^18",94,"^19",145,"^C","G__27065"],["^ ","^18",103,"^19",145,"^C","G__27066"],["^ ","^18",115,"^19",145,"^C","pred__27062"],["^ ","^18",137,"^19",145,"^C","G__27065"],["^ ","^18",146,"^19",145,"^C","G__27066"],["^ ","^18",0,"^19",147],["^ ","^18",54,"^19",147,"^C","G__27042"],["^ ","^18",63,"^19",147,"^C","__meta"],["^ ","^18",77,"^19",147,"^C","__extmap"],["^ ","^18",93,"^19",147],["^ ","^18",0,"^19",149],["^ ","^18",54,"^19",149,"^C","error"],["^ ","^18",67,"^19",149,"^C","__meta"],["^ ","^18",81,"^19",149],["^ ","^18",81,"^19",149,"^C","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"],["^ ","^18",127,"^19",149,"^C","__extmap"],["^ ","^18",143,"^19",149,"^C","k__4211__auto__"],["^ ","^18",159,"^19",149,"^C","G__27042"],["^ ","^18",169,"^19",149],["^ ","^18",0,"^19",153],["^ ","^18",0,"^19",153],["^ ","^18",0,"^19",153],["^ ","^18",86,"^19",153],["^ ","^18",97,"^19",153,"^C","this__4215__auto__"],["^ ","^18",0,"^19",155],["^ ","^18",0,"^19",155],["^ ","^18",4,"^19",155,"^C","this__4215__auto__"],["^ ","^18",29,"^19",155],["^ ","^18",0,"^19",156],["^ ","^18",0,"^19",156],["^ ","^18",7,"^19",156,"^C","cljs.core/seq"],["^ ","^18",21,"^19",156],["^ ","^18",21,"^19",156,"^C","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",68,"^19",156],["^ ","^18",151,"^19",156],["^ ","^18",156,"^19",156,"^C","cljs/core.MapEntry"],["^ ","^18",175,"^19",156],["^ ","^18",230,"^19",156,"^C","error"],["^ ","^18",243,"^19",156],["^ ","^18",258,"^19",156,"^C","__extmap"],["^ ","^18",0,"^19",159],["^ ","^18",0,"^19",159],["^ ","^18",0,"^19",159],["^ ","^18",93,"^19",159],["^ ","^18",104,"^19",159,"^C","this__4202__auto__"],["^ ","^18",123,"^19",159,"^C","G__27042"],["^ ","^18",0,"^19",161],["^ ","^18",0,"^19",161],["^ ","^18",4,"^19",161,"^C","this__4202__auto__"],["^ ","^18",29,"^19",161],["^ ","^18",0,"^19",162],["^ ","^18",0,"^19",162],["^ ","^18",54,"^19",162,"^C","error"],["^ ","^18",67,"^19",162,"^C","G__27042"],["^ ","^18",76,"^19",162,"^C","__extmap"],["^ ","^18",92,"^19",162,"^C","__hash"],["^ ","^18",0,"^19",165],["^ ","^18",0,"^19",165],["^ ","^18",0,"^19",165],["^ ","^18",90,"^19",165],["^ ","^18",101,"^19",165,"^C","this__4208__auto__"],["^ ","^18",120,"^19",165,"^C","entry__4209__auto__"],["^ ","^18",0,"^19",167],["^ ","^18",0,"^19",167],["^ ","^18",4,"^19",167,"^C","this__4208__auto__"],["^ ","^18",29,"^19",167],["^ ","^18",0,"^19",168],["^ ","^18",0,"^19",168],["^ ","^18",3,"^19",168],["^ ","^18",3,"^19",168,"^C","cljs.core/vector?"],["^ ","^18",27,"^19",168,"^C","entry__4209__auto__"],["^ ","^18",0,"^19",169],["^ ","^18",7,"^19",169,"^C","this__4208__auto__"],["^ ","^18",73,"^19",169],["^ ","^18",73,"^19",169,"^C","cljs.core._nth.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",118,"^19",169,"^C","entry__4209__auto__"],["^ ","^18",138,"^19",169],["^ ","^18",143,"^19",169],["^ ","^18",143,"^19",169,"^C","cljs.core._nth.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",188,"^19",169,"^C","entry__4209__auto__"],["^ ","^18",208,"^19",169],["^ ","^18",0,"^19",171],["^ ","^18",7,"^19",171,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"],["^ ","^18",54,"^19",171,"^C","cljs.core/-conj"],["^ ","^18",70,"^19",171,"^C","this__4208__auto__"],["^ ","^18",93,"^19",171,"^C","entry__4209__auto__"],["^ ","^18",0,"^19",175],["^ ","^18",0,"^19",175],["^ ","^18",0,"^19",175,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",53,"^19",175],["^ ","^18",0,"^19",176],["^ ","^18",0,"^19",176],["^ ","^18",90,"^19",176],["^ ","^18",0,"^19",179],["^ ","^18",0,"^19",179],["^ ","^18",0,"^19",179,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",59,"^19",179],["^ ","^18",0,"^19",181],["^ ","^18",0,"^19",181],["^ ","^18",0,"^19",181,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",64,"^19",181],["^ ","^18",75,"^19",181,"^C","this__4240__auto__"],["^ ","^18",0,"^19",182],["^ ","^18",0,"^19",182],["^ ","^18",12,"^19",182,"^C","cljs.core/List"],["^ ","^18",27,"^19",182],["^ ","^18",32,"^19",182],["^ ","^18",76,"^19",182],["^ ","^18",81,"^19",182],["^ ","^18",85,"^19",182],["^ ","^18",0,"^19",185],["^ ","^18",0,"^19",185],["^ ","^18",0,"^19",185,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",67,"^19",185],["^ ","^18",78,"^19",185,"^C","this__4240__auto__"],["^ ","^18",97,"^19",185,"^C","writer__4241__auto__"],["^ ","^18",0,"^19",186],["^ ","^18",0,"^19",186],["^ ","^18",7,"^19",186,"^C","cljs.core/-write"],["^ ","^18",24,"^19",186,"^C","writer__4241__auto__"],["^ ","^18",45,"^19",186],["^ ","^18",0,"^19",189],["^ ","^18",49,"^19",192],["^ ","^18",0,"^19",193],["^ ","^18",0,"^19",193],["^ ","^18",12,"^19",193,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",60,"^19",193],["^ ","^18",65,"^19",193],["^ ","^18",70,"^19",193],["^ ","^18",0,"^19",196],["^ ","^18",52,"^19",199],["^ ","^18",112,"^19",199,"^C","G__27046"],["^ ","^18",0,"^19",200],["^ ","^18",0,"^19",200],["^ ","^18",4,"^19",200,"^C","extmap__4236__auto__"],["^ ","^18",27,"^19",200],["^ ","^18",44,"^19",200,"^C","G__27078"],["^ ","^18",55,"^19",200],["^ ","^18",55,"^19",200,"^C","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",102,"^19",200,"^C","G__27046"],["^ ","^18",111,"^19",200],["^ ","^18",0,"^19",201],["^ ","^18",0,"^19",201],["^ ","^18",3,"^19",201],["^ ","^18",3,"^19",201,"^C","cljs.core/record?"],["^ ","^18",27,"^19",201,"^C","G__27046"],["^ ","^18",0,"^19",202],["^ ","^18",7,"^19",202,"^C","cljs.core.into.cljs$core$IFn$_invoke$arity$2"],["^ ","^18",52,"^19",202],["^ ","^18",87,"^19",202,"^C","G__27078"],["^ ","^18",0,"^19",204,"^C","G__27078"],["^ ","^18",0,"^19",207],["^ ","^18",0,"^19",207],["^ ","^18",12,"^19",207,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",54,"^19",207],["^ ","^18",54,"^19",207],["^ ","^18",139,"^19",207,"^C","G__27046"],["^ ","^18",149,"^19",207],["^ ","^18",154,"^19",207],["^ ","^18",154,"^19",207,"^C","cljs.core/not-empty"],["^ ","^18",174,"^19",207,"^C","extmap__4236__auto__"],["^ ","^18",196,"^19",207],["^ ","^18",0,"^19",210,"^C","clojure.test.check.properties/ErrorResult"]],"~i11",[["^ ","^18",0,"^19",31,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",37,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",53,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",64,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",70,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",76,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",12,"^19",79,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",82,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",88,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",108,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",110,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",116,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",122,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",128,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",12,"^19",134,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",138,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",12,"^19",147,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",12,"^19",149,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",153,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",159,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",12,"^19",162,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",165,"^C","clojure.test.check.properties/ErrorResult"],["^ ","^18",0,"^19",192,"^C","clojure.test.check.properties/->ErrorResult"],["^ ","^18",0,"^19",199,"^C","clojure.test.check.properties/map->ErrorResult"]],"~i24",[["^ ","^18",106,"^19",192,"^C","error"],["^ ","^18",54,"^19",193,"^C","error"]]],"~i15",["^ ","^17",[["^ ","^18",122,"^19",110,"^C","_"],["^ ","^18",4,"^19",112,"^C","_"]]],"~i16",["^ ","^1=",[["^ ","^18",119,"^19",116,"^C","_"],["^ ","^18",4,"^19",118,"^C","_"]]],"~i19",["^ ","~i42",[["^ ","^18",161,"^19",119,"^C","error"]]],"~i21",["^ ","~i0",[["^ ","^18",0,"^19",210],["^ ","^18",49,"^19",210],["^ ","^18",0,"^19",211]],"^1=",[["^ ","^18",0,"^19",210,"^C","clojure.test.check.properties/exception?"]]],"~i22",["^ ","~i3",[["^ ","^18",106,"^19",210,"^C","x"]]],"~i23",["^ ","~i2",[["^ ","^18",0,"^19",211]],"~i37",[["^ ","^18",21,"^19",211,"^C","js/Error"]],"~i47",[["^ ","^18",8,"^19",211,"^C","x"]]],"~i25",["^ ","~i0",[["^ ","^18",0,"^19",213],["^ ","^18",42,"^19",213],["^ ","^18",0,"^19",214]],"^1=",[["^ ","^18",0,"^19",213,"^C","clojure.test.check.properties/apply-gen"]]],"~i26",["^ ","~i3",[["^ ","^18",92,"^19",213,"^C","function"]]],"~i27",["^ ","~i2",[["^ ","^18",0,"^19",214],["^ ","^18",0,"^19",215]],"~i7",[["^ ","^18",18,"^19",214,"^C","args"]]],"~i28",["^ ","~i4",[["^ ","^18",0,"^19",215],["^ ","^18",0,"^19",224],["^ ","^18",0,"^19",224],["^ ","^18",50,"^19",224],["^ ","^18",114,"^19",224],["^ ","^18",186,"^19",224]],"~i10",[["^ ","^18",4,"^19",215,"^C","result"]],"~i17",[["^ ","^18",13,"^19",215],["^ ","^18",30,"^19",215],["^ ","^18",16,"^19",221],["^ ","^18",25,"^19",221,"^C","e27105"],["^ ","^18",0,"^19",222]]],"~i29",["^ ","^1>",[["^ ","^18",30,"^19",215],["^ ","^18",0,"^19",216]],"^1E",[["^ ","^18",34,"^19",215,"^C","ret"]],"^1K",[["^ ","^18",40,"^19",215]],"~i30",[["^ ","^18",40,"^19",215,"^C","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i36",[["^ ","^18",86,"^19",215,"^C","function"]],"~i45",[["^ ","^18",96,"^19",215,"^C","args"]]],"~i33",["^ ","^1@",[["^ ","^18",0,"^19",216]],"^1E",[["^ ","^18",20,"^19",216]],"^1F",[["^ ","^18",20,"^19",216,"^C","clojure.test.check.properties/exception?"]],"^1C",[["^ ","^18",67,"^19",216,"^C","ret"]]],"~i34",["^ ","^1B",[["^ ","^18",0,"^19",217]],"^1L",[["^ ","^18",6,"^19",217,"^C","ret"]]],"~i35",["^ ","^1B",[["^ ","^18",0,"^19",219,"^C","ret"]]],"^1C",["^ ","~i60",[["^ ","^18",20,"^19",221,"^C","ex"]]],"~i38",["^ ","^1@",[["^ ","^18",0,"^19",222]],"^1A",[["^ ","^18",7,"^19",222,"^C","clojure.test.check.properties/->ErrorResult"]],"^1M",[["^ ","^18",54,"^19",222,"^C","ex"]]],"~i39",["^ ","^1<",[["^ ","^18",107,"^19",224,"^C","result"]]],"~i40",["^ ","^1J",[["^ ","^18",176,"^19",224,"^C","function"]]],"~i41",["^ ","^17",[["^ ","^18",239,"^19",224,"^C","args"]]],"~i43",["^ ","~i0",[["^ ","^18",0,"^19",227],["^ ","^18",46,"^19",238],["^ ","^18",0,"^19",239]],"~i6",[["^ ","^18",0,"^19",238,"^C","clojure.test.check.properties/for-all*"]]],"~i53",["^ ","~i3",[["^ ","^18",100,"^19",238,"^C","args"]],"~i8",[["^ ","^18",105,"^19",238,"^C","function"]]],"~i54",["^ ","~i2",[["^ ","^18",0,"^19",239]],"~i3",[["^ ","^18",7,"^19",239,"^C","clojure.test.check.generators/fmap"]]],"~i55",["^ ","~i3",[["^ ","^18",42,"^19",239]],"~i4",[["^ ","^18",42,"^19",239,"^C","clojure.test.check.properties/apply-gen"]],"~i14",[["^ ","^18",82,"^19",239,"^C","function"]]],"~i56",["^ ","~i3",[["^ ","^18",93,"^19",239]],"~i4",[["^ ","^18",93,"^19",239,"^C","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^1I",[["^ ","^18",139,"^19",239,"^C","clojure.test.check.generators/tuple"]],"~i20",[["^ ","^18",175,"^19",239,"^C","args"]]],"~i58",["^ ","~i0",[["^ ","^18",0,"^19",241],["^ ","^18",45,"^19",241],["^ ","^18",0,"^19",242]],"~i7",[["^ ","^18",0,"^19",241,"^C","clojure.test.check.properties/binding-vars"]]],"~i59",["^ ","~i3",[["^ ","^18",98,"^19",241,"^C","bindings"]]],"^1R",["^ ","~i2",[["^ ","^18",0,"^19",242]],"~i3",[["^ ","^18",7,"^19",242,"^C","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"~i7",[["^ ","^18",51,"^19",242,"^C","cljs.core/first"]],"^17",[["^ ","^18",67,"^19",242],["^ ","^18",117,"^19",242]],"^1[",[["^ ","^18",67,"^19",242,"^C","cljs.core.partition.cljs$core$IFn$_invoke$arity$2"]],"^1F",[["^ ","^18",121,"^19",242,"^C","bindings"]]],"~i62",["^ ","~i0",[["^ ","^18",0,"^19",244],["^ ","^18",45,"^19",244],["^ ","^18",0,"^19",245]],"~i7",[["^ ","^18",0,"^19",244,"^C","clojure.test.check.properties/binding-gens"]]],"~i63",["^ ","~i3",[["^ ","^18",98,"^19",244,"^C","bindings"]]],"~i64",["^ ","~i2",[["^ ","^18",0,"^19",245]],"~i3",[["^ ","^18",7,"^19",245,"^C","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"~i7",[["^ ","^18",51,"^19",245,"^C","cljs.core/second"]],"^1[",[["^ ","^18",68,"^19",245],["^ ","^18",118,"^19",245]],"^1<",[["^ ","^18",68,"^19",245,"^C","cljs.core.partition.cljs$core$IFn$_invoke$arity$2"]],"^1G",[["^ ","^18",122,"^19",245,"^C","bindings"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^M"],[1534380137000],["^[","goog/math/math.js"],[1530991559994,"^N","~$goog.array","~$goog.asserts"],["^[","goog/array/array.js"],[1530991559994,"^N","^2<"],["^[","clojure/test/check/properties.cljc"],[1535586405418,"^N","^M","^I","^K"],["^[","clojure/test/check/generators.cljc"],[1535586405418,"^N","^M","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$goog.string","~$clojure.string"],["^[","goog/debug/error.js"],[1530991559994,"^N"],["^[","clojure/test/check/random/doubles.cljs"],[1535586405418,"^N","^M","~$clojure.test.check.random.longs"],["^[","goog/dom/nodetype.js"],[1530991559994,"^N"],["^[","clojure/test/check/rose_tree.cljc"],[1535586405418,"^N","^M"],["^[","clojure/test/check/random.cljs"],[1535586405418,"^N","^M","~$clojure.test.check.random.doubles","^2A"],["^[","goog/object/object.js"],[1530991559994,"^N"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^[","goog/math/long.js"],[1530991559994,"^N","^2<","~$goog.reflect"],["^[","goog/functions/functions.js"],[1530991559994,"^N"],["^[","goog/structs/map.js"],[1530991559994,"^N","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^[","goog/asserts/asserts.js"],[1530991559994,"^N","~$goog.debug.Error","~$goog.dom.NodeType","^2?"],["^[","goog/uri/uri.js"],[1530991559994,"^N","^2;","^2<","^2?","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^[","goog/base.js"],[1530991559994],["^[","goog/structs/structs.js"],[1530991559994,"^N","^2;","^2G"],["^[","clojure/string.cljs"],[1534380137690,"^N","^M","^2?","~$goog.string.StringBuffer"],["^[","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^N","^M"],["^[","goog/string/string.js"],[1530991559994,"^N"],["^[","goog/reflect/reflect.js"],[1530991559994,"^N"],["^[","goog/string/stringbuffer.js"],[1530991559994,"^N"],["^[","goog/iter/iter.js"],[1530991559994,"^N","^2;","^2<","~$goog.functions","~$goog.math"],["^[","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^2?","^2G","^2;","~$goog.Uri","^2O"],["^[","clojure/test/check/random/longs.cljs"],[1535586405418,"^N","^M","~$clojure.test.check.random.longs.bit-count-impl","^2R"],["^[","goog/math/integer.js"],[1530991559994,"^N"],["^[","goog/uri/utils.js"],[1530991559994,"^N","^2;","^2<","^2?"],["^[","clojure/test/check/results.cljc"],[1535586405418,"^N","^M"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",10,"^8",5,"^9",10,"^:",34],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^I","^K","^K","^L","^K","^M","^M","^N","^N"],"^O",["^B",["^P"]],"~:shadow/js-access-global",["^B",["Error"]],"^Q",null,"~:defs",["^ ","~$ErrorResult",["^ ","~:num-fields",1,"~:protocols",["^B",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$clojure.test.check.results/Result","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^C","~$clojure.test.check.properties/ErrorResult","^6","clojure/test/check/properties.cljc","^:",23,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",14,"~:record",true,"^9",14,"~:tag","~$function","~:skip-protocol-flag",["^B",["^30","^31","^32","^33","^34","^35","^36","^38","^39","^3:","^3;","^3<","^3=","^3>"]]],"~$->ErrorResult",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",14,"^8",12,"^9",14,"^:",23,"^3A",true,"~:factory","~:positional","~:arglists",["^T",["~$quote",["^T",[["~$error"]]]]],"~:doc","Positional factory function for clojure.test.check.properties/ErrorResult."],"^C","~$clojure.test.check.properties/->ErrorResult","~:variadic",false,"^6","clojure/test/check/properties.cljc","^:",23,"~:method-params",["^T",[["^3L"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^8",1,"^3A",true,"^3H","^3I","^7",14,"^9",14,"~:max-fixed-arity",1,"~:fn-var",true,"^3J",["^T",["^3K",["^T",[["^3L"]]]]],"^3M","Positional factory function for clojure.test.check.properties/ErrorResult."],"~$map->ErrorResult",["^ ","^3G",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",14,"^8",12,"^9",14,"^:",23,"^3A",true,"^3H","~:map","^3J",["^T",["^3K",["^T",[["~$G__27046"]]]]],"^3M","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"^C","~$clojure.test.check.properties/map->ErrorResult","^3O",false,"^6","clojure/test/check/properties.cljc","^:",23,"^3P",["^T",[["^3W"]]],"^3Q",null,"^3R",["^T",[null,null]],"^8",1,"^3A",true,"^3H","^3V","^7",14,"^9",14,"^3S",1,"^3T",true,"^3J",["^T",["^3K",["^T",[["^3W"]]]]],"^3M","Factory function for clojure.test.check.properties/ErrorResult, taking a map of keywords to field values."],"~$exception?",["^ ","^3G",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",22,"^8",17,"^9",22,"^:",27,"~:private",true,"^3J",["^T",["^3K",["^T",[["~$x"]]]]]],"^3Z",true,"^C","~$clojure.test.check.properties/exception?","^3O",false,"^6","clojure/test/check/properties.cljc","^:",27,"^3P",["^T",[["~$x"]]],"^3Q",null,"^3R",["^T",[null,null]],"^8",1,"^7",22,"^9",22,"^3S",1,"^3T",true,"^3J",["^T",["^3K",["^T",[["~$x"]]]]]],"~$apply-gen",["^ ","^3G",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",26,"^8",17,"^9",26,"^:",26,"^3Z",true,"^3J",["^T",["^3K",["^T",[["^3D"]]]]]],"^3Z",true,"^C","~$clojure.test.check.properties/apply-gen","^3O",false,"^6","clojure/test/check/properties.cljc","^:",26,"^3P",["^T",[["^3D"]]],"^3Q",null,"^3R",["^T",[null,null]],"^8",1,"^7",26,"^9",26,"^3S",1,"^3T",true,"^3J",["^T",["^3K",["^T",[["^3D"]]]]]],"~$for-all*",["^ ","^3G",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",44,"^8",7,"^9",44,"^:",15,"^3J",["^T",["^3K",["^T",[["~$args","^3D"]]]]],"^3M","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"^C","~$clojure.test.check.properties/for-all*","^3O",false,"^6","clojure/test/check/properties.cljc","^:",15,"^3P",["^T",[["^43","^3D"]]],"^3Q",null,"^3R",["^T",[null,null]],"^8",1,"^7",44,"^9",44,"^3S",2,"^3T",true,"^3J",["^T",["^3K",["^T",[["^43","^3D"]]]]],"^3M","Creates a property (properties are also generators). A property\n  is a generator that generates the result of applying the function\n  under test with the realized arguments. Once realized, the arguments\n  will be applied to `function` with `apply`.\n\n  Example:\n\n  (for-all* [gen/int gen/int] (fn [a b] (>= (+ a b) a)))\n  "],"~$binding-vars",["^ ","^3G",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",59,"^8",8,"^9",59,"^:",20,"^3Z",true,"^3J",["^T",["^3K",["^T",[["~$bindings"]]]]]],"^3Z",true,"^C","~$clojure.test.check.properties/binding-vars","^3O",false,"^6","clojure/test/check/properties.cljc","^:",20,"^3P",["^T",[["^46"]]],"^3Q",null,"^3R",["^T",[null,null]],"^8",1,"^7",59,"^9",59,"^3S",1,"^3T",true,"^3J",["^T",["^3K",["^T",[["^46"]]]]]],"~$binding-gens",["^ ","^3G",null,"^5",["^ ","^6","clojure/test/check/properties.cljc","^7",63,"^8",8,"^9",63,"^:",20,"^3Z",true,"^3J",["^T",["^3K",["^T",[["^46"]]]]]],"^3Z",true,"^C","~$clojure.test.check.properties/binding-gens","^3O",false,"^6","clojure/test/check/properties.cljc","^:",20,"^3P",["^T",[["^46"]]],"^3Q",null,"^3R",["^T",[null,null]],"^8",1,"^7",63,"^9",63,"^3S",1,"^3T",true,"^3J",["^T",["^3K",["^T",[["^46"]]]]]]],"^R",["^ ","^M","^M"],"~:cljs.analyzer/constants",["^ ","^O",["^B",["~:args","~:clojure.test.check.properties/error","~:function","~:result","~:error","^3L"]],"~:order",["^4?","^4<","^3L","^4>","^4=","^4;"]],"^W",["^ ","^P",["^B",[]]],"^X",["^ "],"^Y",["^N","^M","^I","^K"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^29",[["^4C","~:static-fns"],true,["^4C","~:elide-asserts"],false,["^4C","~:optimize-constants"],null,["^4C","~:external-config"],null,["^4C","~:tooling-config"],null,["^4C","~:emit-constants"],null,["^4C","~:infer-externs"],true,["^4C","^14"],null,["~:js-options","~:js-provider"],"^P",["~:mode"],"~:dev",["^4C","~:fn-invoke-direct"],null,["^4C","^16"],"/dev/null"]]]