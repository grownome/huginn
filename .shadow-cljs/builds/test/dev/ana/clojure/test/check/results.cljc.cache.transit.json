["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.results');\ngoog.require('cljs.core');\n\n/**\n * @interface\n */\nclojure.test.check.results.Result = function(){};\n\nclojure.test.check.results.passing_QMARK_ = (function clojure$test$check$results$passing_QMARK_(result){\nif(((!((result == null))) && (!((result.clojure$test$check$results$Result$passing_QMARK_$arity$1 == null))))){\nreturn result.clojure$test$check$results$Result$passing_QMARK_$arity$1(result);\n} else {\nvar x__4243__auto__ = (((result == null))?null:result);\nvar m__4244__auto__ = (clojure.test.check.results.passing_QMARK_[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(result) : m__4244__auto__.call(null,result));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.results.passing_QMARK_[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(result) : m__4244__auto____$1.call(null,result));\n} else {\nthrow cljs.core.missing_protocol(\"Result.passing?\",result);\n}\n}\n}\n});\n\n/**\n * A map of data about the trial.\n */\nclojure.test.check.results.result_data = (function clojure$test$check$results$result_data(result){\nif(((!((result == null))) && (!((result.clojure$test$check$results$Result$result_data$arity$1 == null))))){\nreturn result.clojure$test$check$results$Result$result_data$arity$1(result);\n} else {\nvar x__4243__auto__ = (((result == null))?null:result);\nvar m__4244__auto__ = (clojure.test.check.results.result_data[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(result) : m__4244__auto__.call(null,result));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.results.result_data[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(result) : m__4244__auto____$1.call(null,result));\n} else {\nthrow cljs.core.missing_protocol(\"Result.result-data\",result);\n}\n}\n}\n});\n\ngoog.object.set(clojure.test.check.results.Result,\"_\",true);\n\nvar G__27920_27938 = clojure.test.check.results.passing_QMARK_;\nvar G__27921_27939 = \"_\";\nvar G__27922_27940 = ((function (G__27920_27938,G__27921_27939){\nreturn (function (this$){\nreturn cljs.core.boolean$(this$);\n});})(G__27920_27938,G__27921_27939))\n;\ngoog.object.set(G__27920_27938,G__27921_27939,G__27922_27940);\n\nvar G__27923_27941 = clojure.test.check.results.result_data;\nvar G__27924_27942 = \"_\";\nvar G__27925_27943 = ((function (G__27923_27941,G__27924_27942){\nreturn (function (this$){\nreturn cljs.core.PersistentArrayMap.EMPTY;\n});})(G__27923_27941,G__27924_27942))\n;\ngoog.object.set(G__27923_27941,G__27924_27942,G__27925_27943);\n\ngoog.object.set(clojure.test.check.results.Result,\"null\",true);\n\nvar G__27926_27944 = clojure.test.check.results.passing_QMARK_;\nvar G__27927_27945 = \"null\";\nvar G__27928_27946 = ((function (G__27926_27944,G__27927_27945){\nreturn (function (this$){\nreturn false;\n});})(G__27926_27944,G__27927_27945))\n;\ngoog.object.set(G__27926_27944,G__27927_27945,G__27928_27946);\n\nvar G__27929_27947 = clojure.test.check.results.result_data;\nvar G__27930_27948 = \"null\";\nvar G__27931_27949 = ((function (G__27929_27947,G__27930_27948){\nreturn (function (this$){\nreturn cljs.core.PersistentArrayMap.EMPTY;\n});})(G__27929_27947,G__27930_27948))\n;\ngoog.object.set(G__27929_27947,G__27930_27948,G__27931_27949);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/results.cljc","~:line",12,"~:column",5,"~:end-line",12,"~:end-column",31,"~:author","Gary Fredericks","~:doc","A protocol and helper functions for trial results."],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.results","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^D",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/results.cljc"],"~:compiled-at",1540144999809,"~:resource-name","clojure/test/check/results.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"A protocol and helper functions for trial results.\"}\n    clojure.test.check.results)\n\n(defprotocol Result\n  (passing? [result])\n  (result-data [result] \"A map of data about the trial.\"))\n\n(extend-protocol Result\n  #?(:clj Object :cljs default)\n  (passing? [this] (boolean this))\n  (result-data [this] {})\n\n  nil\n  (passing? [this] false)\n  (result-data [this] {}))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;AAaA,AAAA;AAAA;;;oCAAA,pCAAaM;;AAAb,4CAAA,5CACGC,gGAAUC;AADb,AAAA,GAAA,EAAA,EAAA,WAAA,YAAA,EAAA,CAAA,mEAAA,5FACaA,yBAAAA;AADb,OACaA,gEAAAA;;AADb,IAAAR,kBAAA,EAAA,WAAA,OAAA,jBACaQ,sBAAAA;IADbP,kBAAA,CAAAC,0CAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,wDAAAA,VACaO,oCAAAA;;AADb,IAAAP,sBAAA,CAAAC,0CAAA;AAAA,AAAA,GAAA,EAAA,CAAAD,uBAAA;AAAA,QAAAA,oDAAAA,4DAAAA,VACaO,wCAAAA;;AADb,MAAA,AAAAJ,2BAAA,kBACaI;;;;;;AADb;;;yCAAA,zCAEGC,0FAAaD;AAFhB,AAAA,GAAA,EAAA,EAAA,WAAA,YAAA,EAAA,CAAA,gEAAA,zFAEgBA,yBAAAA;AAFhB,OAEgBA,6DAAAA;;AAFhB,IAAAR,kBAAA,EAAA,WAAA,OAAA,jBAEgBQ,sBAAAA;IAFhBP,kBAAA,CAAAI,uCAAA,AAAAF,YAAAH;AAAA,AAAA,GAAA,EAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,wDAAAA,VAEgBO,oCAAAA;;AAFhB,IAAAP,sBAAA,CAAAI,uCAAA;AAAA,AAAA,GAAA,EAAA,CAAAJ,uBAAA;AAAA,QAAAA,oDAAAA,4DAAAA,VAEgBO,wCAAAA;;AAFhB,MAAA,AAAAJ,2BAAA,qBAEgBI;;;;;;AAFhB,AAIA,AAAA,AAAA,AAAAE,gBAAAJ,kCAAA,IAAA;;AAAA,IAAAK,iBAAAJ;IAAAK,iBAAA;IAAAC,iBAEE;kBAAWU;AAAX,AAAiB,OAACC,mBAAQD;;;AAF5B,AAAA,AAAAb,gBAAAC,eAAAC,eAAAC;;AAAA,IAAAC,iBAAAL;IAAAM,iBAAA;IAAAC,iBAGE;kBAAcO;AAAd,AAAA;;;AAHF,AAAA,AAAAb,gBAAAI,eAAAC,eAAAC;;AAAA,AAAA,AAAAN,gBAAAJ,kCAAA,OAAA;;AAAA,IAAAW,iBAAAV;IAAAW,iBAAA;IAAAC,iBAME;kBAAWI;AAAX,AAAA;;;AANF,AAAA,AAAAb,gBAAAO,eAAAC,eAAAC;;AAAA,IAAAC,iBAAAX;IAAAY,iBAAA;IAAAC,iBAOE;kBAAcC;AAAd,AAAA;;;AAPF,AAAA,AAAAb,gBAAAU,eAAAC,eAAAC","names",["x__4243__auto__","m__4244__auto__","clojure/test.check.results.passing?","goog/typeOf","cljs.core/missing-protocol","clojure/test.check.results.result-data","clojure.test.check.results/Result","clojure.test.check.results/passing?","result","clojure.test.check.results/result-data","goog.object/set","G__27920","G__27921","G__27922","G__27923","G__27924","G__27925","G__27926","G__27927","G__27928","G__27929","G__27930","G__27931","this","cljs.core/boolean"]]],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1534380137000],["^W","goog/math/math.js"],[1530991559994,"^L","~$goog.array","~$goog.asserts"],["^W","goog/array/array.js"],[1530991559994,"^L","^1:"],["^W","goog/debug/error.js"],[1530991559994,"^L"],["^W","goog/dom/nodetype.js"],[1530991559994,"^L"],["^W","goog/object/object.js"],[1530991559994,"^L"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^W","goog/math/long.js"],[1530991559994,"^L","^1:","~$goog.reflect"],["^W","goog/functions/functions.js"],[1530991559994,"^L"],["^W","goog/structs/map.js"],[1530991559994,"^L","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^W","goog/asserts/asserts.js"],[1530991559994,"^L","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^W","goog/uri/uri.js"],[1530991559994,"^L","^19","^1:","^1B","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^W","goog/base.js"],[1530991559994],["^W","goog/structs/structs.js"],[1530991559994,"^L","^19","^1?"],["^W","goog/string/string.js"],[1530991559994,"^L"],["^W","goog/reflect/reflect.js"],[1530991559994,"^L"],["^W","goog/string/stringbuffer.js"],[1530991559994,"^L"],["^W","goog/iter/iter.js"],[1530991559994,"^L","^19","^1:","~$goog.functions","~$goog.math"],["^W","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1B","^1?","^19","~$goog.Uri","~$goog.string.StringBuffer"],["^W","goog/math/integer.js"],[1530991559994,"^L"],["^W","goog/uri/utils.js"],[1530991559994,"^L","^19","^1:","^1B"],["^W","clojure/test/check/results.cljc"],[1535586405418,"^L","^K"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/results.cljc","^7",12,"^8",5,"^9",12,"^:",31,"^;","Gary Fredericks","^<","A protocol and helper functions for trial results."],"^=",["^ ","^>","^?","^@","^A"],"~:shadow/protocol-prefixes",["^D",["clojure$test$check$results$Result$"]],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^D",[]],"^N",null,"~:defs",["^ ","~$Result",["^ ","^5",["^ ","^6","clojure/test/check/results.cljc","^7",14,"^8",14,"^9",14,"^:",20,"^<",null,"~:protocol-symbol",true,"~:jsdoc",["^Q",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$passing?",[["~$result"]],"~$result-data",[["^1W"]]]]],"^1R",true,"^E","~$clojure.test.check.results/Result","^6","clojure/test/check/results.cljc","^:",20,"^8",1,"^7",14,"^1T",["^ ","^1U",["^ ","^1V",[["^1W"]],"^1X",[["^1W"]]]],"~:info",null,"^9",14,"~:tag","~$any","~:impls",["^D",[null,"~$default"]],"^<",null,"^1S",["^Q",["@interface"]]],"^1V",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/results.cljc","^7",15,"^8",4,"^9",15,"^:",12,"~:protocol","^1Y","^<",null,"~:arglists",["^Q",["~$quote",["^Q",[["^1W"]]]]]],"^24","^1Y","^E","~$clojure.test.check.results/passing?","~:variadic",false,"^6","clojure/test/check/results.cljc","^:",12,"~:method-params",["^Q",[["^1W"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"^7",14,"^9",15,"~:max-fixed-arity",1,"~:fn-var",true,"^25",["^Q",["^26",["^Q",[["^1W"]]]]],"^<",null],"^1X",["^ ","^23",null,"^5",["^ ","^6","clojure/test/check/results.cljc","^7",16,"^8",4,"^9",16,"^:",15,"^24","^1Y","^<","A map of data about the trial.","^25",["^Q",["^26",["^Q",[["^1W"]]]]]],"^24","^1Y","^E","~$clojure.test.check.results/result-data","^28",false,"^6","clojure/test/check/results.cljc","^:",15,"^29",["^Q",[["^1W"]]],"^2:",null,"^2;",["^Q",[null,null]],"^8",1,"^7",14,"^9",16,"^2<",1,"^2=",true,"^25",["^Q",["^26",["^Q",[["^1W"]]]]],"^<","A map of data about the trial."]],"^O",["^ ","^K","^K"],"^S",["^ "],"^T",["^ "],"^U",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^17",[["^2A","~:static-fns"],true,["^2A","~:elide-asserts"],false,["^2A","~:optimize-constants"],null,["^2A","~:external-config"],null,["^2A","~:tooling-config"],null,["^2A","~:emit-constants"],null,["^2A","~:infer-externs"],true,["^2A","^10"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^2A","~:fn-invoke-direct"],null,["^2A","~:source-map"],"/dev/null"]]]