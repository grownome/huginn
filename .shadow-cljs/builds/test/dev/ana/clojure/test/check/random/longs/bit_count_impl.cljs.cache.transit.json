["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs.bit_count_impl');\ngoog.require('cljs.core');\nclojure.test.check.random.longs.bit_count_impl.lookup = (function (){var arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(arr[(0)] = (0));\n\nvar n__4408__auto___27410 = (256);\nvar i_27411 = (0);\nwhile(true){\nif((i_27411 < n__4408__auto___27410)){\n(arr[i_27411] = ((arr[(i_27411 >> (1))]) + (i_27411 & (1))));\n\nvar G__27413 = (i_27411 + (1));\ni_27411 = G__27413;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn arr;\n})();\n/**\n * Returns a JS number (not a Long), the number of set bits in the\n *   given Long.\n */\nclojure.test.check.random.longs.bit_count_impl.bit_count = (function clojure$test$check$random$longs$bit_count_impl$bit_count(x){\nvar low = x.low_;\nvar high = x.high_;\nreturn ((((((((clojure.test.check.random.longs.bit_count_impl.lookup[(low & (255))]) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (24)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[(high & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (24)) & (255))]));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs/bit_count_impl.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",48,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count"]],"~:name","~$clojure.test.check.random.longs.bit-count-impl","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^C",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F",["^Q",["~:refer-clojure","~:exclude",["^D"]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs/bit_count_impl.cljs"],"~:compiled-at",1540144999603,"~:resource-name","clojure/test/check/random/longs/bit_count_impl.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.longs.bit-count-impl\n  (:refer-clojure :exclude [bit-count]))\n\n;; Had to put this in a separate namespace because the + doesn't get\n;; inlined if it's called as (core/+ ...). This might change in future\n;; CLJS versions?\n\n(def ^:private lookup\n  (let [arr (make-array 256)]\n    (aset arr 0 0)\n    (dotimes [i 256]\n      (aset arr i (+ (aget arr (bit-shift-right i 1))\n                     (bit-and i 1))))\n    arr))\n\n(defn bit-count\n  \"Returns a JS number (not a Long), the number of set bits in the\n  given Long.\"\n  [x]\n  (let [low (.-low_ x)\n        high (.-high_ x)]\n    (+ (aget lookup (-> low  (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 24) (bit-and 255)))\n       (aget lookup (-> high (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 24) (bit-and 255))))))\n","~:reader-features",["^C",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;AAiBA,AAAeA,wDACb,iwBAAA;AAAA,AAAA,cAAA,VAAUC;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,CAAMF,IAAIE,WAAE,CAAG,CAAMF,IAAI,YAAA,XAAiBE,oBAC3B,WAAA,VAASA;;AAF1B,eAAA,WAAA,VAAUA;;;;AAAV;;;;AAGAF;;AAEJ;;;;2DAAA,3DAAMG,8HAGHC;AAHH,AAIE,IAAMC,MAAI,AAAQD;IACZE,OAAK,AAASF;AADpB,AAEE,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAG,CAAML,uDAAWM,DAAK,OAAA,WACtB,CAAMN,wDAAWM,DAAK,QAAA,TAAoB,gBAAA,YAC1C,CAAMN,wDAAWM,DAAK,QAAA,TAAqB,iBAAA,YAC3C,CAAMN,wDAAWM,DAAK,QAAA,TAAqB,iBAAA,YAC3C,CAAMN,uDAAWO,DAAK,QAAA,YACtB,CAAMP,wDAAWO,DAAK,SAAA,VAAoB,iBAAA,YAC1C,CAAMP,wDAAWO,DAAK,SAAA,VAAqB,kBAAA,YAC3C,CAAMP,wDAAWO,DAAK,SAAA,VAAqB,kBAAA","names",["clojure.test.check.random.longs.bit-count-impl/lookup","arr","n__4408__auto__","i","clojure.test.check.random.longs.bit-count-impl/bit-count","x","low","high"]]],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1534380137000],["^Y","goog/math/math.js"],[1530991559994,"^L","~$goog.array","~$goog.asserts"],["^Y","goog/array/array.js"],[1530991559994,"^L","^1<"],["^Y","goog/debug/error.js"],[1530991559994,"^L"],["^Y","goog/dom/nodetype.js"],[1530991559994,"^L"],["^Y","goog/object/object.js"],[1530991559994,"^L"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^Y","goog/math/long.js"],[1530991559994,"^L","^1<","~$goog.reflect"],["^Y","goog/functions/functions.js"],[1530991559994,"^L"],["^Y","goog/structs/map.js"],[1530991559994,"^L","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Y","goog/asserts/asserts.js"],[1530991559994,"^L","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Y","goog/uri/uri.js"],[1530991559994,"^L","^1;","^1<","^1D","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Y","goog/base.js"],[1530991559994],["^Y","goog/structs/structs.js"],[1530991559994,"^L","^1;","^1A"],["^Y","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^L","^K"],["^Y","goog/string/string.js"],[1530991559994,"^L"],["^Y","goog/reflect/reflect.js"],[1530991559994,"^L"],["^Y","goog/string/stringbuffer.js"],[1530991559994,"^L"],["^Y","goog/iter/iter.js"],[1530991559994,"^L","^1;","^1<","~$goog.functions","~$goog.math"],["^Y","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1D","^1A","^1;","~$goog.Uri","~$goog.string.StringBuffer"],["^Y","goog/math/integer.js"],[1530991559994,"^L"],["^Y","goog/uri/utils.js"],[1530991559994,"^L","^1;","^1<","^1D"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",11,"^8",2,"^9",11,"^:",48,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@"],"^A",null,"^B",["^C",["^D"]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^C",[]],"^N",null,"~:defs",["^ ","~$lookup",["^ ","^E","~$clojure.test.check.random.longs.bit-count-impl/lookup","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",1,"^9",18,"^:",22,"~:private",true,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",16,"^9",18,"^:",22,"^1T",true],"~:tag","~$array"],"^D",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",26,"^8",7,"^9",26,"^:",16,"~:arglists",["^Q",["~$quote",["^Q",[["~$x"]]]]],"~:doc","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"^E","~$clojure.test.check.random.longs.bit-count-impl/bit-count","~:variadic",false,"^6","clojure/test/check/random/longs/bit_count_impl.cljs","^:",16,"~:method-params",["^Q",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"^7",26,"^9",26,"~:max-fixed-arity",1,"~:fn-var",true,"^1X",["^Q",["^1Y",["^Q",[["~$x"]]]]],"^1Z","Returns a JS number (not a Long), the number of set bits in the\n  given Long."]],"^O",["^ ","^K","^K"],"^U",["^ "],"^V",["^ "],"^W",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^19",[["^28","~:static-fns"],true,["^28","~:elide-asserts"],false,["^28","~:optimize-constants"],null,["^28","~:external-config"],null,["^28","~:tooling-config"],null,["^28","~:emit-constants"],null,["^28","~:infer-externs"],true,["^28","^12"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^28","~:fn-invoke-direct"],null,["^28","~:source-map"],"/dev/null"]]]