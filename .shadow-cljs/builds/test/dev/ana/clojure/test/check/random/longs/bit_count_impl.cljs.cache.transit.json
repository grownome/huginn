["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs.bit_count_impl');\ngoog.require('cljs.core');\nclojure.test.check.random.longs.bit_count_impl.lookup = (function (){var arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(arr[(0)] = (0));\n\nvar n__4408__auto___26105 = (256);\nvar i_26107 = (0);\nwhile(true){\nif((i_26107 < n__4408__auto___26105)){\n(arr[i_26107] = ((arr[(i_26107 >> (1))]) + (i_26107 & (1))));\n\nvar G__26109 = (i_26107 + (1));\ni_26107 = G__26109;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn arr;\n})();\n/**\n * Returns a JS number (not a Long), the number of set bits in the\n *   given Long.\n */\nclojure.test.check.random.longs.bit_count_impl.bit_count = (function clojure$test$check$random$longs$bit_count_impl$bit_count(x){\nvar low = x.low_;\nvar high = x.high_;\nreturn ((((((((clojure.test.check.random.longs.bit_count_impl.lookup[(low & (255))]) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (24)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[(high & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (24)) & (255))]));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs/bit_count_impl.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",48,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count"]],"~:name","~$clojure.test.check.random.longs.bit-count-impl","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^C",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F",["^Q",["~:refer-clojure","~:exclude",["^D"]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs/bit_count_impl.cljs"],"~:compiled-at",1537546388929,"~:resource-name","clojure/test/check/random/longs/bit_count_impl.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.longs.bit-count-impl\n  (:refer-clojure :exclude [bit-count]))\n\n;; Had to put this in a separate namespace because the + doesn't get\n;; inlined if it's called as (core/+ ...). This might change in future\n;; CLJS versions?\n\n(def ^:private lookup\n  (let [arr (make-array 256)]\n    (aset arr 0 0)\n    (dotimes [i 256]\n      (aset arr i (+ (aget arr (bit-shift-right i 1))\n                     (bit-and i 1))))\n    arr))\n\n(defn bit-count\n  \"Returns a JS number (not a Long), the number of set bits in the\n  given Long.\"\n  [x]\n  (let [low (.-low_ x)\n        high (.-high_ x)]\n    (+ (aget lookup (-> low  (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 24) (bit-and 255)))\n       (aget lookup (-> high (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 24) (bit-and 255))))))\n","~:reader-features",["^C",["~:cljs"]],"~:source-map",["^ ","~i17",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2]],"~i15",[["^ ","^16",0,"^17",2,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]]],"~i18",["^ ","~i2",[["^ ","^16",56,"^17",2],["^ ","^16",0,"^17",3]],"~i8",[["^ ","^16",73,"^17",2,"^E","arr"]],"~i12",[["^ ","^16",79,"^17",2],["^ ","^16",80,"^17",2],["^ ","^16",85,"^17",2],["^ ","^16",90,"^17",2],["^ ","^16",95,"^17",2],["^ ","^16",100,"^17",2],["^ ","^16",105,"^17",2],["^ ","^16",110,"^17",2],["^ ","^16",115,"^17",2],["^ ","^16",120,"^17",2],["^ ","^16",125,"^17",2],["^ ","^16",130,"^17",2],["^ ","^16",135,"^17",2],["^ ","^16",140,"^17",2],["^ ","^16",145,"^17",2],["^ ","^16",150,"^17",2],["^ ","^16",155,"^17",2],["^ ","^16",160,"^17",2],["^ ","^16",165,"^17",2],["^ ","^16",170,"^17",2],["^ ","^16",175,"^17",2],["^ ","^16",180,"^17",2],["^ ","^16",185,"^17",2],["^ ","^16",190,"^17",2],["^ ","^16",195,"^17",2],["^ ","^16",200,"^17",2],["^ ","^16",205,"^17",2],["^ ","^16",210,"^17",2],["^ ","^16",215,"^17",2],["^ ","^16",220,"^17",2],["^ ","^16",225,"^17",2],["^ ","^16",230,"^17",2],["^ ","^16",235,"^17",2],["^ ","^16",240,"^17",2],["^ ","^16",245,"^17",2],["^ ","^16",250,"^17",2],["^ ","^16",255,"^17",2],["^ ","^16",260,"^17",2],["^ ","^16",265,"^17",2],["^ ","^16",270,"^17",2],["^ ","^16",275,"^17",2],["^ ","^16",280,"^17",2],["^ ","^16",285,"^17",2],["^ ","^16",290,"^17",2],["^ ","^16",295,"^17",2],["^ ","^16",300,"^17",2],["^ ","^16",305,"^17",2],["^ ","^16",310,"^17",2],["^ ","^16",315,"^17",2],["^ ","^16",320,"^17",2],["^ ","^16",325,"^17",2],["^ ","^16",330,"^17",2],["^ ","^16",335,"^17",2],["^ ","^16",340,"^17",2],["^ ","^16",345,"^17",2],["^ ","^16",350,"^17",2],["^ ","^16",355,"^17",2],["^ ","^16",360,"^17",2],["^ ","^16",365,"^17",2],["^ ","^16",370,"^17",2],["^ ","^16",375,"^17",2],["^ ","^16",380,"^17",2],["^ ","^16",385,"^17",2],["^ ","^16",390,"^17",2],["^ ","^16",395,"^17",2],["^ ","^16",400,"^17",2],["^ ","^16",405,"^17",2],["^ ","^16",410,"^17",2],["^ ","^16",415,"^17",2],["^ ","^16",420,"^17",2],["^ ","^16",425,"^17",2],["^ ","^16",430,"^17",2],["^ ","^16",435,"^17",2],["^ ","^16",440,"^17",2],["^ ","^16",445,"^17",2],["^ ","^16",450,"^17",2],["^ ","^16",455,"^17",2],["^ ","^16",460,"^17",2],["^ ","^16",465,"^17",2],["^ ","^16",470,"^17",2],["^ ","^16",475,"^17",2],["^ ","^16",480,"^17",2],["^ ","^16",485,"^17",2],["^ ","^16",490,"^17",2],["^ ","^16",495,"^17",2],["^ ","^16",500,"^17",2],["^ ","^16",505,"^17",2],["^ ","^16",510,"^17",2],["^ ","^16",515,"^17",2],["^ ","^16",520,"^17",2],["^ ","^16",525,"^17",2],["^ ","^16",530,"^17",2],["^ ","^16",535,"^17",2],["^ ","^16",540,"^17",2],["^ ","^16",545,"^17",2],["^ ","^16",550,"^17",2],["^ ","^16",555,"^17",2],["^ ","^16",560,"^17",2],["^ ","^16",565,"^17",2],["^ ","^16",570,"^17",2],["^ ","^16",575,"^17",2],["^ ","^16",580,"^17",2],["^ ","^16",585,"^17",2],["^ ","^16",590,"^17",2],["^ ","^16",595,"^17",2],["^ ","^16",600,"^17",2],["^ ","^16",605,"^17",2],["^ ","^16",610,"^17",2],["^ ","^16",615,"^17",2],["^ ","^16",620,"^17",2],["^ ","^16",625,"^17",2],["^ ","^16",630,"^17",2],["^ ","^16",635,"^17",2],["^ ","^16",640,"^17",2],["^ ","^16",645,"^17",2],["^ ","^16",650,"^17",2],["^ ","^16",655,"^17",2],["^ ","^16",660,"^17",2],["^ ","^16",665,"^17",2],["^ ","^16",670,"^17",2],["^ ","^16",675,"^17",2],["^ ","^16",680,"^17",2],["^ ","^16",685,"^17",2],["^ ","^16",690,"^17",2],["^ ","^16",695,"^17",2],["^ ","^16",700,"^17",2],["^ ","^16",705,"^17",2],["^ ","^16",710,"^17",2],["^ ","^16",715,"^17",2],["^ ","^16",720,"^17",2],["^ ","^16",725,"^17",2],["^ ","^16",730,"^17",2],["^ ","^16",735,"^17",2],["^ ","^16",740,"^17",2],["^ ","^16",745,"^17",2],["^ ","^16",750,"^17",2],["^ ","^16",755,"^17",2],["^ ","^16",760,"^17",2],["^ ","^16",765,"^17",2],["^ ","^16",770,"^17",2],["^ ","^16",775,"^17",2],["^ ","^16",780,"^17",2],["^ ","^16",785,"^17",2],["^ ","^16",790,"^17",2],["^ ","^16",795,"^17",2],["^ ","^16",800,"^17",2],["^ ","^16",805,"^17",2],["^ ","^16",810,"^17",2],["^ ","^16",815,"^17",2],["^ ","^16",820,"^17",2],["^ ","^16",825,"^17",2],["^ ","^16",830,"^17",2],["^ ","^16",835,"^17",2],["^ ","^16",840,"^17",2],["^ ","^16",845,"^17",2],["^ ","^16",850,"^17",2],["^ ","^16",855,"^17",2],["^ ","^16",860,"^17",2],["^ ","^16",865,"^17",2],["^ ","^16",870,"^17",2],["^ ","^16",875,"^17",2],["^ ","^16",880,"^17",2],["^ ","^16",885,"^17",2],["^ ","^16",890,"^17",2],["^ ","^16",895,"^17",2],["^ ","^16",900,"^17",2],["^ ","^16",905,"^17",2],["^ ","^16",910,"^17",2],["^ ","^16",915,"^17",2],["^ ","^16",920,"^17",2],["^ ","^16",925,"^17",2],["^ ","^16",930,"^17",2],["^ ","^16",935,"^17",2],["^ ","^16",940,"^17",2],["^ ","^16",945,"^17",2],["^ ","^16",950,"^17",2],["^ ","^16",955,"^17",2],["^ ","^16",960,"^17",2],["^ ","^16",965,"^17",2],["^ ","^16",970,"^17",2],["^ ","^16",975,"^17",2],["^ ","^16",980,"^17",2],["^ ","^16",985,"^17",2],["^ ","^16",990,"^17",2],["^ ","^16",995,"^17",2],["^ ","^16",1000,"^17",2],["^ ","^16",1005,"^17",2],["^ ","^16",1010,"^17",2],["^ ","^16",1015,"^17",2],["^ ","^16",1020,"^17",2],["^ ","^16",1025,"^17",2],["^ ","^16",1030,"^17",2],["^ ","^16",1035,"^17",2],["^ ","^16",1040,"^17",2],["^ ","^16",1045,"^17",2],["^ ","^16",1050,"^17",2],["^ ","^16",1055,"^17",2],["^ ","^16",1060,"^17",2],["^ ","^16",1065,"^17",2],["^ ","^16",1070,"^17",2],["^ ","^16",1075,"^17",2],["^ ","^16",1080,"^17",2],["^ ","^16",1085,"^17",2],["^ ","^16",1090,"^17",2],["^ ","^16",1095,"^17",2],["^ ","^16",1100,"^17",2],["^ ","^16",1105,"^17",2],["^ ","^16",1110,"^17",2],["^ ","^16",1115,"^17",2],["^ ","^16",1120,"^17",2],["^ ","^16",1125,"^17",2],["^ ","^16",1130,"^17",2],["^ ","^16",1135,"^17",2],["^ ","^16",1140,"^17",2],["^ ","^16",1145,"^17",2],["^ ","^16",1150,"^17",2],["^ ","^16",1155,"^17",2],["^ ","^16",1160,"^17",2],["^ ","^16",1165,"^17",2],["^ ","^16",1170,"^17",2],["^ ","^16",1175,"^17",2],["^ ","^16",1180,"^17",2],["^ ","^16",1185,"^17",2],["^ ","^16",1190,"^17",2],["^ ","^16",1195,"^17",2],["^ ","^16",1200,"^17",2],["^ ","^16",1205,"^17",2],["^ ","^16",1210,"^17",2],["^ ","^16",1215,"^17",2],["^ ","^16",1220,"^17",2],["^ ","^16",1225,"^17",2],["^ ","^16",1230,"^17",2],["^ ","^16",1235,"^17",2],["^ ","^16",1240,"^17",2],["^ ","^16",1245,"^17",2],["^ ","^16",1250,"^17",2],["^ ","^16",1255,"^17",2],["^ ","^16",1260,"^17",2],["^ ","^16",1265,"^17",2],["^ ","^16",1270,"^17",2],["^ ","^16",1275,"^17",2],["^ ","^16",1280,"^17",2],["^ ","^16",1285,"^17",2],["^ ","^16",1290,"^17",2],["^ ","^16",1295,"^17",2],["^ ","^16",1300,"^17",2],["^ ","^16",1305,"^17",2],["^ ","^16",1310,"^17",2],["^ ","^16",1315,"^17",2],["^ ","^16",1320,"^17",2],["^ ","^16",1325,"^17",2],["^ ","^16",1330,"^17",2],["^ ","^16",1335,"^17",2],["^ ","^16",1340,"^17",2],["^ ","^16",1345,"^17",2],["^ ","^16",1350,"^17",2],["^ ","^16",1355,"^17",2]]],"~i19",["^ ","~i4",[["^ ","^16",0,"^17",3],["^ ","^16",5,"^17",3],["^ ","^16",12,"^17",3]],"~i10",[["^ ","^16",1,"^17",3,"^E","arr"]]],"~i20",["^ ","~i4",[["^ ","^16",0,"^17",5],["^ ","^16",4,"^17",5,"^E","n__4408__auto__"],["^ ","^16",28,"^17",5],["^ ","^16",0,"^17",6],["^ ","^16",0,"^17",6],["^ ","^16",14,"^17",6],["^ ","^16",0,"^17",8],["^ ","^16",0,"^17",8],["^ ","^16",3,"^17",8],["^ ","^16",14,"^17",8,"^E","n__4408__auto__"],["^ ","^16",0,"^17",9],["^ ","^16",0,"^17",11],["^ ","^16",15,"^17",11],["^ ","^16",26,"^17",11],["^ ","^16",0,"^17",15]],"~i14",[["^ ","^16",4,"^17",6,"^E","i"],["^ ","^16",4,"^17",8,"^E","i"],["^ ","^16",16,"^17",11,"^E","i"]]],"~i21",["^ ","~i6",[["^ ","^16",0,"^17",9]],"^1:",[["^ ","^16",1,"^17",9,"^E","arr"]],"~i16",[["^ ","^16",5,"^17",9,"^E","i"]],"^19",[["^ ","^16",16,"^17",9]],"^1?",[["^ ","^16",17,"^17",9]],"~i27",[["^ ","^16",18,"^17",9,"^E","arr"]],"~i31",[["^ ","^16",22,"^17",9],["^ ","^16",34,"^17",9]],"~i48",[["^ ","^16",23,"^17",9,"^E","i"]]],"~i22",["^ ","^1?",[["^ ","^16",43,"^17",9],["^ ","^16",54,"^17",9]],"~i30",[["^ ","^16",44,"^17",9,"^E","i"]]],"~i23",["^ ","~i4",[["^ ","^16",0,"^17",19,"^E","arr"]]],"~i25",["^ ","~i0",[["^ ","^16",0,"^17",21],["^ ","^16",59,"^17",25],["^ ","^16",0,"^17",26]],"~i6",[["^ ","^16",0,"^17",25,"^E","clojure.test.check.random.longs.bit-count-impl/bit-count"]]],"~i28",["^ ","~i3",[["^ ","^16",126,"^17",25,"^E","x"]]],"~i29",["^ ","~i2",[["^ ","^16",0,"^17",26],["^ ","^16",0,"^17",28]],"~i8",[["^ ","^16",4,"^17",26,"^E","low"]],"^1:",[["^ ","^16",10,"^17",26]],"^1=",[["^ ","^16",10,"^17",26,"^E","x"]]],"^1E",["^ ","~i8",[["^ ","^16",4,"^17",27,"^E","high"]],"~i13",[["^ ","^16",11,"^17",27]],"^1D",[["^ ","^16",11,"^17",27,"^E","x"]]],"^1B",["^ ","~i4",[["^ ","^16",0,"^17",28],["^ ","^16",8,"^17",28],["^ ","^16",9,"^17",28],["^ ","^16",10,"^17",28],["^ ","^16",11,"^17",28],["^ ","^16",12,"^17",28],["^ ","^16",13,"^17",28]],"~i7",[["^ ","^16",14,"^17",28]],"^1J",[["^ ","^16",15,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"~i24",[["^ ","^16",70,"^17",28,"^E","low"]],"^1I",[["^ ","^16",69,"^17",28],["^ ","^16",76,"^17",28]]],"~i32",["^ ","~i7",[["^ ","^16",87,"^17",28]],"^1J",[["^ ","^16",88,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",144,"^17",28,"^E","low"]],"^1I",[["^ ","^16",143,"^17",28],["^ ","^16",151,"^17",28]],"~i49",[["^ ","^16",142,"^17",28],["^ ","^16",158,"^17",28]]],"~i33",["^ ","~i7",[["^ ","^16",170,"^17",28]],"^1J",[["^ ","^16",171,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",227,"^17",28,"^E","low"]],"^1I",[["^ ","^16",226,"^17",28],["^ ","^16",234,"^17",28]],"~i50",[["^ ","^16",225,"^17",28],["^ ","^16",242,"^17",28]]],"~i34",["^ ","~i7",[["^ ","^16",254,"^17",28]],"^1J",[["^ ","^16",255,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",311,"^17",28,"^E","low"]],"^1I",[["^ ","^16",310,"^17",28],["^ ","^16",318,"^17",28]],"^1O",[["^ ","^16",309,"^17",28],["^ ","^16",326,"^17",28]]],"~i35",["^ ","~i7",[["^ ","^16",338,"^17",28]],"^1J",[["^ ","^16",339,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",394,"^17",28,"^E","high"]],"^1I",[["^ ","^16",393,"^17",28],["^ ","^16",401,"^17",28]]],"~i36",["^ ","~i7",[["^ ","^16",413,"^17",28]],"^1J",[["^ ","^16",414,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",470,"^17",28,"^E","high"]],"^1I",[["^ ","^16",469,"^17",28],["^ ","^16",478,"^17",28]],"^1M",[["^ ","^16",468,"^17",28],["^ ","^16",485,"^17",28]]],"~i37",["^ ","~i7",[["^ ","^16",497,"^17",28]],"^1J",[["^ ","^16",498,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",554,"^17",28,"^E","high"]],"^1I",[["^ ","^16",553,"^17",28],["^ ","^16",562,"^17",28]],"^1O",[["^ ","^16",552,"^17",28],["^ ","^16",570,"^17",28]]],"~i38",["^ ","~i7",[["^ ","^16",582,"^17",28]],"^1J",[["^ ","^16",583,"^17",28,"^E","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1K",[["^ ","^16",639,"^17",28,"^E","high"]],"^1I",[["^ ","^16",638,"^17",28],["^ ","^16",647,"^17",28]],"^1O",[["^ ","^16",637,"^17",28],["^ ","^16",655,"^17",28]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1534380137000],["^Y","goog/math/math.js"],[1530991559994,"^L","~$goog.array","~$goog.asserts"],["^Y","goog/array/array.js"],[1530991559994,"^L","^1Z"],["^Y","goog/debug/error.js"],[1530991559994,"^L"],["^Y","goog/dom/nodetype.js"],[1530991559994,"^L"],["^Y","goog/object/object.js"],[1530991559994,"^L"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^Y","goog/math/long.js"],[1530991559994,"^L","^1Z","~$goog.reflect"],["^Y","goog/functions/functions.js"],[1530991559994,"^L"],["^Y","goog/structs/map.js"],[1530991559994,"^L","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Y","goog/asserts/asserts.js"],[1530991559994,"^L","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Y","goog/uri/uri.js"],[1530991559994,"^L","^1Y","^1Z","^26","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Y","goog/base.js"],[1530991559994],["^Y","goog/structs/structs.js"],[1530991559994,"^L","^1Y","^23"],["^Y","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^L","^K"],["^Y","goog/string/string.js"],[1530991559994,"^L"],["^Y","goog/reflect/reflect.js"],[1530991559994,"^L"],["^Y","goog/string/stringbuffer.js"],[1530991559994,"^L"],["^Y","goog/iter/iter.js"],[1530991559994,"^L","^1Y","^1Z","~$goog.functions","~$goog.math"],["^Y","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^26","^23","^1Y","~$goog.Uri","~$goog.string.StringBuffer"],["^Y","goog/math/integer.js"],[1530991559994,"^L"],["^Y","goog/uri/utils.js"],[1530991559994,"^L","^1Y","^1Z","^26"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",11,"^8",2,"^9",11,"^:",48,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@"],"^A",null,"^B",["^C",["^D"]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^C",[]],"^N",null,"~:defs",["^ ","~$lookup",["^ ","^E","~$clojure.test.check.random.longs.bit-count-impl/lookup","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",1,"^9",18,"^:",22,"~:private",true,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",16,"^9",18,"^:",22,"^2F",true],"~:tag","~$array"],"^D",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",26,"^8",7,"^9",26,"^:",16,"~:arglists",["^Q",["~$quote",["^Q",[["~$x"]]]]],"~:doc","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"^E","~$clojure.test.check.random.longs.bit-count-impl/bit-count","~:variadic",false,"^6","clojure/test/check/random/longs/bit_count_impl.cljs","^:",16,"~:method-params",["^Q",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^Q",[null,null]],"^8",1,"^7",26,"^9",26,"~:max-fixed-arity",1,"~:fn-var",true,"^2J",["^Q",["^2K",["^Q",[["~$x"]]]]],"^2L","Returns a JS number (not a Long), the number of set bits in the\n  given Long."]],"^O",["^ ","^K","^K"],"^U",["^ "],"^V",["^ "],"^W",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1W",[["^2V","~:static-fns"],true,["^2V","~:elide-asserts"],false,["^2V","~:optimize-constants"],null,["^2V","~:external-config"],null,["^2V","~:tooling-config"],null,["^2V","~:emit-constants"],null,["^2V","~:infer-externs"],true,["^2V","^12"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^2V","~:fn-invoke-direct"],null,["^2V","^14"],"/dev/null"]]]