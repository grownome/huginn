["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.doubles');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.longs');\nclojure.test.check.random.doubles.double_unit = (function (){var i = (53);\nvar x = (1);\nwhile(true){\nif((i === (0))){\nreturn x;\n} else {\nvar G__27485 = (i - (1));\nvar G__27486 = (x / (2));\ni = G__27485;\nx = G__27486;\ncontinue;\n}\nbreak;\n}\n})();\nclojure.test.check.random.doubles.big_double_unit = (clojure.test.check.random.doubles.double_unit * (4294967296));\n/**\n * Given a uniformly distributed random long, returns a uniformly\n *   distributed double between 0.0 (inclusive) and 1.0 (exclusive).\n */\nclojure.test.check.random.doubles.rand_long__GT_rand_double = (function clojure$test$check$random$doubles$rand_long__GT_rand_double(long$){\nvar x = clojure.test.check.random.longs.unsigned_bit_shift_right(long$,(11));\nvar low_bits = x.getLowBitsUnsigned();\nvar high_bits = x.getHighBits();\nreturn ((clojure.test.check.random.doubles.double_unit * low_bits) + (clojure.test.check.random.doubles.big_double_unit * high_bits));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/doubles.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",35,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.random.doubles","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.longs","^J","~$longs","^J","~$cljs.core","^L","~$goog","^M"],"~:seen",["^C",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^E",["^S",["^O",["^J","~:as","^K"]]]]],"~:flags",["^ ","^O",["^C",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^J"]],"^G","^E","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/doubles.cljs"],"~:compiled-at",1540144999636,"~:resource-name","clojure/test/check/random/doubles.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.doubles\n  (:require [clojure.test.check.random.longs :as longs]))\n\n(def ^:private double-unit\n  (loop [i 53 x 1]\n    (if (zero? i)\n      x\n      (recur (dec i) (/ x 2)))))\n\n(def ^:private big-double-unit\n  ;; (* double-unit 0x100000000)\n  (* double-unit 4294967296))\n\n(defn rand-long->rand-double\n  \"Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive).\"\n  [long]\n  (let [x (longs/unsigned-bit-shift-right long 11)\n        low-bits (.getLowBitsUnsigned x)\n        high-bits (.getHighBits x)]\n    (+ (* double-unit low-bits)\n       (* big-double-unit high-bits))))\n","~:reader-features",["^C",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";;;AAaA,AAAeA,gDACb,qBAAA,JAAOC;QAAP,JAAYC;;AAAZ,AACE,GAAI,OAAA,NAAOD;AACTC;;AACA,eAAO,KAAA,JAAKD;eAAG,KAAA,JAAGC;;;;;;;;AAExB,AAAeC,oDAEb,iDAAA,hDAAGH;AAEL;;;;8DAAA,9DAAMI,oIAGHC;AAHH,AAIE,IAAMH,IAAE,+DAAA,/DAACI,yDAA+BD;IAClCE,WAAS,AAAqBL;IAC9BM,YAAU,AAAcN;AAF9B,AAGE,QAAG,CAAGF,gDAAYO,YACf,CAAGJ,oDAAgBK","names",["clojure.test.check.random.doubles/double-unit","i","x","clojure.test.check.random.doubles/big-double-unit","clojure.test.check.random.doubles/rand-long->rand-double","long","clojure.test.check.random.longs/unsigned-bit-shift-right","low-bits","high-bits"]]],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1534380137000],["^Z","goog/math/math.js"],[1530991559994,"^M","~$goog.array","~$goog.asserts"],["^Z","goog/array/array.js"],[1530991559994,"^M","^1="],["^Z","goog/debug/error.js"],[1530991559994,"^M"],["^Z","clojure/test/check/random/doubles.cljs"],[1535586405418,"^M","^L","^J"],["^Z","goog/dom/nodetype.js"],[1530991559994,"^M"],["^Z","goog/object/object.js"],[1530991559994,"^M"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^Z","goog/math/long.js"],[1530991559994,"^M","^1=","~$goog.reflect"],["^Z","goog/functions/functions.js"],[1530991559994,"^M"],["^Z","goog/structs/map.js"],[1530991559994,"^M","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^Z","goog/asserts/asserts.js"],[1530991559994,"^M","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^Z","goog/uri/uri.js"],[1530991559994,"^M","^1<","^1=","^1E","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^Z","goog/base.js"],[1530991559994],["^Z","goog/structs/structs.js"],[1530991559994,"^M","^1<","^1B"],["^Z","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^M","^L"],["^Z","goog/string/string.js"],[1530991559994,"^M"],["^Z","goog/reflect/reflect.js"],[1530991559994,"^M"],["^Z","goog/string/stringbuffer.js"],[1530991559994,"^M"],["^Z","goog/iter/iter.js"],[1530991559994,"^M","^1<","^1=","~$goog.functions","~$goog.math"],["^Z","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1E","^1B","^1<","~$goog.Uri","~$goog.string.StringBuffer"],["^Z","clojure/test/check/random/longs.cljs"],[1535586405418,"^M","^L","~$clojure.test.check.random.longs.bit-count-impl","^1M"],["^Z","goog/math/integer.js"],[1530991559994,"^M"],["^Z","goog/uri/utils.js"],[1530991559994,"^M","^1<","^1=","^1E"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",11,"^8",2,"^9",11,"^:",35,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@"],"^A",null,"^B",["^C",[]],"^D","^E","^H",null,"^I",["^ ","^J","^J","^K","^J","^L","^L","^M","^M"],"^N",["^C",["^O"]],"^P",null,"~:defs",["^ ","~$double-unit",["^ ","^D","~$clojure.test.check.random.doubles/double-unit","^6","clojure/test/check/random/doubles.cljs","^7",14,"^8",1,"^9",14,"^:",27,"~:private",true,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",14,"^8",16,"^9",14,"^:",27,"^1V",true],"~:tag","~$number"],"~$big-double-unit",["^ ","^D","~$clojure.test.check.random.doubles/big-double-unit","^6","clojure/test/check/random/doubles.cljs","^7",20,"^8",1,"^9",20,"^:",31,"^1V",true,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",20,"^8",16,"^9",20,"^:",31,"^1V",true],"^1W","^1X"],"~$rand-long->rand-double",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",24,"^8",7,"^9",24,"^:",29,"~:arglists",["^S",["~$quote",["^S",[["~$long"]]]]],"~:doc","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."],"^D","~$clojure.test.check.random.doubles/rand-long->rand-double","~:variadic",false,"^6","clojure/test/check/random/doubles.cljs","^:",29,"~:method-params",["^S",[["^23"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^8",1,"^7",24,"^9",24,"~:max-fixed-arity",1,"~:fn-var",true,"^21",["^S",["^22",["^S",[["^23"]]]]],"^24","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."]],"^Q",["^ ","^L","^L"],"^V",["^ ","^O",["^C",[]]],"^W",["^ "],"^X",["^M","^L","^J"]],"^G","^E","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1:",[["^2>","~:static-fns"],true,["^2>","~:elide-asserts"],false,["^2>","~:optimize-constants"],null,["^2>","~:external-config"],null,["^2>","~:tooling-config"],null,["^2>","~:emit-constants"],null,["^2>","~:infer-externs"],true,["^2>","^13"],null,["~:js-options","~:js-provider"],"^O",["~:mode"],"~:dev",["^2>","~:fn-invoke-direct"],null,["^2>","~:source-map"],"/dev/null"]]]