["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.rose_tree');\ngoog.require('cljs.core');\n\n/**\n* @constructor\n * @implements {cljs.core.IIndexed}\n*/\nclojure.test.check.rose_tree.RoseTree = (function (root,children){\nthis.root = root;\nthis.children = children;\nthis.cljs$lang$protocol_mask$partition0$ = 16;\nthis.cljs$lang$protocol_mask$partition1$ = 0;\n});\nclojure.test.check.rose_tree.RoseTree.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (this$,i){\nvar self__ = this;\nvar this$__$1 = this;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(0))){\nreturn self__.root;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(1))){\nreturn self__.children;\n} else {\nthrow (new Error(\"Index out of bounds in rose tree\"));\n\n}\n}\n});\n\nclojure.test.check.rose_tree.RoseTree.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (this$,i,not_found){\nvar self__ = this;\nvar this$__$1 = this;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(0))){\nreturn self__.root;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(i,(1))){\nreturn self__.children;\n} else {\nreturn not_found;\n\n}\n}\n});\n\nclojure.test.check.rose_tree.RoseTree.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"root\",\"root\",1191874074,null),new cljs.core.Symbol(null,\"children\",\"children\",699969545,null)], null);\n});\n\nclojure.test.check.rose_tree.RoseTree.cljs$lang$type = true;\n\nclojure.test.check.rose_tree.RoseTree.cljs$lang$ctorStr = \"clojure.test.check.rose-tree/RoseTree\";\n\nclojure.test.check.rose_tree.RoseTree.cljs$lang$ctorPrWriter = (function (this__4192__auto__,writer__4193__auto__,opt__4194__auto__){\nreturn cljs.core._write(writer__4193__auto__,\"clojure.test.check.rose-tree/RoseTree\");\n});\n\n/**\n * Positional factory function for clojure.test.check.rose-tree/RoseTree.\n */\nclojure.test.check.rose_tree.__GT_RoseTree = (function clojure$test$check$rose_tree$__GT_RoseTree(root,children){\nreturn (new clojure.test.check.rose_tree.RoseTree(root,children));\n});\n\n/**\n * Returns the root of a Rose tree.\n */\nclojure.test.check.rose_tree.root = (function clojure$test$check$rose_tree$root(rose){\nreturn rose.root;\n});\n/**\n * Returns the children of the root of the Rose tree.\n */\nclojure.test.check.rose_tree.children = (function clojure$test$check$rose_tree$children(rose){\nreturn rose.children;\n});\nclojure.test.check.rose_tree.make_rose = (function clojure$test$check$rose_tree$make_rose(root,children){\nreturn (new clojure.test.check.rose_tree.RoseTree(root,children));\n});\n/**\n * Exclude the nth value in a collection.\n */\nclojure.test.check.rose_tree.exclude_nth = (function clojure$test$check$rose_tree$exclude_nth(n,coll){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar temp__5457__auto__ = cljs.core.seq(coll);\nif(temp__5457__auto__){\nvar s = temp__5457__auto__;\nif((n === (0))){\nreturn cljs.core.rest(coll);\n} else {\nreturn cljs.core.cons(cljs.core.first(s),(function (){var G__26171 = (n - (1));\nvar G__26172 = cljs.core.rest(s);\nreturn (clojure.test.check.rose_tree.exclude_nth.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.exclude_nth.cljs$core$IFn$_invoke$arity$2(G__26171,G__26172) : clojure.test.check.rose_tree.exclude_nth.call(null,G__26171,G__26172));\n})());\n}\n} else {\nreturn null;\n}\n}),null,null));\n});\n/**\n * Turn a tree of trees into a single tree. Does this by concatenating\n *   children of the inner and outer trees.\n */\nclojure.test.check.rose_tree.join = (function clojure$test$check$rose_tree$join(rose){\nvar outer_root = clojure.test.check.rose_tree.root(rose);\nvar outer_children = clojure.test.check.rose_tree.children(rose);\nvar inner_root = clojure.test.check.rose_tree.root(outer_root);\nvar inner_children = clojure.test.check.rose_tree.children(outer_root);\nreturn clojure.test.check.rose_tree.make_rose(inner_root,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.join,outer_children),inner_children));\n});\n/**\n * Puts a value `x` into a Rose tree, with no children.\n */\nclojure.test.check.rose_tree.pure = (function clojure$test$check$rose_tree$pure(x){\nreturn clojure.test.check.rose_tree.make_rose(x,cljs.core.PersistentVector.EMPTY);\n});\n/**\n * Applies functions `f` to all values in the tree.\n */\nclojure.test.check.rose_tree.fmap = (function clojure$test$check$rose_tree$fmap(f,rose){\nreturn clojure.test.check.rose_tree.make_rose((function (){var G__26190 = clojure.test.check.rose_tree.root(rose);\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__26190) : f.call(null,G__26190));\n})(),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26182_SHARP_){\nreturn (clojure.test.check.rose_tree.fmap.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.fmap.cljs$core$IFn$_invoke$arity$2(f,p1__26182_SHARP_) : clojure.test.check.rose_tree.fmap.call(null,f,p1__26182_SHARP_));\n}),clojure.test.check.rose_tree.children(rose)));\n});\n/**\n * Takes a Rose tree (m) and a function (k) from\n *   values to Rose tree and returns a new Rose tree.\n *   This is the monadic bind (>>=) for Rose trees.\n */\nclojure.test.check.rose_tree.bind = (function clojure$test$check$rose_tree$bind(m,k){\nreturn clojure.test.check.rose_tree.join(clojure.test.check.rose_tree.fmap(k,m));\n});\n/**\n * Returns a new Rose tree whose values pass `pred`. Values who\n *   do not pass `pred` have their children cut out as well.\n *   Takes a list of roses, not a rose\n */\nclojure.test.check.rose_tree.filter = (function clojure$test$check$rose_tree$filter(pred,rose){\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26199_SHARP_){\nreturn (clojure.test.check.rose_tree.filter.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.filter.cljs$core$IFn$_invoke$arity$2(pred,p1__26199_SHARP_) : clojure.test.check.rose_tree.filter.call(null,pred,p1__26199_SHARP_));\n}),cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__26200_SHARP_){\nvar G__26203 = clojure.test.check.rose_tree.root(p1__26200_SHARP_);\nreturn (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__26203) : pred.call(null,G__26203));\n}),clojure.test.check.rose_tree.children(rose))));\n});\n/**\n * Create a seq of vectors, where each rose in turn, has been replaced\n *   by its children.\n */\nclojure.test.check.rose_tree.permutations = (function clojure$test$check$rose_tree$permutations(roses){\nvar iter__4324__auto__ = (function clojure$test$check$rose_tree$permutations_$_iter__26206(s__26207){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__26207__$1 = s__26207;\nwhile(true){\nvar temp__5457__auto__ = cljs.core.seq(s__26207__$1);\nif(temp__5457__auto__){\nvar xs__6012__auto__ = temp__5457__auto__;\nvar vec__26212 = cljs.core.first(xs__6012__auto__);\nvar rose = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26212,(0),null);\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26212,(1),null);\nvar iterys__4320__auto__ = ((function (s__26207__$1,vec__26212,rose,index,xs__6012__auto__,temp__5457__auto__){\nreturn (function clojure$test$check$rose_tree$permutations_$_iter__26206_$_iter__26208(s__26209){\nreturn (new cljs.core.LazySeq(null,((function (s__26207__$1,vec__26212,rose,index,xs__6012__auto__,temp__5457__auto__){\nreturn (function (){\nvar s__26209__$1 = s__26209;\nwhile(true){\nvar temp__5457__auto____$1 = cljs.core.seq(s__26209__$1);\nif(temp__5457__auto____$1){\nvar s__26209__$2 = temp__5457__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__26209__$2)){\nvar c__4322__auto__ = cljs.core.chunk_first(s__26209__$2);\nvar size__4323__auto__ = cljs.core.count(c__4322__auto__);\nvar b__26211 = cljs.core.chunk_buffer(size__4323__auto__);\nif((function (){var i__26210 = (0);\nwhile(true){\nif((i__26210 < size__4323__auto__)){\nvar child = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__4322__auto__,i__26210);\ncljs.core.chunk_append(b__26211,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(roses,index,child));\n\nvar G__26230 = (i__26210 + (1));\ni__26210 = G__26230;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__26211),clojure$test$check$rose_tree$permutations_$_iter__26206_$_iter__26208(cljs.core.chunk_rest(s__26209__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__26211),null);\n}\n} else {\nvar child = cljs.core.first(s__26209__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(roses,index,child),clojure$test$check$rose_tree$permutations_$_iter__26206_$_iter__26208(cljs.core.rest(s__26209__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});})(s__26207__$1,vec__26212,rose,index,xs__6012__auto__,temp__5457__auto__))\n,null,null));\n});})(s__26207__$1,vec__26212,rose,index,xs__6012__auto__,temp__5457__auto__))\n;\nvar fs__4321__auto__ = cljs.core.seq(iterys__4320__auto__(clojure.test.check.rose_tree.children(rose)));\nif(fs__4321__auto__){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(fs__4321__auto__,clojure$test$check$rose_tree$permutations_$_iter__26206(cljs.core.rest(s__26207__$1)));\n} else {\nvar G__26233 = cljs.core.rest(s__26207__$1);\ns__26207__$1 = G__26233;\ncontinue;\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__4324__auto__(cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,roses,cljs.core.range.cljs$core$IFn$_invoke$arity$0()));\n});\n/**\n * Apply `f` to the sequence of Rose trees `roses`.\n */\nclojure.test.check.rose_tree.zip = (function clojure$test$check$rose_tree$zip(f,roses){\nreturn clojure.test.check.rose_tree.make_rose(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root,roses)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26234_SHARP_){\nreturn (clojure.test.check.rose_tree.zip.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.zip.cljs$core$IFn$_invoke$arity$2(f,p1__26234_SHARP_) : clojure.test.check.rose_tree.zip.call(null,f,p1__26234_SHARP_));\n}),clojure.test.check.rose_tree.permutations(roses)));\n});\nclojure.test.check.rose_tree.remove = (function clojure$test$check$rose_tree$remove(roses){\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((function (index,_){\nreturn clojure.test.check.rose_tree.exclude_nth(index,roses);\n}),roses),clojure.test.check.rose_tree.permutations(cljs.core.vec(roses)));\n});\n/**\n * Returns an equivalent lazy seq that is not chunked.\n */\nclojure.test.check.rose_tree.unchunk = (function clojure$test$check$rose_tree$unchunk(a_lazy_seq){\nreturn cljs.core.take.cljs$core$IFn$_invoke$arity$2(Infinity,a_lazy_seq);\n});\nclojure.test.check.rose_tree.shrink = (function clojure$test$check$rose_tree$shrink(f,roses){\nif(cljs.core.seq(roses)){\nreturn clojure.test.check.rose_tree.make_rose(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.root,roses)),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__26245_SHARP_){\nreturn (clojure.test.check.rose_tree.shrink.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.shrink.cljs$core$IFn$_invoke$arity$2(f,p1__26245_SHARP_) : clojure.test.check.rose_tree.shrink.call(null,f,p1__26245_SHARP_));\n}),clojure.test.check.rose_tree.remove(clojure.test.check.rose_tree.unchunk(roses))));\n} else {\nreturn clojure.test.check.rose_tree.make_rose((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),cljs.core.PersistentVector.EMPTY);\n}\n});\n/**\n * Returns a sequence of rose trees representing shrinks that discard\n *   half of the vector of roses.\n */\nclojure.test.check.rose_tree.bifurcate = (function clojure$test$check$rose_tree$bifurcate(f,roses){\nif(((4) <= cljs.core.count(roses))){\nvar left_count = cljs.core.quot(cljs.core.count(roses),(2));\nreturn (new cljs.core.LazySeq(null,((function (left_count){\nreturn (function (){\nreturn cljs.core.cons((function (){var G__26276 = f;\nvar G__26277 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(roses,(0),left_count);\nreturn (clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2(G__26276,G__26277) : clojure.test.check.rose_tree.shrink_vector_STAR_.call(null,G__26276,G__26277));\n})(),(new cljs.core.LazySeq(null,((function (left_count){\nreturn (function (){\nreturn (new cljs.core.List(null,(function (){var G__26278 = f;\nvar G__26279 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(roses,left_count);\nreturn (clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2 ? clojure.test.check.rose_tree.shrink_vector_STAR_.cljs$core$IFn$_invoke$arity$2(G__26278,G__26279) : clojure.test.check.rose_tree.shrink_vector_STAR_.call(null,G__26278,G__26279));\n})(),null,(1),null));\n});})(left_count))\n,null,null)));\n});})(left_count))\n,null,null));\n} else {\nreturn null;\n}\n});\nclojure.test.check.rose_tree.shrink_vector_STAR_ = (function clojure$test$check$rose_tree$shrink_vector_STAR_(f,roses){\nvar thing = clojure.test.check.rose_tree.shrink(f,roses);\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(thing),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.bifurcate(f,roses),clojure.test.check.rose_tree.children(thing)));\n});\nclojure.test.check.rose_tree.shrink_vector = (function clojure$test$check$rose_tree$shrink_vector(f,roses){\nif(cljs.core.vector_QMARK_(roses)){\n} else {\nthrow (new Error(\"Assert failed: (vector? roses)\"));\n}\n\nvar rose = clojure.test.check.rose_tree.shrink_vector_STAR_(f,roses);\nvar empty_rose = clojure.test.check.rose_tree.make_rose((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),cljs.core.PersistentVector.EMPTY);\nif(cljs.core.empty_QMARK_(roses)){\nreturn rose;\n} else {\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),cljs.core.cons(empty_rose,clojure.test.check.rose_tree.children(rose)));\n}\n});\n/**\n * Return a new rose-tree whose depth-one children\n *   are the children from depth one _and_ two of the input\n *   tree.\n */\nclojure.test.check.rose_tree.collapse = (function clojure$test$check$rose_tree$collapse(rose){\nreturn clojure.test.check.rose_tree.make_rose(clojure.test.check.rose_tree.root(rose),(function (){var the_children = clojure.test.check.rose_tree.children(rose);\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.collapse,the_children),cljs.core.map.cljs$core$IFn$_invoke$arity$2(clojure.test.check.rose_tree.collapse,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(clojure.test.check.rose_tree.children,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([the_children], 0))));\n})());\n});\nclojure.test.check.rose_tree.make_stack = (function clojure$test$check$rose_tree$make_stack(children,stack){\nvar temp__5455__auto__ = cljs.core.seq(children);\nif(temp__5455__auto__){\nvar s = temp__5455__auto__;\nreturn cljs.core.cons(children,stack);\n} else {\nreturn stack;\n}\n});\n/**\n * Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n *   This assumes that two nodes with the same value have the same children.\n *   While it's not common, it's possible to create trees that don't\n *   fit that description. This function is significantly faster than\n *   brute-force enumerating all of the nodes in a tree, as there will\n *   be many duplicates.\n */\nclojure.test.check.rose_tree.seq = (function clojure$test$check$rose_tree$seq(rose){\nvar helper = (function clojure$test$check$rose_tree$seq_$_helper(rose__$1,seen,stack){\nvar node = clojure.test.check.rose_tree.root(rose__$1);\nvar the_children = clojure.test.check.rose_tree.children(rose__$1);\nreturn (new cljs.core.LazySeq(null,((function (node,the_children){\nreturn (function (){\nif(cljs.core.not((seen.cljs$core$IFn$_invoke$arity$1 ? seen.cljs$core$IFn$_invoke$arity$1(node) : seen.call(null,node)))){\nreturn cljs.core.cons(node,((cljs.core.seq(the_children))?clojure$test$check$rose_tree$seq_$_helper(cljs.core.first(the_children),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen,node),clojure.test.check.rose_tree.make_stack(cljs.core.rest(the_children),stack)):(function (){var temp__5457__auto__ = cljs.core.seq(stack);\nif(temp__5457__auto__){\nvar s = temp__5457__auto__;\nvar f = cljs.core.ffirst(s);\nvar r = cljs.core.rest(cljs.core.first(s));\nreturn clojure$test$check$rose_tree$seq_$_helper(f,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen,node),clojure.test.check.rose_tree.make_stack(r,cljs.core.rest(s)));\n} else {\nreturn null;\n}\n})()));\n} else {\nvar temp__5457__auto__ = cljs.core.seq(stack);\nif(temp__5457__auto__){\nvar s = temp__5457__auto__;\nvar f = cljs.core.ffirst(s);\nvar r = cljs.core.rest(cljs.core.first(s));\nreturn clojure$test$check$rose_tree$seq_$_helper(f,seen,clojure.test.check.rose_tree.make_stack(r,cljs.core.rest(s)));\n} else {\nreturn null;\n}\n}\n});})(node,the_children))\n,null,null));\n});\nreturn helper(rose,cljs.core.PersistentHashSet.EMPTY,cljs.core.List.EMPTY);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A lazy tree data structure used for shrinking.","~:file","clojure/test/check/rose_tree.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",33],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$seq","~$remove","~$filter"]],"~:name","~$clojure.test.check.rose-tree","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^M","~$core","^M","~$goog","^O"],"~:seen",["^C",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^M","^M","^N","^M"],"~:form",["~#list",["~$ns","^H","A lazy tree data structure used for shrinking.",["^U",["~:refer-clojure","~:exclude",["^F","^E","^D"]]],["^U",["^Q",["^M","~:as","^N"]]]]],"~:flags",["^ ","^Q",["^C",[]]],"~:js-deps",["^ "],"~:deps",["^O","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/rose_tree.cljc"],"~:compiled-at",1537546389029,"~:resource-name","clojure/test/check/rose_tree.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check.rose-tree\n  \"A lazy tree data structure used for shrinking.\"\n  (:refer-clojure :exclude [filter remove seq])\n  (:require [#?(:clj clojure.core :cljs cljs.core) :as core]))\n\n(deftype RoseTree [root children]\n  #?(:clj  clojure.lang.Indexed\n     :cljs IIndexed)\n  (#?(:clj nth :cljs -nth) [this i]\n    (cond (= i 0) root\n          (= i 1) children\n          :else (throw #?(:clj  (IndexOutOfBoundsException.)\n                          :cljs (js/Error. \"Index out of bounds in rose tree\")))))\n\n  (#?(:clj nth :cljs -nth) [this i not-found]\n    (cond (= i 0) root\n          (= i 1) children\n          :else not-found)))\n\n(defn root\n  \"Returns the root of a Rose tree.\"\n  {:no-doc true}\n  [^RoseTree rose]\n  (.-root rose))\n\n(defn children\n  \"Returns the children of the root of the Rose tree.\"\n  {:no-doc true}\n  [^RoseTree rose]\n  (.-children rose))\n\n(defn make-rose\n  [root children]\n  (RoseTree. root children))\n\n(defn- exclude-nth\n  \"Exclude the nth value in a collection.\"\n  [n coll]\n  (lazy-seq\n   (when-let [s (core/seq coll)]\n     (if (zero? n)\n       (rest coll)\n       (cons (first s)\n             (exclude-nth (dec n) (rest s)))))))\n\n(defn join\n  \"Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.\"\n  {:no-doc true}\n  [rose]\n  (let [outer-root (root rose)\n        outer-children (children rose)\n        inner-root (root outer-root)\n        inner-children (children outer-root)]\n    (make-rose inner-root (concat (map join outer-children)\n                                  inner-children))))\n\n(defn pure\n  \"Puts a value `x` into a Rose tree, with no children.\"\n  {:no-doc true}\n  [x]\n  (make-rose x []))\n\n(defn fmap\n  \"Applies functions `f` to all values in the tree.\"\n  {:no-doc true}\n  [f rose]\n  (make-rose (f (root rose)) (map #(fmap f %) (children rose))))\n\n(defn bind\n  \"Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.\"\n  {:no-doc true}\n  [m k]\n  (join (fmap k m)))\n\n(defn filter\n  \"Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose\"\n  {:no-doc true}\n  [pred rose]\n  (make-rose (root rose)\n             (map #(filter pred %)\n                  (core/filter #(pred (root %)) (children rose)))))\n\n(defn permutations\n  \"Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.\"\n  {:no-doc true}\n  [roses]\n  (for [[rose index] (map vector roses (range))\n        child (children rose)]\n    (assoc roses index child)))\n\n(defn zip\n  \"Apply `f` to the sequence of Rose trees `roses`.\"\n  {:no-doc true}\n  [f roses]\n  (make-rose\n   (apply f (map root roses))\n   (map #(zip f %)\n        (permutations roses))))\n\n(defn remove\n  {:no-doc true}\n  [roses]\n  (concat\n   (map-indexed (fn [index _] (exclude-nth index roses)) roses)\n   (permutations (vec roses))))\n\n(defn ^:private unchunk\n  \"Returns an equivalent lazy seq that is not chunked.\"\n  [a-lazy-seq]\n  (take\n   #?(:clj Double/POSITIVE_INFINITY :cljs js/Infinity)\n   a-lazy-seq))\n\n(defn shrink\n  {:no-doc true}\n  [f roses]\n  (if (core/seq roses)\n    (make-rose (apply f (map root roses))\n               (map #(shrink f %) (remove (unchunk roses))))\n    (make-rose (f) [])))\n\n(declare shrink-vector*)\n\n(defn ^:private bifurcate\n  \"Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses.\"\n  [f roses]\n  (when (<= 4 (count roses))\n    (let [left-count (quot (count roses) 2)]\n      (lazy-seq\n       (cons\n        (shrink-vector* f (subvec roses 0 left-count))\n        (lazy-seq\n         (list (shrink-vector* f (subvec roses left-count)))))))))\n\n(defn ^:private shrink-vector*\n  [f roses]\n  (let [thing (shrink f roses)]\n    (make-rose (root thing)\n               (concat (bifurcate f roses) (children thing)))))\n\n(defn shrink-vector\n  [f roses]\n  {:pre [(vector? roses)]}\n  (let [rose (shrink-vector* f roses)\n        empty-rose (make-rose (f) [])]\n    (if (empty? roses)\n      rose\n      (make-rose (root rose)\n                 (cons empty-rose (children rose))))))\n\n(defn collapse\n  \"Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.\"\n  {:no-doc true}\n  [rose]\n  (make-rose (root rose)\n             (let [the-children (children rose)]\n               (concat (map collapse the-children)\n                       (map collapse\n                            (mapcat children the-children))))))\n\n(defn- make-stack\n  [children stack]\n  (if-let [s (core/seq children)]\n    (cons children stack)\n    stack))\n\n(defn seq\n  \"Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates.\"\n  [rose]\n  (let [helper (fn helper [rose seen stack]\n                 (let [node (root rose)\n                       the-children (children rose)]\n                   (lazy-seq\n                    (if-not (seen node)\n                      (cons node\n                            (if (core/seq the-children)\n                              (helper (first the-children) (conj seen node) (make-stack (rest the-children) stack))\n                              (when-let [s (core/seq stack)]\n                                (let [f (ffirst s)\n                                      r (rest (first s))]\n                                  (helper f (conj seen node) (make-stack r (rest s)))))))\n                      (when-let [s (core/seq stack)]\n                        (let [f (ffirst s)\n                              r (rest (first s))]\n                          (helper f seen (make-stack r (rest s)))))))))]\n    (helper rose #{} '())))\n","~:reader-features",["^C",["~:cljs"]],"~:source-map",["^ ","~i14",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2],["^ ","^1;",0,"^1<",2],["^ ","^1;",0,"^1<",13],["^ ","^1;",0,"^1<",13],["^ ","^1;",0,"^1<",13],["^ ","^1;",0,"^1<",13],["^ ","^1;",82,"^1<",13],["^ ","^1;",0,"^1<",15],["^ ","^1;",0,"^1<",15],["^ ","^1;",16,"^1<",15],["^ ","^1;",0,"^1<",16],["^ ","^1;",0,"^1<",28],["^ ","^1;",0,"^1<",28],["^ ","^1;",0,"^1<",28],["^ ","^1;",82,"^1<",28],["^ ","^1;",0,"^1<",30],["^ ","^1;",0,"^1<",30],["^ ","^1;",16,"^1<",30],["^ ","^1;",0,"^1<",31],["^ ","^1;",0,"^1<",43],["^ ","^1;",0,"^1<",43],["^ ","^1;",49,"^1<",43],["^ ","^1;",0,"^1<",44],["^ ","^1;",0,"^1<",44],["^ ","^1;",90,"^1<",44],["^ ","^1;",147,"^1<",44],["^ ","^1;",0,"^1<",47],["^ ","^1;",0,"^1<",47],["^ ","^1;",55,"^1<",47],["^ ","^1;",0,"^1<",49],["^ ","^1;",0,"^1<",49],["^ ","^1;",58,"^1<",49],["^ ","^1;",0,"^1<",51],["^ ","^1;",0,"^1<",51],["^ ","^1;",63,"^1<",51],["^ ","^1;",74,"^1<",51,"^G","this__4192__auto__"],["^ ","^1;",93,"^1<",51,"^G","writer__4193__auto__"],["^ ","^1;",114,"^1<",51,"^G","opt__4194__auto__"],["^ ","^1;",0,"^1<",52],["^ ","^1;",0,"^1<",52],["^ ","^1;",7,"^1<",52,"^G","cljs.core/-write"],["^ ","^1;",24,"^1<",52,"^G","writer__4193__auto__"],["^ ","^1;",45,"^1<",52],["^ ","^1;",0,"^1<",55],["^ ","^1;",45,"^1<",58],["^ ","^1;",0,"^1<",59],["^ ","^1;",0,"^1<",59],["^ ","^1;",12,"^1<",59,"^G","clojure.test.check.rose-tree/RoseTree"]],"~i9",[["^ ","^1;",0,"^1<",13,"^G","clojure.test.check.rose-tree/RoseTree"],["^ ","^1;",0,"^1<",28,"^G","clojure.test.check.rose-tree/RoseTree"],["^ ","^1;",0,"^1<",43,"^G","clojure.test.check.rose-tree/RoseTree"],["^ ","^1;",0,"^1<",47,"^G","clojure.test.check.rose-tree/RoseTree"],["^ ","^1;",0,"^1<",49,"^G","clojure.test.check.rose-tree/RoseTree"],["^ ","^1;",0,"^1<",51,"^G","clojure.test.check.rose-tree/RoseTree"],["^ ","^1;",0,"^1<",58,"^G","clojure.test.check.rose-tree/->RoseTree"],["^ ","^1;",0,"^1<",62,"^G","clojure.test.check.rose-tree/RoseTree"]],"~i19",[["^ ","^1;",98,"^1<",58,"^G","root"],["^ ","^1;",50,"^1<",59,"^G","root"]],"~i24",[["^ ","^1;",103,"^1<",58,"^G","children"],["^ ","^1;",55,"^1<",59,"^G","children"]]],"~i17",["^ ","~i28",[["^ ","^1;",93,"^1<",13,"^G","this"],["^ ","^1;",4,"^1<",15,"^G","this"]],"~i33",[["^ ","^1;",99,"^1<",13,"^G","i"]]],"~i18",["^ ","~i4",[["^ ","^1;",0,"^1<",16],["^ ","^1;",0,"^1<",19],["^ ","^1;",0,"^1<",22]],"~i10",[["^ ","^1;",3,"^1<",16],["^ ","^1;",50,"^1<",16]],"~i11",[["^ ","^1;",3,"^1<",16,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"~i13",[["^ ","^1;",48,"^1<",16,"^G","i"]],"^1B",[["^ ","^1;",0,"^1<",17,"^G","root"]]],"^1=",["^ ","^1C",[["^ ","^1;",3,"^1<",19],["^ ","^1;",50,"^1<",19]],"^1D",[["^ ","^1;",3,"^1<",19,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1E",[["^ ","^1;",48,"^1<",19,"^G","i"]],"^1B",[["^ ","^1;",0,"^1<",20,"^G","children"]]],"~i20",["^ ","~i16",[["^ ","^1;",0,"^1<",22]]],"~i21",["^ ","~i32",[["^ ","^1;",6,"^1<",22],["^ ","^1;",11,"^1<",22,"^G","js/Error"],["^ ","^1;",17,"^1<",22]]],"~i23",["^ ","^1@",[["^ ","^1;",93,"^1<",28,"^G","this"],["^ ","^1;",4,"^1<",30,"^G","this"]],"^1A",[["^ ","^1;",99,"^1<",28,"^G","i"]],"~i35",[["^ ","^1;",101,"^1<",28,"^G","not-found"]]],"^1>",["^ ","~i4",[["^ ","^1;",0,"^1<",31],["^ ","^1;",0,"^1<",34],["^ ","^1;",0,"^1<",37]],"^1C",[["^ ","^1;",3,"^1<",31],["^ ","^1;",50,"^1<",31]],"^1D",[["^ ","^1;",3,"^1<",31,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1E",[["^ ","^1;",48,"^1<",31,"^G","i"]],"^1B",[["^ ","^1;",0,"^1<",32,"^G","root"]]],"~i25",["^ ","^1C",[["^ ","^1;",3,"^1<",34],["^ ","^1;",50,"^1<",34]],"^1D",[["^ ","^1;",3,"^1<",34,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1E",[["^ ","^1;",48,"^1<",34,"^G","i"]],"^1B",[["^ ","^1;",0,"^1<",35,"^G","children"]]],"~i26",["^ ","^1G",[["^ ","^1;",0,"^1<",37,"^G","not-found"]]],"^1@",["^ ","~i0",[["^ ","^1;",0,"^1<",62],["^ ","^1;",36,"^1<",65],["^ ","^1;",0,"^1<",66]],"~i6",[["^ ","^1;",0,"^1<",65,"^G","clojure.test.check.rose-tree/root"]]],"~i31",["^ ","^1E",[["^ ","^1;",80,"^1<",65,"^G","rose"]]],"^1I",["^ ","~i2",[["^ ","^1;",0,"^1<",66]],"^1C",[["^ ","^1;",7,"^1<",66,"^G","rose"]]],"~i34",["^ ","~i0",[["^ ","^1;",0,"^1<",68],["^ ","^1;",40,"^1<",71],["^ ","^1;",0,"^1<",72]],"~i6",[["^ ","^1;",0,"^1<",71,"^G","clojure.test.check.rose-tree/children"]]],"~i37",["^ ","^1E",[["^ ","^1;",88,"^1<",71,"^G","rose"]]],"~i38",["^ ","~i2",[["^ ","^1;",0,"^1<",72]],"^1:",[["^ ","^1;",7,"^1<",72,"^G","rose"]]],"~i40",["^ ","~i0",[["^ ","^1;",0,"^1<",74],["^ ","^1;",41,"^1<",74],["^ ","^1;",0,"^1<",75]],"~i6",[["^ ","^1;",0,"^1<",74,"^G","clojure.test.check.rose-tree/make-rose"]]],"~i41",["^ ","~i3",[["^ ","^1;",90,"^1<",74,"^G","root"]],"~i8",[["^ ","^1;",95,"^1<",74,"^G","children"]]],"~i42",["^ ","~i2",[["^ ","^1;",0,"^1<",75],["^ ","^1;",12,"^1<",75,"^G","clojure.test.check.rose-tree/RoseTree"]],"^1E",[["^ ","^1;",50,"^1<",75,"^G","root"]],"^1B",[["^ ","^1;",55,"^1<",75,"^G","children"]]],"~i44",["^ ","~i0",[["^ ","^1;",0,"^1<",77],["^ ","^1;",43,"^1<",80],["^ ","^1;",0,"^1<",81]],"~i7",[["^ ","^1;",0,"^1<",80,"^G","clojure.test.check.rose-tree/exclude-nth"]]],"~i46",["^ ","~i3",[["^ ","^1;",94,"^1<",80,"^G","n"]],"~i5",[["^ ","^1;",96,"^1<",80,"^G","coll"]]],"~i47",["^ ","~i2",[["^ ","^1;",0,"^1<",81],["^ ","^1;",12,"^1<",81,"^G","cljs.core/LazySeq"],["^ ","^1;",30,"^1<",81],["^ ","^1;",35,"^1<",81],["^ ","^1;",0,"^1<",82],["^ ","^1;",3,"^1<",96],["^ ","^1;",8,"^1<",96]]],"~i48",["^ ","~i3",[["^ ","^1;",0,"^1<",82],["^ ","^1;",4,"^1<",82,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",83],["^ ","^1;",0,"^1<",83],["^ ","^1;",3,"^1<",83,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",84],["^ ","^1;",0,"^1<",84],["^ ","^1;",8,"^1<",84,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",85],["^ ","^1;",0,"^1<",94]],"^1:",[["^ ","^1;",4,"^1<",84,"^G","s"]],"^1G",[["^ ","^1;",25,"^1<",82]],"^1?",[["^ ","^1;",25,"^1<",82,"^G","cljs.core/seq"]],"^1M",[["^ ","^1;",39,"^1<",82,"^G","coll"]]],"~i49",["^ ","~i5",[["^ ","^1;",0,"^1<",85]],"~i9",[["^ ","^1;",3,"^1<",85],["^ ","^1;",10,"^1<",85]],"^1G",[["^ ","^1;",4,"^1<",85,"^G","n"]]],"~i50",["^ ","~i7",[["^ ","^1;",0,"^1<",86]],"~i8",[["^ ","^1;",7,"^1<",86,"^G","cljs.core/rest"]],"^1E",[["^ ","^1;",22,"^1<",86,"^G","coll"]]],"~i51",["^ ","~i7",[["^ ","^1;",0,"^1<",88]],"~i8",[["^ ","^1;",7,"^1<",88,"^G","cljs.core/cons"]],"^1E",[["^ ","^1;",22,"^1<",88]],"^1:",[["^ ","^1;",22,"^1<",88,"^G","cljs.core/first"]],"^1F",[["^ ","^1;",38,"^1<",88,"^G","s"]]],"~i52",["^ ","^1E",[["^ ","^1;",41,"^1<",88],["^ ","^1;",58,"^1<",88,"^G","G__26171"],["^ ","^1;",4,"^1<",89,"^G","G__26172"],["^ ","^1;",0,"^1<",90],["^ ","^1;",0,"^1<",90],["^ ","^1;",152,"^1<",90,"^G","G__26171"],["^ ","^1;",161,"^1<",90,"^G","G__26172"],["^ ","^1;",224,"^1<",90,"^G","G__26171"],["^ ","^1;",233,"^1<",90,"^G","G__26172"]],"^1:",[["^ ","^1;",8,"^1<",90,"^G","clojure.test.check.rose-tree/exclude-nth"],["^ ","^1;",81,"^1<",90,"^G","clojure.test.check.rose-tree/exclude-nth"],["^ ","^1;",173,"^1<",90,"^G","clojure.test.check.rose-tree/exclude-nth"]],"^1M",[["^ ","^1;",69,"^1<",88],["^ ","^1;",74,"^1<",88]],"^1N",[["^ ","^1;",70,"^1<",88,"^G","n"]],"^1O",[["^ ","^1;",15,"^1<",89]],"^1K",[["^ ","^1;",15,"^1<",89,"^G","cljs.core/rest"]],"^1R",[["^ ","^1;",30,"^1<",89,"^G","s"]]],"~i54",["^ ","~i0",[["^ ","^1;",0,"^1<",98],["^ ","^1;",36,"^1<",102],["^ ","^1;",0,"^1<",103]],"~i6",[["^ ","^1;",0,"^1<",102,"^G","clojure.test.check.rose-tree/join"]]],"~i58",["^ ","~i3",[["^ ","^1;",80,"^1<",102,"^G","rose"]]],"~i59",["^ ","~i2",[["^ ","^1;",0,"^1<",103],["^ ","^1;",0,"^1<",107]],"~i8",[["^ ","^1;",4,"^1<",103,"^G","outer-root"]],"^1=",[["^ ","^1;",17,"^1<",103]],"^1F",[["^ ","^1;",17,"^1<",103,"^G","clojure.test.check.rose-tree/root"]],"^1L",[["^ ","^1;",51,"^1<",103,"^G","rose"]]],"~i60",["^ ","~i8",[["^ ","^1;",4,"^1<",104,"^G","outer-children"]],"^1J",[["^ ","^1;",21,"^1<",104]],"^1>",[["^ ","^1;",21,"^1<",104,"^G","clojure.test.check.rose-tree/children"]],"^1A",[["^ ","^1;",59,"^1<",104,"^G","rose"]]],"~i61",["^ ","~i8",[["^ ","^1;",4,"^1<",105,"^G","inner-root"]],"^1=",[["^ ","^1;",17,"^1<",105]],"^1F",[["^ ","^1;",17,"^1<",105,"^G","clojure.test.check.rose-tree/root"]],"^1L",[["^ ","^1;",51,"^1<",105,"^G","outer-root"]]],"~i62",["^ ","~i8",[["^ ","^1;",4,"^1<",106,"^G","inner-children"]],"^1J",[["^ ","^1;",21,"^1<",106]],"^1>",[["^ ","^1;",21,"^1<",106,"^G","clojure.test.check.rose-tree/children"]],"^1A",[["^ ","^1;",59,"^1<",106,"^G","outer-root"]]],"~i63",["^ ","~i4",[["^ ","^1;",0,"^1<",107]],"~i5",[["^ ","^1;",7,"^1<",107,"^G","clojure.test.check.rose-tree/make-rose"]],"~i15",[["^ ","^1;",46,"^1<",107,"^G","inner-root"]],"^1M",[["^ ","^1;",57,"^1<",107]],"~i27",[["^ ","^1;",57,"^1<",107,"^G","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"]],"^1O",[["^ ","^1;",104,"^1<",107]],"^1K",[["^ ","^1;",104,"^1<",107,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"~i39",[["^ ","^1;",148,"^1<",107,"^G","clojure.test.check.rose-tree/join"]],"^1U",[["^ ","^1;",182,"^1<",107,"^G","outer-children"]]],"~i64",["^ ","^1O",[["^ ","^1;",198,"^1<",107,"^G","inner-children"]]],"~i66",["^ ","~i0",[["^ ","^1;",0,"^1<",109],["^ ","^1;",36,"^1<",112],["^ ","^1;",0,"^1<",113]],"~i6",[["^ ","^1;",0,"^1<",112,"^G","clojure.test.check.rose-tree/pure"]]],"~i69",["^ ","~i3",[["^ ","^1;",80,"^1<",112,"^G","x"]]],"~i70",["^ ","~i2",[["^ ","^1;",0,"^1<",113],["^ ","^1;",48,"^1<",113]],"~i3",[["^ ","^1;",7,"^1<",113,"^G","clojure.test.check.rose-tree/make-rose"]],"^1E",[["^ ","^1;",46,"^1<",113,"^G","x"]]],"~i72",["^ ","~i0",[["^ ","^1;",0,"^1<",115],["^ ","^1;",36,"^1<",118],["^ ","^1;",0,"^1<",119]],"~i6",[["^ ","^1;",0,"^1<",118,"^G","clojure.test.check.rose-tree/fmap"]]],"~i75",["^ ","~i3",[["^ ","^1;",80,"^1<",118,"^G","f"]],"~i5",[["^ ","^1;",82,"^1<",118,"^G","rose"]]],"~i76",["^ ","~i2",[["^ ","^1;",0,"^1<",119]],"~i3",[["^ ","^1;",7,"^1<",119,"^G","clojure.test.check.rose-tree/make-rose"]],"^1E",[["^ ","^1;",46,"^1<",119],["^ ","^1;",63,"^1<",119,"^G","G__26190"],["^ ","^1;",0,"^1<",120],["^ ","^1;",0,"^1<",120],["^ ","^1;",74,"^1<",120,"^G","G__26190"],["^ ","^1;",98,"^1<",120,"^G","G__26190"]],"^1:",[["^ ","^1;",8,"^1<",120,"^G","f"],["^ ","^1;",42,"^1<",120,"^G","f"],["^ ","^1;",86,"^1<",120,"^G","f"]],"^1G",[["^ ","^1;",74,"^1<",119]],"^1?",[["^ ","^1;",74,"^1<",119,"^G","clojure.test.check.rose-tree/root"]],"~i22",[["^ ","^1;",108,"^1<",119,"^G","rose"]],"~i29",[["^ ","^1;",5,"^1<",121],["^ ","^1;",49,"^1<",121],["^ ","^1;",60,"^1<",121,"^G","p1__26182#"],["^ ","^1;",0,"^1<",122]],"~i30",[["^ ","^1;",5,"^1<",121,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1K",[["^ ","^1;",0,"^1<",122],["^ ","^1;",140,"^1<",122,"^G","p1__26182#"],["^ ","^1;",206,"^1<",122,"^G","p1__26182#"]],"~i36",[["^ ","^1;",8,"^1<",122,"^G","clojure.test.check.rose-tree/fmap"],["^ ","^1;",74,"^1<",122,"^G","clojure.test.check.rose-tree/fmap"],["^ ","^1;",160,"^1<",122,"^G","clojure.test.check.rose-tree/fmap"]],"^1S",[["^ ","^1;",138,"^1<",122,"^G","f"],["^ ","^1;",204,"^1<",122,"^G","f"]],"^1V",[["^ ","^1;",3,"^1<",123]],"^1W",[["^ ","^1;",3,"^1<",123,"^G","clojure.test.check.rose-tree/children"]],"~i56",[["^ ","^1;",41,"^1<",123,"^G","rose"]]],"~i78",["^ ","~i0",[["^ ","^1;",0,"^1<",125],["^ ","^1;",36,"^1<",130],["^ ","^1;",0,"^1<",131]],"~i6",[["^ ","^1;",0,"^1<",130,"^G","clojure.test.check.rose-tree/bind"]]],"~i83",["^ ","~i3",[["^ ","^1;",80,"^1<",130,"^G","m"]],"~i5",[["^ ","^1;",82,"^1<",130,"^G","k"]]],"~i84",["^ ","~i2",[["^ ","^1;",0,"^1<",131]],"~i3",[["^ ","^1;",7,"^1<",131,"^G","clojure.test.check.rose-tree/join"]],"~i8",[["^ ","^1;",41,"^1<",131]],"~i9",[["^ ","^1;",41,"^1<",131,"^G","clojure.test.check.rose-tree/fmap"]],"^1:",[["^ ","^1;",75,"^1<",131,"^G","k"]],"^1G",[["^ ","^1;",77,"^1<",131,"^G","m"]]],"~i86",["^ ","~i0",[["^ ","^1;",0,"^1<",133],["^ ","^1;",38,"^1<",138],["^ ","^1;",0,"^1<",139]],"~i6",[["^ ","^1;",0,"^1<",138,"^G","clojure.test.check.rose-tree/filter"]]],"~i91",["^ ","~i3",[["^ ","^1;",84,"^1<",138,"^G","pred"]],"~i8",[["^ ","^1;",89,"^1<",138,"^G","rose"]]],"~i92",["^ ","~i2",[["^ ","^1;",0,"^1<",139]],"~i3",[["^ ","^1;",7,"^1<",139,"^G","clojure.test.check.rose-tree/make-rose"]],"^1E",[["^ ","^1;",46,"^1<",139]],"^1:",[["^ ","^1;",46,"^1<",139,"^G","clojure.test.check.rose-tree/root"]],"^1=",[["^ ","^1;",80,"^1<",139,"^G","rose"]]],"~i93",["^ ","^1E",[["^ ","^1;",86,"^1<",139],["^ ","^1;",130,"^1<",139],["^ ","^1;",141,"^1<",139,"^G","p1__26199#"],["^ ","^1;",0,"^1<",140]],"^1:",[["^ ","^1;",86,"^1<",139,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1=",[["^ ","^1;",0,"^1<",140],["^ ","^1;",147,"^1<",140,"^G","p1__26199#"],["^ ","^1;",218,"^1<",140,"^G","p1__26199#"]],"^1F",[["^ ","^1;",8,"^1<",140,"^G","clojure.test.check.rose-tree/filter"],["^ ","^1;",76,"^1<",140,"^G","clojure.test.check.rose-tree/filter"],["^ ","^1;",167,"^1<",140,"^G","clojure.test.check.rose-tree/filter"]],"^29",[["^ ","^1;",142,"^1<",140,"^G","pred"],["^ ","^1;",213,"^1<",140,"^G","pred"]]],"~i94",["^ ","^1B",[["^ ","^1;",3,"^1<",141],["^ ","^1;",50,"^1<",141],["^ ","^1;",61,"^1<",141,"^G","p1__26200#"],["^ ","^1;",0,"^1<",142]],"^1=",[["^ ","^1;",3,"^1<",141,"^G","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^1I",[["^ ","^1;",0,"^1<",142],["^ ","^1;",4,"^1<",142,"^G","G__26203"],["^ ","^1;",0,"^1<",143],["^ ","^1;",0,"^1<",143],["^ ","^1;",80,"^1<",143,"^G","G__26203"],["^ ","^1;",107,"^1<",143,"^G","G__26203"]],"^1A",[["^ ","^1;",8,"^1<",143,"^G","pred"],["^ ","^1;",45,"^1<",143,"^G","pred"],["^ ","^1;",92,"^1<",143,"^G","pred"]],"^1Q",[["^ ","^1;",15,"^1<",142],["^ ","^1;",49,"^1<",142,"^G","p1__26200#"]],"^2:",[["^ ","^1;",15,"^1<",142,"^G","clojure.test.check.rose-tree/root"]],"^1X",[["^ ","^1;",3,"^1<",144]],"^1Y",[["^ ","^1;",3,"^1<",144,"^G","clojure.test.check.rose-tree/children"]],"^22",[["^ ","^1;",41,"^1<",144,"^G","rose"]]],"~i96",["^ ","~i0",[["^ ","^1;",0,"^1<",146],["^ ","^1;",44,"^1<",150],["^ ","^1;",0,"^1<",151]],"~i6",[["^ ","^1;",0,"^1<",150,"^G","clojure.test.check.rose-tree/permutations"]]],"~i100",["^ ","~i3",[["^ ","^1;",96,"^1<",150,"^G","roses"]]],"~i101",["^ ","~i2",[["^ ","^1;",0,"^1<",151],["^ ","^1;",4,"^1<",151,"^G","iter__4324__auto__"],["^ ","^1;",25,"^1<",151],["^ ","^1;",91,"^1<",151,"^G","s__26207"],["^ ","^1;",0,"^1<",152],["^ ","^1;",0,"^1<",152],["^ ","^1;",12,"^1<",152,"^G","cljs.core/LazySeq"],["^ ","^1;",30,"^1<",152],["^ ","^1;",35,"^1<",152],["^ ","^1;",0,"^1<",153],["^ ","^1;",0,"^1<",153],["^ ","^1;",4,"^1<",153,"^G","s__26207"],["^ ","^1;",19,"^1<",153,"^G","s__26207"],["^ ","^1;",0,"^1<",155],["^ ","^1;",0,"^1<",155],["^ ","^1;",4,"^1<",155,"^G","temp__5457__auto__"],["^ ","^1;",25,"^1<",155],["^ ","^1;",25,"^1<",155,"^G","cljs.core/seq"],["^ ","^1;",39,"^1<",155,"^G","s__26207"],["^ ","^1;",0,"^1<",156],["^ ","^1;",0,"^1<",156],["^ ","^1;",3,"^1<",156,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",157],["^ ","^1;",0,"^1<",157],["^ ","^1;",4,"^1<",157,"^G","xs__6012__auto__"],["^ ","^1;",23,"^1<",157,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",158],["^ ","^1;",0,"^1<",158],["^ ","^1;",4,"^1<",158,"^G","vec__26212"],["^ ","^1;",17,"^1<",158],["^ ","^1;",17,"^1<",158,"^G","cljs.core/first"],["^ ","^1;",33,"^1<",158,"^G","xs__6012__auto__"],["^ ","^1;",11,"^1<",159],["^ ","^1;",11,"^1<",159,"^G","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1;",55,"^1<",159,"^G","vec__26212"],["^ ","^1;",66,"^1<",159],["^ ","^1;",70,"^1<",159],["^ ","^1;",12,"^1<",160],["^ ","^1;",12,"^1<",160,"^G","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1;",56,"^1<",160,"^G","vec__26212"],["^ ","^1;",67,"^1<",160],["^ ","^1;",71,"^1<",160],["^ ","^1;",0,"^1<",161],["^ ","^1;",0,"^1<",161],["^ ","^1;",4,"^1<",161,"^G","iterys__4320__auto__"],["^ ","^1;",27,"^1<",161],["^ ","^1;",87,"^1<",162,"^G","s__26209"],["^ ","^1;",0,"^1<",163],["^ ","^1;",0,"^1<",163],["^ ","^1;",12,"^1<",163,"^G","cljs.core/LazySeq"],["^ ","^1;",30,"^1<",163],["^ ","^1;",35,"^1<",163],["^ ","^1;",0,"^1<",165],["^ ","^1;",0,"^1<",165],["^ ","^1;",4,"^1<",165,"^G","s__26209"],["^ ","^1;",19,"^1<",165,"^G","s__26209"],["^ ","^1;",0,"^1<",167],["^ ","^1;",0,"^1<",167],["^ ","^1;",4,"^1<",167,"^G","temp__5457__auto__"],["^ ","^1;",29,"^1<",167],["^ ","^1;",29,"^1<",167,"^G","cljs.core/seq"],["^ ","^1;",43,"^1<",167,"^G","s__26209"],["^ ","^1;",0,"^1<",168],["^ ","^1;",0,"^1<",168],["^ ","^1;",3,"^1<",168,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",169],["^ ","^1;",0,"^1<",169],["^ ","^1;",4,"^1<",169,"^G","s__26209"],["^ ","^1;",19,"^1<",169,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",170],["^ ","^1;",0,"^1<",170],["^ ","^1;",3,"^1<",170],["^ ","^1;",3,"^1<",170,"^G","cljs.core/chunked-seq?"],["^ ","^1;",32,"^1<",170,"^G","s__26209"],["^ ","^1;",0,"^1<",171],["^ ","^1;",4,"^1<",171,"^G","c__4322__auto__"],["^ ","^1;",4,"^1<",172,"^G","size__4323__auto__"],["^ ","^1;",25,"^1<",172],["^ ","^1;",25,"^1<",172,"^G","cljs.core/count"],["^ ","^1;",41,"^1<",172,"^G","c__4322__auto__"],["^ ","^1;",4,"^1<",173,"^G","b__26211"],["^ ","^1;",15,"^1<",173],["^ ","^1;",15,"^1<",173,"^G","cljs.core/chunk-buffer"],["^ ","^1;",38,"^1<",173,"^G","size__4323__auto__"],["^ ","^1;",0,"^1<",174],["^ ","^1;",0,"^1<",174],["^ ","^1;",3,"^1<",174],["^ ","^1;",3,"^1<",174],["^ ","^1;",20,"^1<",174,"^G","i__26210"],["^ ","^1;",31,"^1<",174],["^ ","^1;",0,"^1<",176],["^ ","^1;",0,"^1<",176],["^ ","^1;",3,"^1<",176],["^ ","^1;",4,"^1<",176,"^G","i__26210"],["^ ","^1;",15,"^1<",176,"^G","size__4323__auto__"],["^ ","^1;",0,"^1<",177],["^ ","^1;",12,"^1<",177],["^ ","^1;",12,"^1<",177,"^G","cljs.core._nth.cljs$core$IFn$_invoke$arity$2"],["^ ","^1;",57,"^1<",177,"^G","c__4322__auto__"],["^ ","^1;",73,"^1<",177,"^G","i__26210"],["^ ","^1;",0,"^1<",178],["^ ","^1;",0,"^1<",178],["^ ","^1;",0,"^1<",178],["^ ","^1;",0,"^1<",178,"^G","cljs.core/chunk-append"],["^ ","^1;",23,"^1<",178,"^G","b__26211"],["^ ","^1;",0,"^1<",180],["^ ","^1;",15,"^1<",180],["^ ","^1;",16,"^1<",180,"^G","i__26210"],["^ ","^1;",27,"^1<",180],["^ ","^1;",0,"^1<",184],["^ ","^1;",0,"^1<",189],["^ ","^1;",7,"^1<",189,"^G","cljs.core/chunk-cons"],["^ ","^1;",28,"^1<",189],["^ ","^1;",28,"^1<",189,"^G","cljs.core/chunk"],["^ ","^1;",44,"^1<",189,"^G","b__26211"],["^ ","^1;",54,"^1<",189],["^ ","^1;",54,"^1<",189,"^G","iter__26208"],["^ ","^1;",124,"^1<",189],["^ ","^1;",124,"^1<",189,"^G","cljs.core/chunk-rest"],["^ ","^1;",145,"^1<",189,"^G","s__26209"],["^ ","^1;",0,"^1<",191],["^ ","^1;",7,"^1<",191,"^G","cljs.core/chunk-cons"],["^ ","^1;",28,"^1<",191],["^ ","^1;",28,"^1<",191,"^G","cljs.core/chunk"],["^ ","^1;",44,"^1<",191,"^G","b__26211"],["^ ","^1;",54,"^1<",191],["^ ","^1;",0,"^1<",194],["^ ","^1;",12,"^1<",194],["^ ","^1;",12,"^1<",194,"^G","cljs.core/first"],["^ ","^1;",28,"^1<",194,"^G","s__26209"],["^ ","^1;",0,"^1<",195],["^ ","^1;",0,"^1<",195],["^ ","^1;",7,"^1<",195,"^G","cljs.core/cons"],["^ ","^1;",87,"^1<",195],["^ ","^1;",87,"^1<",195,"^G","iter__26208"],["^ ","^1;",157,"^1<",195],["^ ","^1;",157,"^1<",195,"^G","cljs.core/rest"],["^ ","^1;",172,"^1<",195,"^G","s__26209"],["^ ","^1;",0,"^1<",198],["^ ","^1;",1,"^1<",203],["^ ","^1;",6,"^1<",203],["^ ","^1;",4,"^1<",206,"^G","fs__4321__auto__"],["^ ","^1;",23,"^1<",206],["^ ","^1;",23,"^1<",206,"^G","cljs.core/seq"],["^ ","^1;",37,"^1<",206],["^ ","^1;",37,"^1<",206,"^G","iterys__4320__auto__"],["^ ","^1;",0,"^1<",207],["^ ","^1;",0,"^1<",207],["^ ","^1;",3,"^1<",207,"^G","fs__4321__auto__"],["^ ","^1;",0,"^1<",208],["^ ","^1;",7,"^1<",208,"^G","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"],["^ ","^1;",54,"^1<",208,"^G","fs__4321__auto__"],["^ ","^1;",71,"^1<",208],["^ ","^1;",71,"^1<",208,"^G","iter__26206"],["^ ","^1;",127,"^1<",208],["^ ","^1;",127,"^1<",208,"^G","cljs.core/rest"],["^ ","^1;",142,"^1<",208,"^G","s__26207"],["^ ","^1;",0,"^1<",210],["^ ","^1;",15,"^1<",210],["^ ","^1;",15,"^1<",210,"^G","cljs.core/rest"],["^ ","^1;",30,"^1<",210,"^G","s__26207"],["^ ","^1;",0,"^1<",215],["^ ","^1;",3,"^1<",219],["^ ","^1;",8,"^1<",219],["^ ","^1;",0,"^1<",221],["^ ","^1;",0,"^1<",221],["^ ","^1;",7,"^1<",221,"^G","iter__4324__auto__"]],"~i9",[["^ ","^1;",4,"^1<",159,"^G","rose"]],"^1:",[["^ ","^1;",4,"^1<",160,"^G","index"]],"^1H",[["^ ","^1;",26,"^1<",221]],"^2B",[["^ ","^1;",26,"^1<",221,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$3"]],"^1M",[["^ ","^1;",70,"^1<",221,"^G","cljs.core/vector"]],"^1A",[["^ ","^1;",87,"^1<",221,"^G","roses"]],"^2:",[["^ ","^1;",93,"^1<",221]],"^1R",[["^ ","^1;",93,"^1<",221,"^G","cljs.core.range.cljs$core$IFn$_invoke$arity$0"]]],"~i102",["^ ","~i8",[["^ ","^1;",4,"^1<",177,"^G","child"],["^ ","^1;",4,"^1<",194,"^G","child"]],"^1:",[["^ ","^1;",58,"^1<",206]],"^28",[["^ ","^1;",58,"^1<",206,"^G","clojure.test.check.rose-tree/children"]],"^1>",[["^ ","^1;",96,"^1<",206,"^G","rose"]]],"~i103",["^ ","~i4",[["^ ","^1;",32,"^1<",178],["^ ","^1;",22,"^1<",195]],"~i5",[["^ ","^1;",32,"^1<",178,"^G","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"],["^ ","^1;",22,"^1<",195,"^G","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1D",[["^ ","^1;",78,"^1<",178,"^G","roses"],["^ ","^1;",68,"^1<",195,"^G","roses"]],"^1?",[["^ ","^1;",84,"^1<",178,"^G","index"],["^ ","^1;",74,"^1<",195,"^G","index"]],"^1J",[["^ ","^1;",90,"^1<",178,"^G","child"],["^ ","^1;",80,"^1<",195,"^G","child"]]],"~i105",["^ ","~i0",[["^ ","^1;",0,"^1<",223],["^ ","^1;",35,"^1<",226],["^ ","^1;",0,"^1<",227]],"~i6",[["^ ","^1;",0,"^1<",226,"^G","clojure.test.check.rose-tree/zip"]]],"~i108",["^ ","~i3",[["^ ","^1;",78,"^1<",226,"^G","f"]],"~i5",[["^ ","^1;",80,"^1<",226,"^G","roses"]]],"~i109",["^ ","~i2",[["^ ","^1;",0,"^1<",227]],"~i3",[["^ ","^1;",7,"^1<",227,"^G","clojure.test.check.rose-tree/make-rose"]]],"~i110",["^ ","~i3",[["^ ","^1;",46,"^1<",227]],"~i4",[["^ ","^1;",46,"^1<",227,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^1C",[["^ ","^1;",92,"^1<",227,"^G","f"]],"~i12",[["^ ","^1;",94,"^1<",227]],"^1E",[["^ ","^1;",94,"^1<",227,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1?",[["^ ","^1;",138,"^1<",227,"^G","clojure.test.check.rose-tree/root"]],"^2B",[["^ ","^1;",172,"^1<",227,"^G","roses"]]],"~i111",["^ ","~i3",[["^ ","^1;",180,"^1<",227],["^ ","^1;",224,"^1<",227],["^ ","^1;",235,"^1<",227,"^G","p1__26234#"],["^ ","^1;",0,"^1<",228]],"~i4",[["^ ","^1;",180,"^1<",227,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1;",0,"^1<",228],["^ ","^1;",138,"^1<",228,"^G","p1__26234#"],["^ ","^1;",203,"^1<",228,"^G","p1__26234#"]],"^1C",[["^ ","^1;",8,"^1<",228,"^G","clojure.test.check.rose-tree/zip"],["^ ","^1;",73,"^1<",228,"^G","clojure.test.check.rose-tree/zip"],["^ ","^1;",158,"^1<",228,"^G","clojure.test.check.rose-tree/zip"]],"^1:",[["^ ","^1;",136,"^1<",228,"^G","f"],["^ ","^1;",201,"^1<",228,"^G","f"]]],"~i112",["^ ","~i8",[["^ ","^1;",3,"^1<",229]],"~i9",[["^ ","^1;",3,"^1<",229,"^G","clojure.test.check.rose-tree/permutations"]],"^2B",[["^ ","^1;",45,"^1<",229,"^G","roses"]]],"~i114",["^ ","~i0",[["^ ","^1;",0,"^1<",231],["^ ","^1;",38,"^1<",231],["^ ","^1;",0,"^1<",232]],"~i6",[["^ ","^1;",0,"^1<",231,"^G","clojure.test.check.rose-tree/remove"]]],"~i116",["^ ","~i3",[["^ ","^1;",84,"^1<",231,"^G","roses"]]],"~i117",["^ ","~i2",[["^ ","^1;",0,"^1<",232]],"~i3",[["^ ","^1;",7,"^1<",232,"^G","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"]]],"~i118",["^ ","~i3",[["^ ","^1;",54,"^1<",232]],"~i4",[["^ ","^1;",54,"^1<",232,"^G","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2"]],"^1G",[["^ ","^1;",106,"^1<",232],["^ ","^1;",0,"^1<",233]],"^1H",[["^ ","^1;",117,"^1<",232,"^G","index"]],"^29",[["^ ","^1;",123,"^1<",232,"^G","_"]],"^2D",[["^ ","^1;",0,"^1<",233]],"^1N",[["^ ","^1;",7,"^1<",233,"^G","clojure.test.check.rose-tree/exclude-nth"]],"~i43",[["^ ","^1;",48,"^1<",233,"^G","index"]],"^1Y",[["^ ","^1;",54,"^1<",233,"^G","roses"]],"~i57",[["^ ","^1;",3,"^1<",234,"^G","roses"]]],"~i119",["^ ","~i3",[["^ ","^1;",10,"^1<",234]],"~i4",[["^ ","^1;",10,"^1<",234,"^G","clojure.test.check.rose-tree/permutations"]],"^1?",[["^ ","^1;",52,"^1<",234]],"^1B",[["^ ","^1;",52,"^1<",234,"^G","cljs.core/vec"]],"^2B",[["^ ","^1;",66,"^1<",234,"^G","roses"]]],"~i121",["^ ","~i0",[["^ ","^1;",0,"^1<",236],["^ ","^1;",39,"^1<",239],["^ ","^1;",0,"^1<",240]],"^1G",[["^ ","^1;",0,"^1<",239,"^G","clojure.test.check.rose-tree/unchunk"]]],"~i123",["^ ","~i3",[["^ ","^1;",86,"^1<",239,"^G","a-lazy-seq"]]],"~i124",["^ ","~i2",[["^ ","^1;",0,"^1<",240]],"~i3",[["^ ","^1;",7,"^1<",240,"^G","cljs.core.take.cljs$core$IFn$_invoke$arity$2"]]],"~i125",["^ ","^1T",[["^ ","^1;",52,"^1<",240,"^G","js/Infinity"]]],"~i126",["^ ","~i3",[["^ ","^1;",61,"^1<",240,"^G","a-lazy-seq"]]],"~i128",["^ ","~i0",[["^ ","^1;",0,"^1<",242],["^ ","^1;",38,"^1<",242],["^ ","^1;",0,"^1<",243]],"~i6",[["^ ","^1;",0,"^1<",242,"^G","clojure.test.check.rose-tree/shrink"]]],"~i130",["^ ","~i3",[["^ ","^1;",84,"^1<",242,"^G","f"]],"~i5",[["^ ","^1;",86,"^1<",242,"^G","roses"]]],"~i131",["^ ","~i2",[["^ ","^1;",0,"^1<",243]],"~i6",[["^ ","^1;",3,"^1<",243]],"~i7",[["^ ","^1;",3,"^1<",243,"^G","cljs.core/seq"]],"^1G",[["^ ","^1;",17,"^1<",243,"^G","roses"]]],"~i132",["^ ","~i4",[["^ ","^1;",0,"^1<",244]],"~i5",[["^ ","^1;",7,"^1<",244,"^G","clojure.test.check.rose-tree/make-rose"]],"^28",[["^ ","^1;",46,"^1<",244]],"^1G",[["^ ","^1;",46,"^1<",244,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^2B",[["^ ","^1;",92,"^1<",244,"^G","f"]],"^1>",[["^ ","^1;",94,"^1<",244]],"^1L",[["^ ","^1;",94,"^1<",244,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^2C",[["^ ","^1;",138,"^1<",244,"^G","clojure.test.check.rose-tree/root"]],"^1O",[["^ ","^1;",172,"^1<",244,"^G","roses"]]],"~i133",["^ ","^28",[["^ ","^1;",180,"^1<",244],["^ ","^1;",224,"^1<",244],["^ ","^1;",235,"^1<",244,"^G","p1__26245#"],["^ ","^1;",0,"^1<",245]],"^1G",[["^ ","^1;",180,"^1<",244,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1H",[["^ ","^1;",0,"^1<",245],["^ ","^1;",144,"^1<",245,"^G","p1__26245#"],["^ ","^1;",212,"^1<",245,"^G","p1__26245#"]],"^2B",[["^ ","^1;",8,"^1<",245,"^G","clojure.test.check.rose-tree/shrink"],["^ ","^1;",76,"^1<",245,"^G","clojure.test.check.rose-tree/shrink"],["^ ","^1;",164,"^1<",245,"^G","clojure.test.check.rose-tree/shrink"]],"^2C",[["^ ","^1;",142,"^1<",245,"^G","f"],["^ ","^1;",210,"^1<",245,"^G","f"]],"^1O",[["^ ","^1;",3,"^1<",246]],"^1K",[["^ ","^1;",3,"^1<",246,"^G","clojure.test.check.rose-tree/remove"]],"^1T",[["^ ","^1;",39,"^1<",246]],"^33",[["^ ","^1;",39,"^1<",246,"^G","clojure.test.check.rose-tree/unchunk"]],"^1[",[["^ ","^1;",76,"^1<",246,"^G","roses"]]],"~i134",["^ ","~i4",[["^ ","^1;",0,"^1<",248],["^ ","^1;",131,"^1<",248]],"~i5",[["^ ","^1;",7,"^1<",248,"^G","clojure.test.check.rose-tree/make-rose"]],"^28",[["^ ","^1;",46,"^1<",248]],"^1G",[["^ ","^1;",47,"^1<",248,"^G","f"],["^ ","^1;",81,"^1<",248,"^G","f"],["^ ","^1;",117,"^1<",248,"^G","f"]]],"~i136",["^ ","~i0",[["^ ","^1;",0,"^1<",251],["^ ","^1;",0,"^1<",251]]],"~i138",["^ ","~i0",[["^ ","^1;",0,"^1<",251],["^ ","^1;",41,"^1<",255],["^ ","^1;",0,"^1<",256]],"^1G",[["^ ","^1;",0,"^1<",255,"^G","clojure.test.check.rose-tree/bifurcate"]]],"~i141",["^ ","~i3",[["^ ","^1;",90,"^1<",255,"^G","f"]],"~i5",[["^ ","^1;",92,"^1<",255,"^G","roses"]]],"~i142",["^ ","~i2",[["^ ","^1;",0,"^1<",256],["^ ","^1;",0,"^1<",257],["^ ","^1;",0,"^1<",274]],"~i8",[["^ ","^1;",3,"^1<",256],["^ ","^1;",4,"^1<",256]],"^1:",[["^ ","^1;",11,"^1<",256]],"^28",[["^ ","^1;",11,"^1<",256,"^G","cljs.core/count"]],"^1H",[["^ ","^1;",27,"^1<",256,"^G","roses"]]],"~i143",["^ ","~i4",[["^ ","^1;",0,"^1<",257],["^ ","^1;",0,"^1<",258]],"^1C",[["^ ","^1;",4,"^1<",257,"^G","left-count"]],"^1H",[["^ ","^1;",17,"^1<",257],["^ ","^1;",55,"^1<",257]],"^2B",[["^ ","^1;",17,"^1<",257,"^G","cljs.core/quot"]],"^29",[["^ ","^1;",32,"^1<",257]],"^1@",[["^ ","^1;",32,"^1<",257,"^G","cljs.core/count"]],"^1O",[["^ ","^1;",48,"^1<",257,"^G","roses"]]],"~i144",["^ ","~i6",[["^ ","^1;",0,"^1<",258],["^ ","^1;",12,"^1<",258,"^G","cljs.core/LazySeq"],["^ ","^1;",30,"^1<",258],["^ ","^1;",35,"^1<",258],["^ ","^1;",0,"^1<",260],["^ ","^1;",1,"^1<",272],["^ ","^1;",6,"^1<",272]]],"~i145",["^ ","~i7",[["^ ","^1;",0,"^1<",260]],"~i8",[["^ ","^1;",7,"^1<",260,"^G","cljs.core/cons"]]],"~i146",["^ ","~i8",[["^ ","^1;",22,"^1<",260],["^ ","^1;",39,"^1<",260,"^G","G__26276"],["^ ","^1;",4,"^1<",261,"^G","G__26277"],["^ ","^1;",0,"^1<",262],["^ ","^1;",0,"^1<",262],["^ ","^1;",168,"^1<",262,"^G","G__26276"],["^ ","^1;",177,"^1<",262,"^G","G__26277"],["^ ","^1;",248,"^1<",262,"^G","G__26276"],["^ ","^1;",257,"^1<",262,"^G","G__26277"]],"~i9",[["^ ","^1;",8,"^1<",262,"^G","clojure.test.check.rose-tree/shrink-vector*"],["^ ","^1;",89,"^1<",262,"^G","clojure.test.check.rose-tree/shrink-vector*"],["^ ","^1;",189,"^1<",262,"^G","clojure.test.check.rose-tree/shrink-vector*"]],"^1>",[["^ ","^1;",50,"^1<",260,"^G","f"]],"^1M",[["^ ","^1;",15,"^1<",261],["^ ","^1;",68,"^1<",261]],"^29",[["^ ","^1;",15,"^1<",261,"^G","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3"]],"^1O",[["^ ","^1;",62,"^1<",261,"^G","roses"]],"^1T",[["^ ","^1;",72,"^1<",261,"^G","left-count"]]],"~i147",["^ ","~i8",[["^ ","^1;",5,"^1<",263],["^ ","^1;",10,"^1<",263,"^G","cljs.core/LazySeq"],["^ ","^1;",28,"^1<",263],["^ ","^1;",33,"^1<",263],["^ ","^1;",0,"^1<",265],["^ ","^1;",1,"^1<",270],["^ ","^1;",6,"^1<",270]]],"~i148",["^ ","~i9",[["^ ","^1;",0,"^1<",265],["^ ","^1;",12,"^1<",265,"^G","cljs.core/List"],["^ ","^1;",27,"^1<",265],["^ ","^1;",5,"^1<",268],["^ ","^1;",10,"^1<",268],["^ ","^1;",14,"^1<",268]],"^28",[["^ ","^1;",32,"^1<",265],["^ ","^1;",49,"^1<",265,"^G","G__26278"],["^ ","^1;",4,"^1<",266,"^G","G__26279"],["^ ","^1;",0,"^1<",267],["^ ","^1;",0,"^1<",267],["^ ","^1;",168,"^1<",267,"^G","G__26278"],["^ ","^1;",177,"^1<",267,"^G","G__26279"],["^ ","^1;",248,"^1<",267,"^G","G__26278"],["^ ","^1;",257,"^1<",267,"^G","G__26279"]],"^1G",[["^ ","^1;",8,"^1<",267,"^G","clojure.test.check.rose-tree/shrink-vector*"],["^ ","^1;",89,"^1<",267,"^G","clojure.test.check.rose-tree/shrink-vector*"],["^ ","^1;",189,"^1<",267,"^G","clojure.test.check.rose-tree/shrink-vector*"]],"^1N",[["^ ","^1;",60,"^1<",265,"^G","f"]],"^1A",[["^ ","^1;",15,"^1<",266]],"^1O",[["^ ","^1;",15,"^1<",266,"^G","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2"]],"^1S",[["^ ","^1;",62,"^1<",266,"^G","roses"]],"^1W",[["^ ","^1;",68,"^1<",266,"^G","left-count"]]],"~i150",["^ ","~i0",[["^ ","^1;",0,"^1<",277],["^ ","^1;",51,"^1<",277],["^ ","^1;",0,"^1<",278]],"^1G",[["^ ","^1;",0,"^1<",277,"^G","clojure.test.check.rose-tree/shrink-vector*"]]],"~i151",["^ ","~i3",[["^ ","^1;",110,"^1<",277,"^G","f"]],"~i5",[["^ ","^1;",112,"^1<",277,"^G","roses"]]],"~i152",["^ ","~i2",[["^ ","^1;",0,"^1<",278],["^ ","^1;",0,"^1<",279]],"~i8",[["^ ","^1;",4,"^1<",278,"^G","thing"]],"^1:",[["^ ","^1;",12,"^1<",278]],"^28",[["^ ","^1;",12,"^1<",278,"^G","clojure.test.check.rose-tree/shrink"]],"^2B",[["^ ","^1;",48,"^1<",278,"^G","f"]],"^1>",[["^ ","^1;",50,"^1<",278,"^G","roses"]]],"~i153",["^ ","~i4",[["^ ","^1;",0,"^1<",279]],"~i5",[["^ ","^1;",7,"^1<",279,"^G","clojure.test.check.rose-tree/make-rose"]],"^28",[["^ ","^1;",46,"^1<",279]],"^1G",[["^ ","^1;",46,"^1<",279,"^G","clojure.test.check.rose-tree/root"]],"^1H",[["^ ","^1;",80,"^1<",279,"^G","thing"]]],"~i154",["^ ","^28",[["^ ","^1;",87,"^1<",279]],"^1G",[["^ ","^1;",87,"^1<",279,"^G","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^1;",134,"^1<",279]],"^1>",[["^ ","^1;",134,"^1<",279,"^G","clojure.test.check.rose-tree/bifurcate"]],"^1O",[["^ ","^1;",173,"^1<",279,"^G","f"]],"^2E",[["^ ","^1;",175,"^1<",279,"^G","roses"]],"^33",[["^ ","^1;",182,"^1<",279]],"^1U",[["^ ","^1;",182,"^1<",279,"^G","clojure.test.check.rose-tree/children"]],"~i53",[["^ ","^1;",220,"^1<",279,"^G","thing"]]],"~i156",["^ ","~i0",[["^ ","^1;",0,"^1<",281],["^ ","^1;",45,"^1<",281],["^ ","^1;",0,"^1<",282],["^ ","^1;",0,"^1<",282],["^ ","^1;",0,"^1<",283],["^ ","^1;",0,"^1<",284],["^ ","^1;",0,"^1<",284],["^ ","^1;",6,"^1<",284],["^ ","^1;",11,"^1<",284,"^G","js/Error"],["^ ","^1;",17,"^1<",284]],"~i6",[["^ ","^1;",0,"^1<",281,"^G","clojure.test.check.rose-tree/shrink-vector"]]],"~i157",["^ ","~i3",[["^ ","^1;",98,"^1<",281,"^G","f"]],"~i5",[["^ ","^1;",100,"^1<",281,"^G","roses"]]],"~i158",["^ ","~i9",[["^ ","^1;",3,"^1<",282]],"^1C",[["^ ","^1;",3,"^1<",282,"^G","cljs.core/vector?"]],"^1B",[["^ ","^1;",27,"^1<",282,"^G","roses"]]],"~i159",["^ ","~i2",[["^ ","^1;",0,"^1<",287],["^ ","^1;",0,"^1<",289]],"~i8",[["^ ","^1;",4,"^1<",287,"^G","rose"]],"^1E",[["^ ","^1;",11,"^1<",287]],"^1:",[["^ ","^1;",11,"^1<",287,"^G","clojure.test.check.rose-tree/shrink-vector*"]],"^2C",[["^ ","^1;",60,"^1<",287,"^G","f"]],"^1N",[["^ ","^1;",62,"^1<",287,"^G","roses"]]],"~i160",["^ ","~i8",[["^ ","^1;",4,"^1<",288,"^G","empty-rose"]],"^1=",[["^ ","^1;",17,"^1<",288],["^ ","^1;",141,"^1<",288]],"^1F",[["^ ","^1;",17,"^1<",288,"^G","clojure.test.check.rose-tree/make-rose"]],"^2D",[["^ ","^1;",56,"^1<",288]],"^1N",[["^ ","^1;",57,"^1<",288,"^G","f"],["^ ","^1;",91,"^1<",288,"^G","f"],["^ ","^1;",127,"^1<",288,"^G","f"]]],"~i161",["^ ","~i4",[["^ ","^1;",0,"^1<",289]],"~i8",[["^ ","^1;",3,"^1<",289]],"~i9",[["^ ","^1;",3,"^1<",289,"^G","cljs.core/empty?"]],"^1G",[["^ ","^1;",26,"^1<",289,"^G","roses"]]],"~i162",["^ ","~i6",[["^ ","^1;",0,"^1<",290,"^G","rose"]]],"~i163",["^ ","~i6",[["^ ","^1;",0,"^1<",292]],"~i7",[["^ ","^1;",7,"^1<",292,"^G","clojure.test.check.rose-tree/make-rose"]],"^1?",[["^ ","^1;",46,"^1<",292]],"^1B",[["^ ","^1;",46,"^1<",292,"^G","clojure.test.check.rose-tree/root"]],"^1J",[["^ ","^1;",80,"^1<",292,"^G","rose"]]],"~i164",["^ ","^1?",[["^ ","^1;",86,"^1<",292]],"^1B",[["^ ","^1;",86,"^1<",292,"^G","cljs.core/cons"]],"^1J",[["^ ","^1;",101,"^1<",292,"^G","empty-rose"]],"^1O",[["^ ","^1;",112,"^1<",292]],"^1K",[["^ ","^1;",112,"^1<",292,"^G","clojure.test.check.rose-tree/children"]],"^1U",[["^ ","^1;",150,"^1<",292,"^G","rose"]]],"~i166",["^ ","~i0",[["^ ","^1;",0,"^1<",295],["^ ","^1;",40,"^1<",300],["^ ","^1;",0,"^1<",301]],"~i6",[["^ ","^1;",0,"^1<",300,"^G","clojure.test.check.rose-tree/collapse"]]],"~i171",["^ ","~i3",[["^ ","^1;",88,"^1<",300,"^G","rose"]]],"~i172",["^ ","~i2",[["^ ","^1;",0,"^1<",301]],"~i3",[["^ ","^1;",7,"^1<",301,"^G","clojure.test.check.rose-tree/make-rose"]],"^1E",[["^ ","^1;",46,"^1<",301]],"^1:",[["^ ","^1;",46,"^1<",301,"^G","clojure.test.check.rose-tree/root"]],"^1=",[["^ ","^1;",80,"^1<",301,"^G","rose"]]],"~i173",["^ ","^1E",[["^ ","^1;",86,"^1<",301],["^ ","^1;",0,"^1<",302]],"^1=",[["^ ","^1;",103,"^1<",301,"^G","the-children"]],"^1I",[["^ ","^1;",118,"^1<",301]],"^1A",[["^ ","^1;",118,"^1<",301,"^G","clojure.test.check.rose-tree/children"]],"^1T",[["^ ","^1;",156,"^1<",301,"^G","rose"]]],"~i174",["^ ","^28",[["^ ","^1;",0,"^1<",302]],"^1G",[["^ ","^1;",7,"^1<",302,"^G","cljs.core.concat.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^1;",54,"^1<",302]],"^1>",[["^ ","^1;",54,"^1<",302,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1@",[["^ ","^1;",98,"^1<",302,"^G","clojure.test.check.rose-tree/collapse"]],"^1P",[["^ ","^1;",136,"^1<",302,"^G","the-children"]]],"~i175",["^ ","^1J",[["^ ","^1;",150,"^1<",302]],"^1>",[["^ ","^1;",150,"^1<",302,"^G","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^1@",[["^ ","^1;",194,"^1<",302,"^G","clojure.test.check.rose-tree/collapse"]]],"~i176",["^ ","^1@",[["^ ","^1;",232,"^1<",302]],"^2C",[["^ ","^1;",232,"^1<",302,"^G","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic"]],"^2E",[["^ ","^1;",286,"^1<",302,"^G","clojure.test.check.rose-tree/children"]],"~i45",[["^ ","^1;",374,"^1<",302,"^G","the-children"]]],"~i178",["^ ","~i0",[["^ ","^1;",0,"^1<",305],["^ ","^1;",42,"^1<",305],["^ ","^1;",0,"^1<",306]],"~i7",[["^ ","^1;",0,"^1<",305,"^G","clojure.test.check.rose-tree/make-stack"]]],"~i179",["^ ","~i3",[["^ ","^1;",92,"^1<",305,"^G","children"]],"^2X",[["^ ","^1;",101,"^1<",305,"^G","stack"]]],"~i180",["^ ","~i2",[["^ ","^1;",0,"^1<",306],["^ ","^1;",4,"^1<",306,"^G","temp__5455__auto__"],["^ ","^1;",0,"^1<",307],["^ ","^1;",0,"^1<",307],["^ ","^1;",3,"^1<",307,"^G","temp__5455__auto__"],["^ ","^1;",0,"^1<",308],["^ ","^1;",8,"^1<",308,"^G","temp__5455__auto__"],["^ ","^1;",0,"^1<",309]],"^1D",[["^ ","^1;",4,"^1<",308,"^G","s"]],"^1E",[["^ ","^1;",25,"^1<",306]],"^1:",[["^ ","^1;",25,"^1<",306,"^G","cljs.core/seq"]],"^1J",[["^ ","^1;",39,"^1<",306,"^G","children"]]],"~i181",["^ ","~i4",[["^ ","^1;",0,"^1<",309]],"~i5",[["^ ","^1;",7,"^1<",309,"^G","cljs.core/cons"]],"^1C",[["^ ","^1;",22,"^1<",309,"^G","children"]],"^1=",[["^ ","^1;",31,"^1<",309,"^G","stack"]]],"~i182",["^ ","~i4",[["^ ","^1;",0,"^1<",311,"^G","stack"]]],"~i184",["^ ","~i0",[["^ ","^1;",0,"^1<",314],["^ ","^1;",35,"^1<",322],["^ ","^1;",0,"^1<",323]],"~i6",[["^ ","^1;",0,"^1<",322,"^G","clojure.test.check.rose-tree/seq"]]],"~i191",["^ ","~i3",[["^ ","^1;",78,"^1<",322,"^G","rose"]]],"~i192",["^ ","~i2",[["^ ","^1;",0,"^1<",323],["^ ","^1;",0,"^1<",353]],"~i8",[["^ ","^1;",4,"^1<",323,"^G","helper"]],"^28",[["^ ","^1;",13,"^1<",323],["^ ","^1;",0,"^1<",324]],"^29",[["^ ","^1;",65,"^1<",323,"^G","rose"]],"^1I",[["^ ","^1;",74,"^1<",323,"^G","seen"]],"^1P",[["^ ","^1;",79,"^1<",323,"^G","stack"]]],"~i193",["^ ","^1?",[["^ ","^1;",0,"^1<",324],["^ ","^1;",0,"^1<",326]],"^1J",[["^ ","^1;",4,"^1<",324,"^G","node"]],"^1@",[["^ ","^1;",11,"^1<",324]],"^2C",[["^ ","^1;",11,"^1<",324,"^G","clojure.test.check.rose-tree/root"]],"^1O",[["^ ","^1;",45,"^1<",324,"^G","rose"]]],"~i194",["^ ","^1J",[["^ ","^1;",4,"^1<",325,"^G","the-children"]],"^2E",[["^ ","^1;",19,"^1<",325]],"^1P",[["^ ","^1;",19,"^1<",325,"^G","clojure.test.check.rose-tree/children"]],"^1V",[["^ ","^1;",57,"^1<",325,"^G","rose"]]],"~i195",["^ ","^1=",[["^ ","^1;",0,"^1<",326],["^ ","^1;",12,"^1<",326,"^G","cljs.core/LazySeq"],["^ ","^1;",30,"^1<",326],["^ ","^1;",35,"^1<",326],["^ ","^1;",0,"^1<",328],["^ ","^1;",1,"^1<",351],["^ ","^1;",6,"^1<",351]]],"~i196",["^ ","^1F",[["^ ","^1;",0,"^1<",328],["^ ","^1;",3,"^1<",328],["^ ","^1;",3,"^1<",328,"^G","cljs.core/not"]],"^1@",[["^ ","^1;",17,"^1<",328]],"^2C",[["^ ","^1;",18,"^1<",328,"^G","seen"],["^ ","^1;",55,"^1<",328,"^G","seen"],["^ ","^1;",98,"^1<",328,"^G","seen"]],"^1O",[["^ ","^1;",90,"^1<",328,"^G","node"],["^ ","^1;",113,"^1<",328,"^G","node"]]],"~i197",["^ ","^2B",[["^ ","^1;",0,"^1<",329]],"^1J",[["^ ","^1;",7,"^1<",329,"^G","cljs.core/cons"]],"^1@",[["^ ","^1;",22,"^1<",329,"^G","node"]]],"~i198",["^ ","^1@",[["^ ","^1;",27,"^1<",329]],"^1I",[["^ ","^1;",29,"^1<",329]],"^1A",[["^ ","^1;",29,"^1<",329,"^G","cljs.core/seq"]],"^1T",[["^ ","^1;",43,"^1<",329,"^G","the-children"]]],"~i199",["^ ","^2D",[["^ ","^1;",58,"^1<",329]],"^1N",[["^ ","^1;",58,"^1<",329,"^G","helper"]],"^1Q",[["^ ","^1;",100,"^1<",329]],"^2:",[["^ ","^1;",100,"^1<",329,"^G","cljs.core/first"]],"^45",[["^ ","^1;",116,"^1<",329,"^G","the-children"]],"^23",[["^ ","^1;",130,"^1<",329]],"^24",[["^ ","^1;",130,"^1<",329,"^G","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"~i65",[["^ ","^1;",175,"^1<",329,"^G","seen"]],"^2>",[["^ ","^1;",180,"^1<",329,"^G","node"]],"^2A",[["^ ","^1;",186,"^1<",329]],"~i77",[["^ ","^1;",186,"^1<",329,"^G","clojure.test.check.rose-tree/make-stack"]],"~i88",[["^ ","^1;",226,"^1<",329]],"~i89",[["^ ","^1;",226,"^1<",329,"^G","cljs.core/rest"]],"^2N",[["^ ","^1;",241,"^1<",329,"^G","the-children"]],"^2U",[["^ ","^1;",255,"^1<",329,"^G","stack"]]],"~i200",["^ ","^2D",[["^ ","^1;",263,"^1<",329],["^ ","^1;",280,"^1<",329,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",330],["^ ","^1;",0,"^1<",330],["^ ","^1;",3,"^1<",330,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",331],["^ ","^1;",0,"^1<",331],["^ ","^1;",8,"^1<",331,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",332],["^ ","^1;",0,"^1<",336]],"^1S",[["^ ","^1;",4,"^1<",331,"^G","s"]],"^33",[["^ ","^1;",301,"^1<",329]],"^1U",[["^ ","^1;",301,"^1<",329,"^G","cljs.core/seq"]],"^3P",[["^ ","^1;",315,"^1<",329,"^G","stack"]]],"~i201",["^ ","^1I",[["^ ","^1;",0,"^1<",332],["^ ","^1;",0,"^1<",334]],"^1Q",[["^ ","^1;",4,"^1<",332,"^G","f"]],"^1R",[["^ ","^1;",8,"^1<",332]],"^1S",[["^ ","^1;",8,"^1<",332,"^G","cljs.core/ffirst"]],"^1X",[["^ ","^1;",25,"^1<",332,"^G","s"]]],"~i202",["^ ","^1Q",[["^ ","^1;",4,"^1<",333,"^G","r"]],"^1R",[["^ ","^1;",8,"^1<",333]],"^1S",[["^ ","^1;",8,"^1<",333,"^G","cljs.core/rest"]],"^1V",[["^ ","^1;",23,"^1<",333]],"^1W",[["^ ","^1;",23,"^1<",333,"^G","cljs.core/first"]],"^3P",[["^ ","^1;",39,"^1<",333,"^G","s"]]],"~i203",["^ ","^1O",[["^ ","^1;",0,"^1<",334]],"^1K",[["^ ","^1;",7,"^1<",334,"^G","helper"]],"^1T",[["^ ","^1;",49,"^1<",334,"^G","f"]],"^1U",[["^ ","^1;",51,"^1<",334]],"^45",[["^ ","^1;",51,"^1<",334,"^G","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1Z",[["^ ","^1;",96,"^1<",334,"^G","seen"]],"~i55",[["^ ","^1;",101,"^1<",334,"^G","node"]],"^25",[["^ ","^1;",107,"^1<",334]],"^26",[["^ ","^1;",107,"^1<",334,"^G","clojure.test.check.rose-tree/make-stack"]],"~i73",[["^ ","^1;",147,"^1<",334,"^G","r"]],"^2@",[["^ ","^1;",149,"^1<",334]],"^2A",[["^ ","^1;",149,"^1<",334,"^G","cljs.core/rest"]],"~i81",[["^ ","^1;",164,"^1<",334,"^G","s"]]],"~i204",["^ ","^2B",[["^ ","^1;",0,"^1<",340],["^ ","^1;",4,"^1<",340,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",341],["^ ","^1;",0,"^1<",341],["^ ","^1;",3,"^1<",341,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",342],["^ ","^1;",0,"^1<",342],["^ ","^1;",8,"^1<",342,"^G","temp__5457__auto__"],["^ ","^1;",0,"^1<",343],["^ ","^1;",0,"^1<",347]],"^1A",[["^ ","^1;",4,"^1<",342,"^G","s"]],"^1K",[["^ ","^1;",25,"^1<",340]],"^2E",[["^ ","^1;",25,"^1<",340,"^G","cljs.core/seq"]],"^45",[["^ ","^1;",39,"^1<",340,"^G","stack"]]],"~i205",["^ ","^1>",[["^ ","^1;",0,"^1<",343],["^ ","^1;",0,"^1<",345]],"^2D",[["^ ","^1;",4,"^1<",343,"^G","f"]],"^1I",[["^ ","^1;",8,"^1<",343]],"^1A",[["^ ","^1;",8,"^1<",343,"^G","cljs.core/ffirst"]],"^1R",[["^ ","^1;",25,"^1<",343,"^G","s"]]],"~i206",["^ ","^2D",[["^ ","^1;",4,"^1<",344,"^G","r"]],"^1I",[["^ ","^1;",8,"^1<",344]],"^1A",[["^ ","^1;",8,"^1<",344,"^G","cljs.core/rest"]],"^1Q",[["^ ","^1;",23,"^1<",344]],"^2:",[["^ ","^1;",23,"^1<",344,"^G","cljs.core/first"]],"^45",[["^ ","^1;",39,"^1<",344,"^G","s"]]],"~i207",["^ ","^1M",[["^ ","^1;",0,"^1<",345]],"^29",[["^ ","^1;",7,"^1<",345,"^G","helper"]],"^1O",[["^ ","^1;",49,"^1<",345,"^G","f"]],"^2E",[["^ ","^1;",51,"^1<",345,"^G","seen"]],"^1S",[["^ ","^1;",56,"^1<",345]],"^1T",[["^ ","^1;",56,"^1<",345,"^G","clojure.test.check.rose-tree/make-stack"]],"^3P",[["^ ","^1;",96,"^1<",345,"^G","r"]],"^4M",[["^ ","^1;",98,"^1<",345]],"^2F",[["^ ","^1;",98,"^1<",345,"^G","cljs.core/rest"]],"^25",[["^ ","^1;",113,"^1<",345,"^G","s"]]],"~i208",["^ ","~i4",[["^ ","^1;",0,"^1<",353],["^ ","^1;",19,"^1<",353],["^ ","^1;",53,"^1<",353]],"~i5",[["^ ","^1;",7,"^1<",353,"^G","helper"]],"^2X",[["^ ","^1;",14,"^1<",353,"^G","rose"]]],"~i2407",["^ ","^1[",[["^ ","^1;",22,"^1<",171],["^ ","^1;",22,"^1<",171,"^G","cljs.core/chunk-first"],["^ ","^1;",44,"^1<",171,"^G","s__26209"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^M"],[1534380137000],["^12","goog/math/math.js"],[1530991559994,"^O","~$goog.array","~$goog.asserts"],["^12","goog/array/array.js"],[1530991559994,"^O","^4["],["^12","goog/debug/error.js"],[1530991559994,"^O"],["^12","goog/dom/nodetype.js"],[1530991559994,"^O"],["^12","clojure/test/check/rose_tree.cljc"],[1535586405418,"^O","^M"],["^12","goog/object/object.js"],[1530991559994,"^O"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^12","goog/math/long.js"],[1530991559994,"^O","^4[","~$goog.reflect"],["^12","goog/functions/functions.js"],[1530991559994,"^O"],["^12","goog/structs/map.js"],[1530991559994,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^12","goog/asserts/asserts.js"],[1530991559994,"^O","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^12","goog/uri/uri.js"],[1530991559994,"^O","^4Z","^4[","^57","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^12","goog/base.js"],[1530991559994],["^12","goog/structs/structs.js"],[1530991559994,"^O","^4Z","^54"],["^12","goog/string/string.js"],[1530991559994,"^O"],["^12","goog/reflect/reflect.js"],[1530991559994,"^O"],["^12","goog/string/stringbuffer.js"],[1530991559994,"^O"],["^12","goog/iter/iter.js"],[1530991559994,"^O","^4Z","^4[","~$goog.functions","~$goog.math"],["^12","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^57","^54","^4Z","~$goog.Uri","~$goog.string.StringBuffer"],["^12","goog/math/integer.js"],[1530991559994,"^O"],["^12","goog/uri/utils.js"],[1530991559994,"^O","^4Z","^4[","^57"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A lazy tree data structure used for shrinking.","^7","clojure/test/check/rose_tree.cljc","^8",10,"^9",5,"^:",10,"^;",33],"^<",["^ ","^=","^>","^?","^@"],"^A",null,"^B",["^C",["^D","^E","^F"]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^M","^O","^O"],"^P",["^C",["^Q"]],"~:shadow/js-access-global",["^C",["Infinity","Error"]],"^R",null,"~:defs",["^ ","~$bifurcate",["^ ","~:protocol-inline",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",139,"^9",17,"^:",139,"^;",26,"~:private",true,"~:arglists",["^U",["~$quote",["^U",[["~$f","~$roses"]]]]],"^6","Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses."],"^5H",true,"^G","~$clojure.test.check.rose-tree/bifurcate","~:variadic",false,"^7","clojure/test/check/rose_tree.cljc","^;",26,"~:method-params",["^U",[["~$f","^5K"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^9",1,"^8",139,"^:",139,"~:max-fixed-arity",2,"~:fn-var",true,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]],"^6","Returns a sequence of rose trees representing shrinks that discard\n  half of the vector of roses."],"^D",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",185,"^9",7,"^:",185,"^;",10,"^5I",["^U",["^5J",["^U",[["~$rose"]]]]],"^6","Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."],"^G","~$clojure.test.check.rose-tree/seq","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",10,"^5N",["^U",[["^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",185,"^:",185,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Create a lazy-seq of all of the (unique) nodes in a shrink-tree.\n  This assumes that two nodes with the same value have the same children.\n  While it's not common, it's possible to create trees that don't\n  fit that description. This function is significantly faster than\n  brute-force enumerating all of the nodes in a tree, as there will\n  be many duplicates."],"~$pure",["^ ","~:no-doc",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",67,"^9",7,"^:",67,"^;",11,"^5I",["^U",["^5J",["^U",[["~$x"]]]]],"^6","Puts a value `x` into a Rose tree, with no children.","^5V",true],"^G","~$clojure.test.check.rose-tree/pure","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",11,"^5N",["^U",[["~$x"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",67,"^:",67,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$x"]]]]],"^6","Puts a value `x` into a Rose tree, with no children."],"~$->RoseTree",["^ ","^5G",null,"^5",["^ ","~:protocols",["^C",["~$cljs.core/IIndexed"]],"^7","clojure/test/check/rose_tree.cljc","^;",18,"^9",10,"~:factory","~:positional","^8",15,"^:",15,"^5I",["^U",["^5J",["^U",[["~$root","~$children"]]]]],"~:skip-protocol-flag",["^C",["^5Z"]],"^6","Positional factory function for clojure.test.check.rose-tree/RoseTree."],"^5Y",["^C",["^5Z"]],"^G","~$clojure.test.check.rose-tree/->RoseTree","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",18,"^5N",["^U",[["^61","^62"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^5[","^60","^8",15,"^:",15,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["^61","^62"]]]]],"^63",["^C",["^5Z"]],"^6","Positional factory function for clojure.test.check.rose-tree/RoseTree."],"~$make-stack",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",179,"^9",8,"^:",179,"^;",18,"^5H",true,"^5I",["^U",["^5J",["^U",[["^62","~$stack"]]]]]],"^5H",true,"^G","~$clojure.test.check.rose-tree/make-stack","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",18,"^5N",["^U",[["^62","^66"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",179,"^:",179,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["^62","^66"]]]]]],"~$join",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",55,"^9",7,"^:",55,"^;",11,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees.","^5V",true],"^G","~$clojure.test.check.rose-tree/join","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",11,"^5N",["^U",[["^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",55,"^:",55,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Turn a tree of trees into a single tree. Does this by concatenating\n  children of the inner and outer trees."],"~$bind",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",79,"^9",7,"^:",79,"^;",11,"^5I",["^U",["^5J",["^U",[["~$m","~$k"]]]]],"^6","Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees.","^5V",true],"^G","~$clojure.test.check.rose-tree/bind","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",11,"^5N",["^U",[["~$m","~$k"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",79,"^:",79,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$m","~$k"]]]]],"^6","Takes a Rose tree (m) and a function (k) from\n  values to Rose tree and returns a new Rose tree.\n  This is the monadic bind (>>=) for Rose trees."],"^62",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",35,"^9",7,"^:",35,"^;",15,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Returns the children of the root of the Rose tree.","^5V",true],"^G","~$clojure.test.check.rose-tree/children","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",15,"^5N",["^U",[["^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",35,"^:",35,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Returns the children of the root of the Rose tree."],"~$exclude-nth",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",45,"^9",8,"^:",45,"^;",19,"^5H",true,"^5I",["^U",["^5J",["^U",[["~$n","~$coll"]]]]],"^6","Exclude the nth value in a collection."],"^5H",true,"^G","~$clojure.test.check.rose-tree/exclude-nth","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",19,"^5N",["^U",[["~$n","^6>"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",45,"^:",45,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$n","^6>"]]]]],"^6","Exclude the nth value in a collection."],"^E",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",115,"^9",7,"^:",115,"^;",13,"^5I",["^U",["^5J",["^U",[["^5K"]]]]],"^5V",true],"^G","~$clojure.test.check.rose-tree/remove","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",13,"^5N",["^U",[["^5K"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",115,"^:",115,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5K"]]]]]],"~$permutations",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",97,"^9",7,"^:",97,"^;",19,"^5I",["^U",["^5J",["^U",[["^5K"]]]]],"^6","Create a seq of vectors, where each rose in turn, has been replaced\n  by its children.","^5V",true],"^G","~$clojure.test.check.rose-tree/permutations","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",19,"^5N",["^U",[["^5K"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",97,"^:",97,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5K"]]]]],"^6","Create a seq of vectors, where each rose in turn, has been replaced\n  by its children."],"~$RoseTree",["^ ","~:num-fields",2,"^5Y",["^C",["^5Z"]],"^G","~$clojure.test.check.rose-tree/RoseTree","^7","clojure/test/check/rose_tree.cljc","^;",18,"~:type",true,"^9",10,"^8",15,"~:record",false,"^:",15,"~:tag","~$function","^63",["^C",["^5Z"]]],"~$shrink",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",129,"^9",7,"^:",129,"^;",13,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]],"^5V",true],"^G","~$clojure.test.check.rose-tree/shrink","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",13,"^5N",["^U",[["~$f","^5K"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",129,"^:",129,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]]],"~$shrink-vector*",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",151,"^9",17,"^:",151,"^;",31,"^5H",true,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]]],"^5H",true,"^G","~$clojure.test.check.rose-tree/shrink-vector*","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",31,"^5N",["^U",[["~$f","^5K"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",151,"^:",151,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]]],"~$make-rose",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",41,"^9",7,"^:",41,"^;",16,"^5I",["^U",["^5J",["^U",[["^61","^62"]]]]]],"^G","~$clojure.test.check.rose-tree/make-rose","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",16,"^5N",["^U",[["^61","^62"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",41,"^:",41,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["^61","^62"]]]]]],"^F",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",87,"^9",7,"^:",87,"^;",13,"^5I",["^U",["^5J",["^U",[["~$pred","^5S"]]]]],"^6","Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose","^5V",true],"^G","~$clojure.test.check.rose-tree/filter","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",13,"^5N",["^U",[["^6P","^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",87,"^:",87,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["^6P","^5S"]]]]],"^6","Returns a new Rose tree whose values pass `pred`. Values who\n  do not pass `pred` have their children cut out as well.\n  Takes a list of roses, not a rose"],"^61",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",29,"^9",7,"^:",29,"^;",11,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Returns the root of a Rose tree.","^5V",true],"^G","~$clojure.test.check.rose-tree/root","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",11,"^5N",["^U",[["^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",29,"^:",29,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Returns the root of a Rose tree."],"~$shrink-vector",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",157,"^9",7,"^:",157,"^;",20,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]]],"^G","~$clojure.test.check.rose-tree/shrink-vector","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",20,"^5N",["^U",[["~$f","^5K"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",157,"^:",157,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]]],"~$zip",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",106,"^9",7,"^:",106,"^;",10,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]],"^6","Apply `f` to the sequence of Rose trees `roses`.","^5V",true],"^G","~$clojure.test.check.rose-tree/zip","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",10,"^5N",["^U",[["~$f","^5K"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",106,"^:",106,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$f","^5K"]]]]],"^6","Apply `f` to the sequence of Rose trees `roses`."],"~$fmap",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",73,"^9",7,"^:",73,"^;",11,"^5I",["^U",["^5J",["^U",[["~$f","^5S"]]]]],"^6","Applies functions `f` to all values in the tree.","^5V",true],"^G","~$clojure.test.check.rose-tree/fmap","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",11,"^5N",["^U",[["~$f","^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",73,"^:",73,"^5Q",2,"^5R",true,"^5I",["^U",["^5J",["^U",[["~$f","^5S"]]]]],"^6","Applies functions `f` to all values in the tree."],"~$unchunk",["^ ","^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",122,"^9",17,"^:",122,"^;",24,"^5H",true,"^5I",["^U",["^5J",["^U",[["~$a-lazy-seq"]]]]],"^6","Returns an equivalent lazy seq that is not chunked."],"^5H",true,"^G","~$clojure.test.check.rose-tree/unchunk","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",24,"^5N",["^U",[["^6Z"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",122,"^:",122,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^6Z"]]]]],"^6","Returns an equivalent lazy seq that is not chunked."],"~$collapse",["^ ","^5V",true,"^5G",null,"^5",["^ ","^7","clojure/test/check/rose_tree.cljc","^8",167,"^9",7,"^:",167,"^;",15,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree.","^5V",true],"^G","~$clojure.test.check.rose-tree/collapse","^5M",false,"^7","clojure/test/check/rose_tree.cljc","^;",15,"^5N",["^U",[["^5S"]]],"^5O",null,"^5P",["^U",[null,null]],"^9",1,"^8",167,"^:",167,"^5Q",1,"^5R",true,"^5I",["^U",["^5J",["^U",[["^5S"]]]]],"^6","Return a new rose-tree whose depth-one children\n  are the children from depth one _and_ two of the input\n  tree."]],"^S",["^ ","^M","^M","^N","^M"],"~:cljs.analyzer/constants",["^ ","^P",["^C",["~:else","^62","^61"]],"~:order",["^73","^61","^62"]],"^Z",["^ ","^Q",["^C",[]]],"^[",["^ "],"^10",["^O","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^4X",[["^77","~:static-fns"],true,["^77","~:elide-asserts"],false,["^77","~:optimize-constants"],null,["^77","~:external-config"],null,["^77","~:tooling-config"],null,["^77","~:emit-constants"],null,["^77","~:infer-externs"],true,["^77","^17"],null,["~:js-options","~:js-provider"],"^Q",["~:mode"],"~:dev",["^77","~:fn-invoke-direct"],null,["^77","^19"],"/dev/null"]]]