["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.doubles');\ngoog.require('clojure.test.check.random.longs');\n\n/**\n * @interface\n */\nclojure.test.check.random.IRandom = function(){};\n\n/**\n * Returns a random goog.math.Long based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_long = (function clojure$test$check$random$rand_long(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$rand_long$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$rand_long$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.rand_long[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.rand_long[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-long\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n *   based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_double = (function clojure$test$check$random$rand_double(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$rand_double$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$rand_double$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.rand_double[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.rand_double[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-double\",rng);\n}\n}\n}\n});\n\n/**\n * Returns two new RNGs [rng1 rng2], which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split = (function clojure$test$check$random$split(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$split$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$split$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.split[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.split[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a collection of `n` RNGs, which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split_n = (function clojure$test$check$random$split_n(rng,n){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$split_n$arity$2 == null))))){\nreturn rng.clojure$test$check$random$IRandom$split_n$arity$2(rng,n);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.split_n[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4244__auto__.call(null,rng,n));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.split_n[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4244__auto____$1.call(null,rng,n));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split-n\",rng);\n}\n}\n}\n});\n\n/**\n * Helper for defining constants.\n */\nclojure.test.check.random.hex_long = (function clojure$test$check$random$hex_long(s){\nreturn clojure.test.check.random.longs.from_string(s,(16));\n});\n/**\n * Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\n */\nclojure.test.check.random.bxoubsr = (function clojure$test$check$random$bxoubsr(x,n){\nreturn clojure.test.check.random.longs.bit_xor(clojure.test.check.random.longs.unsigned_bit_shift_right(x,n),x);\n});\nclojure.test.check.random.mix_64_const_1 = clojure.test.check.random.hex_long(\"bf58476d1ce4e5b9\");\nclojure.test.check.random.mix_64_const_2 = clojure.test.check.random.hex_long(\"94d049bb133111eb\");\nclojure.test.check.random.mix_64 = (function clojure$test$check$random$mix_64(n){\nreturn clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(30)),clojure.test.check.random.mix_64_const_1),(27)),clojure.test.check.random.mix_64_const_2),(31));\n});\nclojure.test.check.random.mix_gamma_const_1 = clojure.test.check.random.hex_long(\"ff51afd7ed558ccd\");\nclojure.test.check.random.mix_gamma_const_2 = clojure.test.check.random.hex_long(\"c4ceb9fe1a85ec53\");\nclojure.test.check.random.mix_gamma_const_3 = clojure.test.check.random.hex_long(\"aaaaaaaaaaaaaaaa\");\nclojure.test.check.random.mix_gamma = (function clojure$test$check$random$mix_gamma(n){\nvar z = clojure.test.check.random.longs.bit_or(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(33)),clojure.test.check.random.mix_gamma_const_1),(33)),clojure.test.check.random.mix_gamma_const_2),(33)),clojure.test.check.random.longs.ONE);\nvar G__26220 = z;\nif(((24) > (function (){var G__26222 = clojure.test.check.random.bxoubsr(z,(1));\nreturn (clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1(G__26222) : clojure.test.check.random.longs.bit_count.call(null,G__26222));\n})())){\nreturn clojure.test.check.random.longs.bit_xor(G__26220,clojure.test.check.random.mix_gamma_const_3);\n} else {\nreturn G__26220;\n}\n});\n\n/**\n* @constructor\n * @implements {clojure.test.check.random.IRandom}\n*/\nclojure.test.check.random.JavaUtilSplittableRandom = (function (gamma,state){\nthis.gamma = gamma;\nthis.state = state;\n});\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_long$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn clojure.test.check.random.mix_64(clojure.test.check.random.longs._PLUS_(self__.state,self__.gamma));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_double$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn clojure.test.check.random.doubles.rand_long__GT_rand_double(this$__$1.clojure$test$check$random$IRandom$rand_long$arity$1(null));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,self__.state);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state_SINGLEQUOTE__SINGLEQUOTE_)),(new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)))], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split_n$arity$2 = (function (this$,n){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__26232 = n;\nswitch (G__26232) {\ncase (0):\nreturn cljs.core.PersistentVector.EMPTY;\n\nbreak;\ncase (1):\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1], null);\n\nbreak;\ndefault:\nvar n_dec = (n - (1));\nvar state__$1 = self__.state;\nvar ret = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n_dec,cljs.core.count(ret))){\nreturn cljs.core.persistent_BANG_(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state__$1))));\n} else {\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state__$1);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nvar new_rng = (new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)));\nvar G__26243 = state_SINGLEQUOTE__SINGLEQUOTE_;\nvar G__26244 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,new_rng);\nstate__$1 = G__26243;\nret = G__26244;\ncontinue;\n}\nbreak;\n}\n\n}\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"gamma\",\"gamma\",-770466082,null),new cljs.core.Symbol(null,\"state\",\"state\",-348086572,null)], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$type = true;\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorStr = \"clojure.test.check.random/JavaUtilSplittableRandom\";\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorPrWriter = (function (this__4192__auto__,writer__4193__auto__,opt__4194__auto__){\nreturn cljs.core._write(writer__4193__auto__,\"clojure.test.check.random/JavaUtilSplittableRandom\");\n});\n\n/**\n * Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom.\n */\nclojure.test.check.random.__GT_JavaUtilSplittableRandom = (function clojure$test$check$random$__GT_JavaUtilSplittableRandom(gamma,state){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(gamma,state));\n});\n\nclojure.test.check.random.golden_gamma = clojure.test.check.random.hex_long(\"9e3779b97f4a7c15\");\nclojure.test.check.random.make_java_util_splittable_random = (function clojure$test$check$random$make_java_util_splittable_random(seed){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(clojure.test.check.random.golden_gamma,(function (){var or__3949__auto__ = clojure.test.check.random.longs.__GT_long(seed);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Bad random seed!\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null));\n}\n})()));\n});\nclojure.test.check.random.next_rng = (function (){var a = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),clojure.test.check.random.make_java_util_splittable_random((new Date()).valueOf())], null));\nreturn ((function (a){\nreturn (function (){\nreturn new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,((function (a){\nreturn (function (p__26252){\nvar map__26253 = p__26252;\nvar map__26253__$1 = ((((!((map__26253 == null)))?(((((map__26253.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__26253.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__26253):map__26253);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__26253__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar vec__26255 = clojure.test.check.random.split(state);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26255,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__26255,(1),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),r1,new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163),r2], null);\n});})(a))\n));\n});\n;})(a))\n})();\n/**\n * Given an optional integer (or goog.math.Long) seed, returns an\n *   implementation of the IRandom protocol.\n */\nclojure.test.check.random.make_random = (function clojure$test$check$random$make_random(var_args){\nvar G__26265 = arguments.length;\nswitch (G__26265) {\ncase 0:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn (clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0 ? clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0() : clojure.test.check.random.next_rng.call(null));\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1 = (function (seed){\nreturn clojure.test.check.random.make_java_util_splittable_random(seed);\n});\n\nclojure.test.check.random.make_random.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",27,"~:author","Gary Fredericks","~:doc","Purely functional and splittable pseudo-random number generators."],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.doubles","^O","~$doubles","^O","~$clojure.test.check.random.longs","^Q","~$longs","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$+","^Q","~$*","^Q","^F","^Q","^H","^Q","^E","^Q","^G","^Q"],"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^J",["^Z",["~:refer-clojure","~:exclude",["~$+","~$*","^F","^H","^E","^G"]]],["^Z",["^V",["^O","~:as","^P"],["^Q","^12","^R","~:refer",["~$+","~$*","^F","^H","^E","^G"]]]]]],"~:flags",["^ ","^V",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^O","^Q"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random.cljs"],"~:compiled-at",1537546389009,"~:resource-name","clojure/test/check/random.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n","~:reader-features",["^D",["~:cljs"]],"~:source-map",["^ ","~i18",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",4],["^ ","^1A",0,"^1B",4],["^ ","^1A",0,"^1B",5],["^ ","^1A",36,"^1B",8],["^ ","^1A",0,"^1B",10],["^ ","^1A",38,"^1B",16],["^ ","^1A",0,"^1B",17],["^ ","^1A",0,"^1B",17],["^ ","^1A",3,"^1B",17],["^ ","^1A",5,"^1B",17],["^ ","^1A",7,"^1B",17],["^ ","^1A",15,"^1B",17],["^ ","^1A",27,"^1B",17],["^ ","^1A",29,"^1B",17],["^ ","^1A",30,"^1B",17],["^ ","^1A",89,"^1B",17],["^ ","^1A",0,"^1B",18],["^ ","^1A",0,"^1B",20],["^ ","^1A",4,"^1B",20,"^I","x__4243__auto__"],["^ ","^1A",22,"^1B",20],["^ ","^1A",24,"^1B",20],["^ ","^1A",32,"^1B",20],["^ ","^1A",39,"^1B",20],["^ ","^1A",4,"^1B",21,"^I","m__4244__auto__"],["^ ","^1A",22,"^1B",21],["^ ","^1A",23,"^1B",21,"^I","clojure/test.check.random.rand-long"],["^ ","^1A",59,"^1B",21],["^ ","^1A",59,"^1B",21,"^I","goog/typeOf"],["^ ","^1A",71,"^1B",21,"^I","x__4243__auto__"],["^ ","^1A",0,"^1B",22],["^ ","^1A",0,"^1B",22],["^ ","^1A",3,"^1B",22],["^ ","^1A",5,"^1B",22],["^ ","^1A",6,"^1B",22,"^I","m__4244__auto__"],["^ ","^1A",25,"^1B",22],["^ ","^1A",0,"^1B",23],["^ ","^1A",8,"^1B",23,"^I","m__4244__auto__"],["^ ","^1A",56,"^1B",23,"^I","m__4244__auto__"],["^ ","^1A",109,"^1B",23,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",25],["^ ","^1A",4,"^1B",25,"^I","m__4244__auto__"],["^ ","^1A",26,"^1B",25],["^ ","^1A",27,"^1B",25,"^I","clojure/test.check.random.rand-long"],["^ ","^1A",63,"^1B",25],["^ ","^1A",0,"^1B",26],["^ ","^1A",0,"^1B",26],["^ ","^1A",3,"^1B",26],["^ ","^1A",5,"^1B",26],["^ ","^1A",6,"^1B",26,"^I","m__4244__auto__"],["^ ","^1A",29,"^1B",26],["^ ","^1A",0,"^1B",27],["^ ","^1A",8,"^1B",27,"^I","m__4244__auto__"],["^ ","^1A",60,"^1B",27,"^I","m__4244__auto__"],["^ ","^1A",117,"^1B",27,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",29],["^ ","^1A",6,"^1B",29],["^ ","^1A",6,"^1B",29,"^I","cljs.core/missing-protocol"],["^ ","^1A",33,"^1B",29],["^ ","^1A",0,"^1B",35],["^ ","^1A",40,"^1B",42],["^ ","^1A",0,"^1B",43],["^ ","^1A",0,"^1B",43],["^ ","^1A",3,"^1B",43],["^ ","^1A",5,"^1B",43],["^ ","^1A",7,"^1B",43],["^ ","^1A",15,"^1B",43],["^ ","^1A",27,"^1B",43],["^ ","^1A",29,"^1B",43],["^ ","^1A",30,"^1B",43],["^ ","^1A",91,"^1B",43],["^ ","^1A",0,"^1B",44],["^ ","^1A",0,"^1B",46],["^ ","^1A",4,"^1B",46,"^I","x__4243__auto__"],["^ ","^1A",22,"^1B",46],["^ ","^1A",24,"^1B",46],["^ ","^1A",32,"^1B",46],["^ ","^1A",39,"^1B",46],["^ ","^1A",4,"^1B",47,"^I","m__4244__auto__"],["^ ","^1A",22,"^1B",47],["^ ","^1A",23,"^1B",47,"^I","clojure/test.check.random.rand-double"],["^ ","^1A",61,"^1B",47],["^ ","^1A",61,"^1B",47,"^I","goog/typeOf"],["^ ","^1A",73,"^1B",47,"^I","x__4243__auto__"],["^ ","^1A",0,"^1B",48],["^ ","^1A",0,"^1B",48],["^ ","^1A",3,"^1B",48],["^ ","^1A",5,"^1B",48],["^ ","^1A",6,"^1B",48,"^I","m__4244__auto__"],["^ ","^1A",25,"^1B",48],["^ ","^1A",0,"^1B",49],["^ ","^1A",8,"^1B",49,"^I","m__4244__auto__"],["^ ","^1A",56,"^1B",49,"^I","m__4244__auto__"],["^ ","^1A",109,"^1B",49,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",51],["^ ","^1A",4,"^1B",51,"^I","m__4244__auto__"],["^ ","^1A",26,"^1B",51],["^ ","^1A",27,"^1B",51,"^I","clojure/test.check.random.rand-double"],["^ ","^1A",65,"^1B",51],["^ ","^1A",0,"^1B",52],["^ ","^1A",0,"^1B",52],["^ ","^1A",3,"^1B",52],["^ ","^1A",5,"^1B",52],["^ ","^1A",6,"^1B",52,"^I","m__4244__auto__"],["^ ","^1A",29,"^1B",52],["^ ","^1A",0,"^1B",53],["^ ","^1A",8,"^1B",53,"^I","m__4244__auto__"],["^ ","^1A",60,"^1B",53,"^I","m__4244__auto__"],["^ ","^1A",117,"^1B",53,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",55],["^ ","^1A",6,"^1B",55],["^ ","^1A",6,"^1B",55,"^I","cljs.core/missing-protocol"],["^ ","^1A",33,"^1B",55],["^ ","^1A",0,"^1B",61],["^ ","^1A",34,"^1B",68],["^ ","^1A",0,"^1B",69],["^ ","^1A",0,"^1B",69],["^ ","^1A",3,"^1B",69],["^ ","^1A",5,"^1B",69],["^ ","^1A",7,"^1B",69],["^ ","^1A",15,"^1B",69],["^ ","^1A",27,"^1B",69],["^ ","^1A",29,"^1B",69],["^ ","^1A",30,"^1B",69],["^ ","^1A",85,"^1B",69],["^ ","^1A",0,"^1B",70],["^ ","^1A",0,"^1B",72],["^ ","^1A",4,"^1B",72,"^I","x__4243__auto__"],["^ ","^1A",22,"^1B",72],["^ ","^1A",24,"^1B",72],["^ ","^1A",32,"^1B",72],["^ ","^1A",39,"^1B",72],["^ ","^1A",4,"^1B",73,"^I","m__4244__auto__"],["^ ","^1A",22,"^1B",73],["^ ","^1A",23,"^1B",73,"^I","clojure/test.check.random.split"],["^ ","^1A",55,"^1B",73],["^ ","^1A",55,"^1B",73,"^I","goog/typeOf"],["^ ","^1A",67,"^1B",73,"^I","x__4243__auto__"],["^ ","^1A",0,"^1B",74],["^ ","^1A",0,"^1B",74],["^ ","^1A",3,"^1B",74],["^ ","^1A",5,"^1B",74],["^ ","^1A",6,"^1B",74,"^I","m__4244__auto__"],["^ ","^1A",25,"^1B",74],["^ ","^1A",0,"^1B",75],["^ ","^1A",8,"^1B",75,"^I","m__4244__auto__"],["^ ","^1A",56,"^1B",75,"^I","m__4244__auto__"],["^ ","^1A",109,"^1B",75,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",77],["^ ","^1A",4,"^1B",77,"^I","m__4244__auto__"],["^ ","^1A",26,"^1B",77],["^ ","^1A",27,"^1B",77,"^I","clojure/test.check.random.split"],["^ ","^1A",59,"^1B",77],["^ ","^1A",0,"^1B",78],["^ ","^1A",0,"^1B",78],["^ ","^1A",3,"^1B",78],["^ ","^1A",5,"^1B",78],["^ ","^1A",6,"^1B",78,"^I","m__4244__auto__"],["^ ","^1A",29,"^1B",78],["^ ","^1A",0,"^1B",79],["^ ","^1A",8,"^1B",79,"^I","m__4244__auto__"],["^ ","^1A",60,"^1B",79,"^I","m__4244__auto__"],["^ ","^1A",117,"^1B",79,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",81],["^ ","^1A",6,"^1B",81],["^ ","^1A",6,"^1B",81,"^I","cljs.core/missing-protocol"],["^ ","^1A",33,"^1B",81],["^ ","^1A",0,"^1B",87],["^ ","^1A",36,"^1B",94],["^ ","^1A",0,"^1B",95],["^ ","^1A",0,"^1B",95],["^ ","^1A",3,"^1B",95],["^ ","^1A",5,"^1B",95],["^ ","^1A",7,"^1B",95],["^ ","^1A",15,"^1B",95],["^ ","^1A",27,"^1B",95],["^ ","^1A",29,"^1B",95],["^ ","^1A",30,"^1B",95],["^ ","^1A",87,"^1B",95],["^ ","^1A",0,"^1B",96],["^ ","^1A",0,"^1B",98],["^ ","^1A",4,"^1B",98,"^I","x__4243__auto__"],["^ ","^1A",22,"^1B",98],["^ ","^1A",24,"^1B",98],["^ ","^1A",32,"^1B",98],["^ ","^1A",39,"^1B",98],["^ ","^1A",4,"^1B",99,"^I","m__4244__auto__"],["^ ","^1A",22,"^1B",99],["^ ","^1A",23,"^1B",99,"^I","clojure/test.check.random.split-n"],["^ ","^1A",57,"^1B",99],["^ ","^1A",57,"^1B",99,"^I","goog/typeOf"],["^ ","^1A",69,"^1B",99,"^I","x__4243__auto__"],["^ ","^1A",0,"^1B",100],["^ ","^1A",0,"^1B",100],["^ ","^1A",3,"^1B",100],["^ ","^1A",5,"^1B",100],["^ ","^1A",6,"^1B",100,"^I","m__4244__auto__"],["^ ","^1A",25,"^1B",100],["^ ","^1A",0,"^1B",101],["^ ","^1A",8,"^1B",101,"^I","m__4244__auto__"],["^ ","^1A",56,"^1B",101,"^I","m__4244__auto__"],["^ ","^1A",111,"^1B",101,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",103],["^ ","^1A",4,"^1B",103,"^I","m__4244__auto__"],["^ ","^1A",26,"^1B",103],["^ ","^1A",27,"^1B",103,"^I","clojure/test.check.random.split-n"],["^ ","^1A",61,"^1B",103],["^ ","^1A",0,"^1B",104],["^ ","^1A",0,"^1B",104],["^ ","^1A",3,"^1B",104],["^ ","^1A",5,"^1B",104],["^ ","^1A",6,"^1B",104,"^I","m__4244__auto__"],["^ ","^1A",29,"^1B",104],["^ ","^1A",0,"^1B",105],["^ ","^1A",8,"^1B",105,"^I","m__4244__auto__"],["^ ","^1A",60,"^1B",105,"^I","m__4244__auto__"],["^ ","^1A",119,"^1B",105,"^I","m__4244__auto__"],["^ ","^1A",0,"^1B",107],["^ ","^1A",6,"^1B",107],["^ ","^1A",6,"^1B",107,"^I","cljs.core/missing-protocol"],["^ ","^1A",33,"^1B",107],["^ ","^1A",0,"^1B",113]],"~i13",[["^ ","^1A",0,"^1B",8,"^I","clojure.test.check.random/IRandom"]]],"~i19",["^ ","~i3",[["^ ","^1A",0,"^1B",16,"^I","clojure.test.check.random/rand-long"]],"~i14",[["^ ","^1A",84,"^1B",16,"^I","rng"],["^ ","^1A",8,"^1B",17,"^I","rng"],["^ ","^1A",30,"^1B",17,"^I","rng"],["^ ","^1A",7,"^1B",18,"^I","rng"],["^ ","^1A",63,"^1B",18,"^I","rng"],["^ ","^1A",25,"^1B",20,"^I","rng"],["^ ","^1A",44,"^1B",20,"^I","rng"],["^ ","^1A",102,"^1B",23,"^I","rng"],["^ ","^1A",135,"^1B",23,"^I","rng"],["^ ","^1A",110,"^1B",27,"^I","rng"],["^ ","^1A",147,"^1B",27,"^I","rng"],["^ ","^1A",53,"^1B",29,"^I","rng"]]],"~i24",["^ ","~i3",[["^ ","^1A",0,"^1B",42,"^I","clojure.test.check.random/rand-double"]],"~i16",[["^ ","^1A",88,"^1B",42,"^I","rng"],["^ ","^1A",8,"^1B",43,"^I","rng"],["^ ","^1A",30,"^1B",43,"^I","rng"],["^ ","^1A",7,"^1B",44,"^I","rng"],["^ ","^1A",65,"^1B",44,"^I","rng"],["^ ","^1A",25,"^1B",46,"^I","rng"],["^ ","^1A",44,"^1B",46,"^I","rng"],["^ ","^1A",102,"^1B",49,"^I","rng"],["^ ","^1A",135,"^1B",49,"^I","rng"],["^ ","^1A",110,"^1B",53,"^I","rng"],["^ ","^1A",147,"^1B",53,"^I","rng"],["^ ","^1A",55,"^1B",55,"^I","rng"]]],"~i30",["^ ","~i3",[["^ ","^1A",0,"^1B",68,"^I","clojure.test.check.random/split"]],"~i10",[["^ ","^1A",76,"^1B",68,"^I","rng"],["^ ","^1A",8,"^1B",69,"^I","rng"],["^ ","^1A",30,"^1B",69,"^I","rng"],["^ ","^1A",7,"^1B",70,"^I","rng"],["^ ","^1A",59,"^1B",70,"^I","rng"],["^ ","^1A",25,"^1B",72,"^I","rng"],["^ ","^1A",44,"^1B",72,"^I","rng"],["^ ","^1A",102,"^1B",75,"^I","rng"],["^ ","^1A",135,"^1B",75,"^I","rng"],["^ ","^1A",110,"^1B",79,"^I","rng"],["^ ","^1A",147,"^1B",79,"^I","rng"],["^ ","^1A",49,"^1B",81,"^I","rng"]]],"~i36",["^ ","~i3",[["^ ","^1A",0,"^1B",94,"^I","clojure.test.check.random/split-n"]],"~i12",[["^ ","^1A",80,"^1B",94,"^I","rng"],["^ ","^1A",8,"^1B",95,"^I","rng"],["^ ","^1A",30,"^1B",95,"^I","rng"],["^ ","^1A",7,"^1B",96,"^I","rng"],["^ ","^1A",61,"^1B",96,"^I","rng"],["^ ","^1A",25,"^1B",98,"^I","rng"],["^ ","^1A",44,"^1B",98,"^I","rng"],["^ ","^1A",102,"^1B",101,"^I","rng"],["^ ","^1A",137,"^1B",101,"^I","rng"],["^ ","^1A",110,"^1B",105,"^I","rng"],["^ ","^1A",149,"^1B",105,"^I","rng"],["^ ","^1A",51,"^1B",107,"^I","rng"]],"^1G",[["^ ","^1A",84,"^1B",94,"^I","n"],["^ ","^1A",65,"^1B",96,"^I","n"],["^ ","^1A",106,"^1B",101,"^I","n"],["^ ","^1A",141,"^1B",101,"^I","n"],["^ ","^1A",114,"^1B",105,"^I","n"],["^ ","^1A",153,"^1B",105,"^I","n"]]],"~i48",["^ ","~i0",[["^ ","^1A",0,"^1B",113],["^ ","^1A",37,"^1B",116],["^ ","^1A",0,"^1B",117]],"^1G",[["^ ","^1A",0,"^1B",116,"^I","clojure.test.check.random/hex-long"]]],"~i50",["^ ","~i3",[["^ ","^1A",82,"^1B",116,"^I","s"]]],"~i51",["^ ","~i2",[["^ ","^1A",0,"^1B",117],["^ ","^1A",53,"^1B",117]],"~i3",[["^ ","^1A",7,"^1B",117,"^I","clojure.test.check.random.longs/from-string"]],"~i21",[["^ ","^1A",51,"^1B",117,"^I","s"]]],"~i53",["^ ","~i0",[["^ ","^1A",0,"^1B",119],["^ ","^1A",36,"^1B",122],["^ ","^1A",0,"^1B",123]],"^1G",[["^ ","^1A",0,"^1B",122,"^I","clojure.test.check.random/bxoubsr"]]],"~i55",["^ ","~i3",[["^ ","^1A",80,"^1B",122,"^I","x"]],"~i5",[["^ ","^1A",82,"^1B",122,"^I","n"]]],"~i56",["^ ","~i6",[["^ ","^1A",104,"^1B",123,"^I","x"]],"~i8",[["^ ","^1A",47,"^1B",123]],"~i9",[["^ ","^1A",47,"^1B",123,"^I","clojure.test.check.random.longs/unsigned-bit-shift-right"]],"~i34",[["^ ","^1A",106,"^1B",123,"^I","n"]],"~i37",[["^ ","^1A",0,"^1B",123]],"~i38",[["^ ","^1A",7,"^1B",123,"^I","clojure.test.check.random.longs/bit-xor"]],"~i46",[["^ ","^1A",109,"^1B",123,"^I","x"]]],"~i58",["^ ","~i0",[["^ ","^1A",0,"^1B",125]],"~i15",[["^ ","^1A",0,"^1B",125,"^I","clojure.test.check.random/mix-64-const-1"]],"^1H",[["^ ","^1A",43,"^1B",125],["^ ","^1A",78,"^1B",125]],"~i31",[["^ ","^1A",43,"^1B",125,"^I","clojure.test.check.random/hex-long"]]],"~i59",["^ ","~i0",[["^ ","^1A",0,"^1B",126]],"^1X",[["^ ","^1A",0,"^1B",126,"^I","clojure.test.check.random/mix-64-const-2"]],"^1H",[["^ ","^1A",43,"^1B",126],["^ ","^1A",78,"^1B",126]],"^1Y",[["^ ","^1A",43,"^1B",126,"^I","clojure.test.check.random/hex-long"]]],"~i61",["^ ","~i0",[["^ ","^1A",0,"^1B",127],["^ ","^1A",35,"^1B",127],["^ ","^1A",0,"^1B",128]],"^1G",[["^ ","^1A",0,"^1B",127,"^I","clojure.test.check.random/mix-64"]]],"~i62",["^ ","~i3",[["^ ","^1A",78,"^1B",127,"^I","n"]]],"~i63",["^ ","~i6",[["^ ","^1A",187,"^1B",128,"^I","n"]]],"~i64",["^ ","~i6",[["^ ","^1A",153,"^1B",128],["^ ","^1A",189,"^1B",128]],"~i7",[["^ ","^1A",153,"^1B",128,"^I","clojure.test.check.random/bxoubsr"]]],"~i65",["^ ","~i6",[["^ ","^1A",114,"^1B",128]],"~i7",[["^ ","^1A",114,"^1B",128,"^I","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1A",195,"^1B",128,"^I","clojure.test.check.random/mix-64-const-1"]]],"~i66",["^ ","~i6",[["^ ","^1A",80,"^1B",128],["^ ","^1A",237,"^1B",128]],"~i7",[["^ ","^1A",80,"^1B",128,"^I","clojure.test.check.random/bxoubsr"]]],"~i67",["^ ","~i6",[["^ ","^1A",41,"^1B",128]],"~i7",[["^ ","^1A",41,"^1B",128,"^I","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1A",243,"^1B",128,"^I","clojure.test.check.random/mix-64-const-2"]]],"~i68",["^ ","~i6",[["^ ","^1A",0,"^1B",128],["^ ","^1A",285,"^1B",128]],"~i7",[["^ ","^1A",7,"^1B",128,"^I","clojure.test.check.random/bxoubsr"]]],"~i70",["^ ","~i0",[["^ ","^1A",0,"^1B",130]],"^1X",[["^ ","^1A",0,"^1B",130,"^I","clojure.test.check.random/mix-gamma-const-1"]],"~i33",[["^ ","^1A",46,"^1B",130],["^ ","^1A",81,"^1B",130]],"^1S",[["^ ","^1A",46,"^1B",130,"^I","clojure.test.check.random/hex-long"]]],"~i71",["^ ","~i0",[["^ ","^1A",0,"^1B",131]],"^1X",[["^ ","^1A",0,"^1B",131,"^I","clojure.test.check.random/mix-gamma-const-2"]],"^28",[["^ ","^1A",46,"^1B",131],["^ ","^1A",81,"^1B",131]],"^1S",[["^ ","^1A",46,"^1B",131,"^I","clojure.test.check.random/hex-long"]]],"~i72",["^ ","~i0",[["^ ","^1A",0,"^1B",132]],"^1X",[["^ ","^1A",0,"^1B",132,"^I","clojure.test.check.random/mix-gamma-const-3"]],"^28",[["^ ","^1A",46,"^1B",132],["^ ","^1A",81,"^1B",132]],"^1S",[["^ ","^1A",46,"^1B",132,"^I","clojure.test.check.random/hex-long"]]],"~i74",["^ ","~i0",[["^ ","^1A",0,"^1B",133],["^ ","^1A",38,"^1B",133],["^ ","^1A",0,"^1B",134]],"^1G",[["^ ","^1A",0,"^1B",133,"^I","clojure.test.check.random/mix-gamma"]]],"~i75",["^ ","~i3",[["^ ","^1A",84,"^1B",133,"^I","n"]]],"~i76",["^ ","~i6",[["^ ","^1A",227,"^1B",134,"^I","n"]]],"~i77",["^ ","~i6",[["^ ","^1A",193,"^1B",134],["^ ","^1A",229,"^1B",134]],"~i7",[["^ ","^1A",193,"^1B",134,"^I","clojure.test.check.random/bxoubsr"]]],"~i78",["^ ","~i6",[["^ ","^1A",154,"^1B",134]],"~i7",[["^ ","^1A",154,"^1B",134,"^I","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1A",235,"^1B",134,"^I","clojure.test.check.random/mix-gamma-const-1"]]],"~i79",["^ ","~i6",[["^ ","^1A",120,"^1B",134],["^ ","^1A",280,"^1B",134]],"~i7",[["^ ","^1A",120,"^1B",134,"^I","clojure.test.check.random/bxoubsr"]]],"~i80",["^ ","~i6",[["^ ","^1A",81,"^1B",134]],"~i7",[["^ ","^1A",81,"^1B",134,"^I","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1A",286,"^1B",134,"^I","clojure.test.check.random/mix-gamma-const-2"]]],"~i81",["^ ","~i6",[["^ ","^1A",47,"^1B",134],["^ ","^1A",331,"^1B",134]],"~i7",[["^ ","^1A",47,"^1B",134,"^I","clojure.test.check.random/bxoubsr"]]],"~i82",["^ ","~i6",[["^ ","^1A",8,"^1B",134]],"~i7",[["^ ","^1A",8,"^1B",134,"^I","clojure.test.check.random.longs/bit-or"]],"^1E",[["^ ","^1A",337,"^1B",134,"^I","clojure.test.check.random.longs/ONE"]]],"~i83",["^ ","~i6",[["^ ","^1A",0,"^1B",134],["^ ","^1A",0,"^1B",135]],"^1K",[["^ ","^1A",4,"^1B",134,"^I","z"]]],"~i84",["^ ","^1K",[["^ ","^1A",0,"^1B",135],["^ ","^1A",4,"^1B",135,"^I","G__26220"],["^ ","^1A",0,"^1B",136],["^ ","^1A",0,"^1B",136],["^ ","^1A",0,"^1B",141,"^I","G__26220"]],"~i20",[["^ ","^1A",15,"^1B",135,"^I","z"]]],"~i85",["^ ","^1E",[["^ ","^1A",3,"^1B",136],["^ ","^1A",4,"^1B",136]],"^1F",[["^ ","^1A",73,"^1B",136,"^I","z"]]],"~i86",["^ ","^1F",[["^ ","^1A",39,"^1B",136],["^ ","^1A",75,"^1B",136]],"~i25",[["^ ","^1A",39,"^1B",136,"^I","clojure.test.check.random/bxoubsr"]]],"~i87",["^ ","^1F",[["^ ","^1A",11,"^1B",136],["^ ","^1A",28,"^1B",136,"^I","G__26222"],["^ ","^1A",0,"^1B",137],["^ ","^1A",0,"^1B",137],["^ ","^1A",154,"^1B",137,"^I","G__26222"],["^ ","^1A",218,"^1B",137,"^I","G__26222"]],"^2I",[["^ ","^1A",8,"^1B",137,"^I","clojure.test.check.random.longs/bit-count"],["^ ","^1A",82,"^1B",137,"^I","clojure.test.check.random.longs/bit-count"],["^ ","^1A",166,"^1B",137,"^I","clojure.test.check.random.longs/bit-count"]]],"~i88",["^ ","^1E",[["^ ","^1A",0,"^1B",139],["^ ","^1A",47,"^1B",139,"^I","G__26220"]],"^1X",[["^ ","^1A",7,"^1B",139,"^I","clojure.test.check.random.longs/bit-xor"]],"~i23",[["^ ","^1A",56,"^1B",139,"^I","clojure.test.check.random/mix-gamma-const-3"]]],"~i90",["^ ","~i0",[["^ ","^1A",0,"^1B",144],["^ ","^1A",0,"^1B",144],["^ ","^1A",0,"^1B",153],["^ ","^1A",0,"^1B",153],["^ ","^1A",0,"^1B",153],["^ ","^1A",0,"^1B",153],["^ ","^1A",98,"^1B",153,"^I","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1A",0,"^1B",155],["^ ","^1A",0,"^1B",155],["^ ","^1A",0,"^1B",155],["^ ","^1A",115,"^1B",155],["^ ","^1A",0,"^1B",157],["^ ","^1A",0,"^1B",157],["^ ","^1A",12,"^1B",157],["^ ","^1A",0,"^1B",158],["^ ","^1A",0,"^1B",161],["^ ","^1A",0,"^1B",161],["^ ","^1A",0,"^1B",161],["^ ","^1A",117,"^1B",161],["^ ","^1A",0,"^1B",163],["^ ","^1A",0,"^1B",163],["^ ","^1A",16,"^1B",163],["^ ","^1A",0,"^1B",164],["^ ","^1A",0,"^1B",167],["^ ","^1A",0,"^1B",167],["^ ","^1A",0,"^1B",167],["^ ","^1A",111,"^1B",167],["^ ","^1A",0,"^1B",169],["^ ","^1A",0,"^1B",169],["^ ","^1A",16,"^1B",169],["^ ","^1A",0,"^1B",170],["^ ","^1A",0,"^1B",176],["^ ","^1A",0,"^1B",176],["^ ","^1A",0,"^1B",176],["^ ","^1A",113,"^1B",176],["^ ","^1A",0,"^1B",178],["^ ","^1A",0,"^1B",178],["^ ","^1A",16,"^1B",178],["^ ","^1A",0,"^1B",179],["^ ","^1A",0,"^1B",213],["^ ","^1A",0,"^1B",213],["^ ","^1A",62,"^1B",213],["^ ","^1A",0,"^1B",214],["^ ","^1A",0,"^1B",214],["^ ","^1A",90,"^1B",214],["^ ","^1A",149,"^1B",214],["^ ","^1A",0,"^1B",217],["^ ","^1A",0,"^1B",217],["^ ","^1A",68,"^1B",217],["^ ","^1A",0,"^1B",219],["^ ","^1A",0,"^1B",219],["^ ","^1A",71,"^1B",219],["^ ","^1A",0,"^1B",221],["^ ","^1A",0,"^1B",221],["^ ","^1A",76,"^1B",221],["^ ","^1A",87,"^1B",221,"^I","this__4192__auto__"],["^ ","^1A",106,"^1B",221,"^I","writer__4193__auto__"],["^ ","^1A",127,"^1B",221,"^I","opt__4194__auto__"],["^ ","^1A",0,"^1B",222],["^ ","^1A",0,"^1B",222],["^ ","^1A",7,"^1B",222,"^I","cljs.core/-write"],["^ ","^1A",24,"^1B",222,"^I","writer__4193__auto__"],["^ ","^1A",45,"^1B",222],["^ ","^1A",0,"^1B",225],["^ ","^1A",58,"^1B",228],["^ ","^1A",0,"^1B",229],["^ ","^1A",0,"^1B",229],["^ ","^1A",12,"^1B",229,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"~i9",[["^ ","^1A",0,"^1B",153,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",155,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",161,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",167,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",176,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",213,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",217,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",219,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",221,"^I","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",228,"^I","clojure.test.check.random/->JavaUtilSplittableRandom"],["^ ","^1A",0,"^1B",232,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"~i35",[["^ ","^1A",124,"^1B",228,"^I","gamma"],["^ ","^1A",63,"^1B",229,"^I","gamma"]],"~i41",[["^ ","^1A",130,"^1B",228,"^I","state"],["^ ","^1A",69,"^1B",229,"^I","state"]]],"~i92",["^ ","^1E",[["^ ","^1A",126,"^1B",155,"^I","_"],["^ ","^1A",4,"^1B",157,"^I","_"]]],"~i93",["^ ","~i8",[["^ ","^1A",79,"^1B",158,"^I","state"]],"^1E",[["^ ","^1A",40,"^1B",158]],"^1X",[["^ ","^1A",40,"^1B",158,"^I","clojure.test.check.random.longs/+"]],"~i17",[["^ ","^1A",92,"^1B",158,"^I","gamma"]],"^1F",[["^ ","^1A",0,"^1B",158]],"^2I",[["^ ","^1A",7,"^1B",158,"^I","clojure.test.check.random/mix-64"]]],"~i94",["^ ","^1G",[["^ ","^1A",128,"^1B",161,"^I","this"],["^ ","^1A",4,"^1B",163,"^I","this"]]],"~i95",["^ ","~i4",[["^ ","^1A",0,"^1B",164],["^ ","^1A",67,"^1B",164]],"~i8",[["^ ","^1A",67,"^1B",164,"^I","this"]],"^2L",[["^ ","^1A",7,"^1B",164,"^I","clojure.test.check.random.doubles/rand-long->rand-double"]]],"~i96",["^ ","^1I",[["^ ","^1A",122,"^1B",167,"^I","this"],["^ ","^1A",4,"^1B",169,"^I","this"]]],"~i97",["^ ","~i4",[["^ ","^1A",0,"^1B",170],["^ ","^1A",0,"^1B",173],["^ ","^1A",0,"^1B",173]],"^1I",[["^ ","^1A",4,"^1B",170,"^I","state'"]],"^2R",[["^ ","^1A",25,"^1B",170]],"^1@",[["^ ","^1A",25,"^1B",170,"^I","clojure.test.check.random.longs/+"]],"^2F",[["^ ","^1A",64,"^1B",170,"^I","gamma"]],"~i26",[["^ ","^1A",77,"^1B",170,"^I","state"]]],"~i98",["^ ","^1I",[["^ ","^1A",4,"^1B",171,"^I","state''"]],"^1@",[["^ ","^1A",38,"^1B",171]],"^1D",[["^ ","^1A",38,"^1B",171,"^I","clojure.test.check.random.longs/+"]],"^1O",[["^ ","^1A",77,"^1B",171,"^I","gamma"]],"~i27",[["^ ","^1A",90,"^1B",171,"^I","state'"]]],"~i99",["^ ","^1I",[["^ ","^1A",4,"^1B",172,"^I","gamma'"]],"^2R",[["^ ","^1A",25,"^1B",172]],"^1@",[["^ ","^1A",25,"^1B",172,"^I","clojure.test.check.random/mix-gamma"]],"~i28",[["^ ","^1A",61,"^1B",172,"^I","state''"]]],"~i100",["^ ","~i7",[["^ ","^1A",90,"^1B",173],["^ ","^1A",95,"^1B",173,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1S",[["^ ","^1A",146,"^1B",173,"^I","gamma"]],"~i40",[["^ ","^1A",159,"^1B",173,"^I","state''"]]],"~i101",["^ ","~i7",[["^ ","^1A",193,"^1B",173],["^ ","^1A",198,"^1B",173,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1S",[["^ ","^1A",249,"^1B",173,"^I","gamma'"]],"^2O",[["^ ","^1A",268,"^1B",173]],"~i42",[["^ ","^1A",268,"^1B",173,"^I","clojure.test.check.random/mix-64"]],"~i49",[["^ ","^1A",301,"^1B",173,"^I","state'"]]],"~i102",["^ ","^1K",[["^ ","^1A",124,"^1B",176,"^I","this"],["^ ","^1A",4,"^1B",178,"^I","this"]],"^2R",[["^ ","^1A",130,"^1B",176,"^I","n"]]],"~i103",["^ ","~i4",[["^ ","^1A",0,"^1B",179],["^ ","^1A",4,"^1B",179,"^I","G__26232"],["^ ","^1A",0,"^1B",180],["^ ","^1A",0,"^1B",180],["^ ","^1A",8,"^1B",180,"^I","G__26232"],["^ ","^1A",5,"^1B",181],["^ ","^1A",0,"^1B",182],["^ ","^1A",5,"^1B",185],["^ ","^1A",0,"^1B",186]],"^1I",[["^ ","^1A",15,"^1B",179,"^I","n"]]],"~i105",["^ ","~i9",[["^ ","^1A",90,"^1B",186,"^I","this"]]],"~i106",["^ ","~i6",[["^ ","^1A",0,"^1B",190],["^ ","^1A",0,"^1B",191]],"^1K",[["^ ","^1A",4,"^1B",190,"^I","n-dec"]],"^1@",[["^ ","^1A",12,"^1B",190],["^ ","^1A",17,"^1B",190]],"^2L",[["^ ","^1A",13,"^1B",190,"^I","n"]]],"~i107",["^ ","~i8",[["^ ","^1A",0,"^1B",191],["^ ","^1A",0,"^1B",194]],"^1X",[["^ ","^1A",4,"^1B",191,"^I","state"]],"^1O",[["^ ","^1A",16,"^1B",191,"^I","state"]]],"~i108",["^ ","^1X",[["^ ","^1A",4,"^1B",192,"^I","ret"]],"^1D",[["^ ","^1A",10,"^1B",192],["^ ","^1A",31,"^1B",192]],"^2F",[["^ ","^1A",10,"^1B",192,"^I","cljs.core/transient"]]],"~i109",["^ ","^1I",[["^ ","^1A",0,"^1B",194]],"^1E",[["^ ","^1A",3,"^1B",194]],"^1X",[["^ ","^1A",3,"^1B",194,"^I","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2R",[["^ ","^1A",48,"^1B",194,"^I","n-dec"]],"^2L",[["^ ","^1A",54,"^1B",194]],"^1F",[["^ ","^1A",54,"^1B",194,"^I","cljs.core/count"]],"^1H",[["^ ","^1A",70,"^1B",194,"^I","ret"]]],"~i110",["^ ","^1G",[["^ ","^1A",85,"^1B",195,"^I","ret"]]],"~i111",["^ ","^1G",[["^ ","^1A",34,"^1B",195]],"^2R",[["^ ","^1A",34,"^1B",195,"^I","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^2L",[["^ ","^1A",89,"^1B",195],["^ ","^1A",94,"^1B",195,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1M",[["^ ","^1A",145,"^1B",195,"^I","gamma"]],"^1R",[["^ ","^1A",158,"^1B",195,"^I","state"]]],"~i112",["^ ","^1G",[["^ ","^1A",0,"^1B",195]],"^2R",[["^ ","^1A",7,"^1B",195,"^I","cljs.core/persistent!"]]],"~i113",["^ ","^1K",[["^ ","^1A",0,"^1B",197],["^ ","^1A",0,"^1B",201]],"^1@",[["^ ","^1A",4,"^1B",197,"^I","state'"]],"^2I",[["^ ","^1A",25,"^1B",197]],"^2W",[["^ ","^1A",25,"^1B",197,"^I","clojure.test.check.random.longs/+"]],"^2[",[["^ ","^1A",64,"^1B",197,"^I","gamma"]],"^1S",[["^ ","^1A",77,"^1B",197,"^I","state"]]],"~i114",["^ ","^1@",[["^ ","^1A",4,"^1B",198,"^I","state''"]],"^2W",[["^ ","^1A",38,"^1B",198]],"^2Y",[["^ ","^1A",38,"^1B",198,"^I","clojure.test.check.random.longs/+"]],"~i29",[["^ ","^1A",77,"^1B",198,"^I","gamma"]],"^2N",[["^ ","^1A",90,"^1B",198,"^I","state'"]]],"~i115",["^ ","^1@",[["^ ","^1A",4,"^1B",199,"^I","gamma'"]],"^2I",[["^ ","^1A",25,"^1B",199]],"^2W",[["^ ","^1A",25,"^1B",199,"^I","clojure.test.check.random/mix-gamma"]],"^1J",[["^ ","^1A",61,"^1B",199,"^I","state''"]]],"~i116",["^ ","^1@",[["^ ","^1A",4,"^1B",200,"^I","new-rng"]],"^2W",[["^ ","^1A",14,"^1B",200],["^ ","^1A",19,"^1B",200,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1P",[["^ ","^1A",70,"^1B",200,"^I","gamma'"]],"~i60",[["^ ","^1A",89,"^1B",200]],"^1[",[["^ ","^1A",89,"^1B",200,"^I","clojure.test.check.random/mix-64"]],"^26",[["^ ","^1A",122,"^1B",200,"^I","state'"]]],"~i117",["^ ","^1E",[["^ ","^1A",0,"^1B",201]],"^1O",[["^ ","^1A",15,"^1B",201,"^I","state''"]],"^3A",[["^ ","^1A",15,"^1B",202]],"^1H",[["^ ","^1A",15,"^1B",202,"^I","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1J",[["^ ","^1A",66,"^1B",202,"^I","ret"]],"^31",[["^ ","^1A",70,"^1B",202,"^I","new-rng"]]],"~i119",["^ ","~i0",[["^ ","^1A",0,"^1B",232]],"^1X",[["^ ","^1A",0,"^1B",232,"^I","clojure.test.check.random/golden-gamma"]]],"~i120",["^ ","~i2",[["^ ","^1A",41,"^1B",232],["^ ","^1A",76,"^1B",232]],"~i3",[["^ ","^1A",41,"^1B",232,"^I","clojure.test.check.random/hex-long"]]],"~i122",["^ ","~i0",[["^ ","^1A",0,"^1B",233],["^ ","^1A",61,"^1B",233],["^ ","^1A",0,"^1B",234]],"~i6",[["^ ","^1A",0,"^1B",233,"^I","clojure.test.check.random/make-java-util-splittable-random"]]],"~i123",["^ ","~i3",[["^ ","^1A",130,"^1B",233,"^I","seed"]]],"~i124",["^ ","~i2",[["^ ","^1A",0,"^1B",234],["^ ","^1A",12,"^1B",234,"^I","clojure.test.check.random/JavaUtilSplittableRandom"]],"^3A",[["^ ","^1A",63,"^1B",234,"^I","clojure.test.check.random/golden-gamma"]]],"~i125",["^ ","^3A",[["^ ","^1A",102,"^1B",234],["^ ","^1A",119,"^1B",234,"^I","or__3949__auto__"],["^ ","^1A",0,"^1B",235],["^ ","^1A",0,"^1B",235],["^ ","^1A",20,"^1B",235,"^I","or__3949__auto__"],["^ ","^1A",0,"^1B",236,"^I","or__3949__auto__"]],"^28",[["^ ","^1A",138,"^1B",234]],"^1S",[["^ ","^1A",138,"^1B",234,"^I","clojure.test.check.random.longs/->long"]],"~i47",[["^ ","^1A",180,"^1B",234,"^I","seed"]]],"~i126",["^ ","^28",[["^ ","^1A",0,"^1B",238]],"^31",[["^ ","^1A",6,"^1B",238],["^ ","^1A",54,"^1B",238],["^ ","^1A",73,"^1B",238],["^ ","^1A",116,"^1B",238]],"^2O",[["^ ","^1A",6,"^1B",238,"^I","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]]],"~i127",["^ ","^1R",[["^ ","^1A",167,"^1B",238,"^I","seed"]]],"~i129",["^ ","~i0",[["^ ","^1A",0,"^1B",242]],"^1X",[["^ ","^1A",0,"^1B",242,"^I","clojure.test.check.random/next-rng"]]],"~i130",["^ ","~i2",[["^ ","^1A",37,"^1B",242],["^ ","^1A",0,"^1B",243]],"~i8",[["^ ","^1A",54,"^1B",242,"^I","a"]],"^1I",[["^ ","^1A",58,"^1B",242],["^ ","^1A",103,"^1B",242],["^ ","^1A",146,"^1B",242]],"~i11",[["^ ","^1A",58,"^1B",242,"^I","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i131",["^ ","^2R",[["^ ","^1A",202,"^1B",242]],"^1@",[["^ ","^1A",202,"^1B",242,"^I","clojure.test.check.random/make-java-util-splittable-random"]],"^1N",[["^ ","^1A",261,"^1B",242]],"^1[",[["^ ","^1A",261,"^1B",242],["^ ","^1A",266,"^1B",242,"^I","js/Date"]]],"~i132",["^ ","~i4",[["^ ","^1A",0,"^1B",243],["^ ","^1A",0,"^1B",245]]],"~i133",["^ ","~i6",[["^ ","^1A",0,"^1B",245],["^ ","^1A",7,"^1B",245]]],"~i134",["^ ","~i7",[["^ ","^1A",99,"^1B",245]],"~i8",[["^ ","^1A",99,"^1B",245,"^I","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1E",[["^ ","^1A",150,"^1B",245,"^I","a"]],"^1G",[["^ ","^1A",152,"^1B",245],["^ ","^1A",18,"^1B",246,"^I","p__26252"],["^ ","^1A",0,"^1B",247],["^ ","^1A",0,"^1B",247],["^ ","^1A",4,"^1B",247,"^I","map__26253"],["^ ","^1A",17,"^1B",247,"^I","p__26252"],["^ ","^1A",4,"^1B",248,"^I","map__26253"],["^ ","^1A",21,"^1B",248],["^ ","^1A",23,"^1B",248],["^ ","^1A",25,"^1B",248],["^ ","^1A",27,"^1B",248],["^ ","^1A",28,"^1B",248,"^I","map__26253"],["^ ","^1A",42,"^1B",248],["^ ","^1A",50,"^1B",248],["^ ","^1A",52,"^1B",248],["^ ","^1A",54,"^1B",248],["^ ","^1A",55,"^1B",248],["^ ","^1A",55,"^1B",248,"^I","map__26253"],["^ ","^1A",104,"^1B",248],["^ ","^1A",115,"^1B",248],["^ ","^1A",116,"^1B",248,"^I","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1A",148,"^1B",248],["^ ","^1A",148,"^1B",248,"^I","map__26253"],["^ ","^1A",179,"^1B",248],["^ ","^1A",184,"^1B",248],["^ ","^1A",191,"^1B",248],["^ ","^1A",199,"^1B",248],["^ ","^1A",199,"^1B",248,"^I","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1A",245,"^1B",248,"^I","cljs.core/hash-map"],["^ ","^1A",264,"^1B",248,"^I","map__26253"],["^ ","^1A",276,"^1B",248,"^I","map__26253"],["^ ","^1A",12,"^1B",249],["^ ","^1A",12,"^1B",249,"^I","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1A",56,"^1B",249,"^I","map__26253"],["^ ","^1A",71,"^1B",249],["^ ","^1A",0,"^1B",250]],"^3A",[["^ ","^1A",4,"^1B",249,"^I","state"]]],"~i135",["^ ","^1@",[["^ ","^1A",0,"^1B",250],["^ ","^1A",4,"^1B",250,"^I","vec__26255"],["^ ","^1A",9,"^1B",251],["^ ","^1A",9,"^1B",251,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1A",53,"^1B",251,"^I","vec__26255"],["^ ","^1A",64,"^1B",251],["^ ","^1A",68,"^1B",251],["^ ","^1A",9,"^1B",252],["^ ","^1A",9,"^1B",252,"^I","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1A",53,"^1B",252,"^I","vec__26255"],["^ ","^1A",64,"^1B",252],["^ ","^1A",68,"^1B",252],["^ ","^1A",0,"^1B",253],["^ ","^1A",0,"^1B",253],["^ ","^1A",50,"^1B",253],["^ ","^1A",109,"^1B",253]],"^2I",[["^ ","^1A",4,"^1B",251,"^I","r1"]],"^2[",[["^ ","^1A",4,"^1B",252,"^I","r2"]],"~i32",[["^ ","^1A",17,"^1B",250]],"^28",[["^ ","^1A",17,"^1B",250,"^I","clojure.test.check.random/split"]],"~i39",[["^ ","^1A",49,"^1B",250,"^I","state"]]],"~i136",["^ ","^2[",[["^ ","^1A",106,"^1B",253,"^I","r1"]],"^2O",[["^ ","^1A",171,"^1B",253,"^I","r2"]]],"~i138",["^ ","~i0",[["^ ","^1A",0,"^1B",259],["^ ","^1A",0,"^1B",259],["^ ","^1A",40,"^1B",263],["^ ","^1A",88,"^1B",263,"^I","var_args"],["^ ","^1A",0,"^1B",264],["^ ","^1A",0,"^1B",264],["^ ","^1A",4,"^1B",264,"^I","G__26265"],["^ ","^1A",15,"^1B",264],["^ ","^1A",15,"^1B",264],["^ ","^1A",0,"^1B",265],["^ ","^1A",0,"^1B",265],["^ ","^1A",8,"^1B",265,"^I","G__26265"],["^ ","^1A",5,"^1B",266],["^ ","^1A",0,"^1B",267],["^ ","^1A",7,"^1B",267,"^I","clojure.test.check.random/make-random"],["^ ","^1A",5,"^1B",270],["^ ","^1A",0,"^1B",271],["^ ","^1A",7,"^1B",271,"^I","clojure.test.check.random/make-random"],["^ ","^1A",75,"^1B",271],["^ ","^1A",76,"^1B",271],["^ ","^1A",86,"^1B",271],["^ ","^1A",0,"^1B",275],["^ ","^1A",6,"^1B",275],["^ ","^1A",11,"^1B",275,"^I","js/Error"],["^ ","^1A",17,"^1B",275],["^ ","^1A",18,"^1B",275],["^ ","^1A",80,"^1B",275],["^ ","^1A",80,"^1B",275],["^ ","^1A",0,"^1B",280],["^ ","^1A",0,"^1B",280],["^ ","^1A",70,"^1B",280],["^ ","^1A",0,"^1B",281],["^ ","^1A",0,"^1B",284],["^ ","^1A",0,"^1B",284],["^ ","^1A",70,"^1B",284],["^ ","^1A",0,"^1B",285],["^ ","^1A",0,"^1B",288],["^ ","^1A",0,"^1B",288],["^ ","^1A",64,"^1B",288],["^ ","^1A",0,"^1B",290]],"~i6",[["^ ","^1A",0,"^1B",263,"^I","clojure.test.check.random/make-random"],["^ ","^1A",0,"^1B",280,"^I","clojure.test.check.random/make-random"],["^ ","^1A",0,"^1B",284,"^I","clojure.test.check.random/make-random"],["^ ","^1A",0,"^1B",288,"^I","clojure.test.check.random/make-random"]]],"~i141",["^ ","~i6",[["^ ","^1A",0,"^1B",281]],"~i7",[["^ ","^1A",8,"^1B",281,"^I","clojure.test.check.random/next-rng"],["^ ","^1A",75,"^1B",281,"^I","clojure.test.check.random/next-rng"],["^ ","^1A",144,"^1B",281,"^I","clojure.test.check.random/next-rng"]]],"~i142",["^ ","~i4",[["^ ","^1A",81,"^1B",284,"^I","seed"]]],"~i143",["^ ","~i3",[["^ ","^1A",0,"^1B",285]],"~i4",[["^ ","^1A",7,"^1B",285,"^I","clojure.test.check.random/make-java-util-splittable-random"]],"^1T",[["^ ","^1A",66,"^1B",285,"^I","seed"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^S"],[1534380137000],["^18","goog/math/math.js"],[1530991559994,"^T","~$goog.array","~$goog.asserts"],["^18","goog/array/array.js"],[1530991559994,"^T","^47"],["^18","goog/debug/error.js"],[1530991559994,"^T"],["^18","clojure/test/check/random/doubles.cljs"],[1535586405418,"^T","^S","^Q"],["^18","goog/dom/nodetype.js"],[1530991559994,"^T"],["^18","clojure/test/check/random.cljs"],[1535586405418,"^T","^S","^O","^Q"],["^18","goog/object/object.js"],[1530991559994,"^T"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^18","goog/math/long.js"],[1530991559994,"^T","^47","~$goog.reflect"],["^18","goog/functions/functions.js"],[1530991559994,"^T"],["^18","goog/structs/map.js"],[1530991559994,"^T","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^18","goog/asserts/asserts.js"],[1530991559994,"^T","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^18","goog/uri/uri.js"],[1530991559994,"^T","^46","^47","^4?","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^18","goog/base.js"],[1530991559994],["^18","goog/structs/structs.js"],[1530991559994,"^T","^46","^4<"],["^18","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^T","^S"],["^18","goog/string/string.js"],[1530991559994,"^T"],["^18","goog/reflect/reflect.js"],[1530991559994,"^T"],["^18","goog/string/stringbuffer.js"],[1530991559994,"^T"],["^18","goog/iter/iter.js"],[1530991559994,"^T","^46","^47","~$goog.functions","~$goog.math"],["^18","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^4?","^4<","^46","~$goog.Uri","~$goog.string.StringBuffer"],["^18","clojure/test/check/random/longs.cljs"],[1535586405418,"^T","^S","~$clojure.test.check.random.longs.bit-count-impl","^4G"],["^18","goog/math/integer.js"],[1530991559994,"^T"],["^18","goog/uri/utils.js"],[1530991559994,"^T","^46","^47","^4?"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random.cljs","^7",12,"^8",2,"^9",12,"^:",27,"^;","Gary Fredericks","^<","Purely functional and splittable pseudo-random number generators."],"^=",["^ ","^>","^?","^@","^A"],"~:shadow/protocol-prefixes",["^D",["clojure$test$check$random$IRandom$"]],"^B",null,"^C",["^D",["^E","^F","^G","~$*","^H","~$+"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^D",["^V"]],"~:shadow/js-access-global",["^D",["Date","Error"]],"^W",["^ ","~$+","^Q","~$*","^Q","^F","^Q","^H","^Q","^E","^Q","^G","^Q"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^I","~$clojure.test.check.random/mix-gamma-const-1","^6","clojure/test/check/random.cljs","^7",71,"^8",1,"^9",71,"^:",33,"~:private",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",71,"^8",16,"^9",71,"^:",33,"^4R",true],"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",123,"^8",7,"^9",123,"^:",39,"~:arglists",["^Z",["~$quote",["^Z",[["~$seed"]]]]]],"^I","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^6","clojure/test/check/random.cljs","^:",39,"~:method-params",["^Z",[["^4Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"^7",123,"^9",123,"~:max-fixed-arity",1,"~:fn-var",true,"^4W",["^Z",["^4X",["^Z",[["^4Y"]]]]]],"~$rand-long",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",20,"^8",4,"^9",20,"^:",13,"~:protocol","~$clojure.test.check.random/IRandom","^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4W",["^Z",["^4X",["^Z",[["~$rng"]]]]]],"^56","^57","^I","~$clojure.test.check.random/rand-long","^4[",false,"^6","clojure/test/check/random.cljs","^:",13,"^50",["^Z",[["^58"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",19,"^9",20,"^53",1,"^54",true,"^4W",["^Z",["^4X",["^Z",[["^58"]]]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",62,"^8",17,"^9",62,"^:",23,"^4R",true,"^4W",["^Z",["^4X",["^Z",[["~$n"]]]]]],"^4R",true,"^I","~$clojure.test.check.random/mix-64","^4[",false,"^6","clojure/test/check/random.cljs","^:",23,"^50",["^Z",[["~$n"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",62,"^9",62,"^53",1,"^54",true,"^4W",["^Z",["^4X",["^Z",[["~$n"]]]]]],"~$golden-gamma",["^ ","^I","~$clojure.test.check.random/golden-gamma","^6","clojure/test/check/random.cljs","^7",120,"^8",1,"^9",120,"^:",28,"^4R",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",120,"^8",16,"^9",120,"^:",28,"^4R",true],"^4S","^4T"],"~$mix-gamma-const-2",["^ ","^I","~$clojure.test.check.random/mix-gamma-const-2","^6","clojure/test/check/random.cljs","^7",72,"^8",1,"^9",72,"^:",33,"^4R",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",72,"^8",16,"^9",72,"^:",33,"^4R",true],"^4S","^4T"],"~$mix-64-const-2",["^ ","^I","~$clojure.test.check.random/mix-64-const-2","^6","clojure/test/check/random.cljs","^7",60,"^8",1,"^9",60,"^:",30,"^4R",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",60,"^8",16,"^9",60,"^:",30,"^4R",true],"^4S","^4T"],"~$bxoubsr",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",54,"^8",17,"^9",54,"^:",24,"^4R",true,"^4W",["^Z",["^4X",["^Z",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^4R",true,"^I","~$clojure.test.check.random/bxoubsr","^4[",false,"^6","clojure/test/check/random.cljs","^:",24,"^50",["^Z",[["~$x","~$n"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",54,"^9",54,"^53",2,"^54",true,"^4W",["^Z",["^4X",["^Z",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",139,"^8",7,"^9",139,"^:",18,"^4W",["^Z",["^4X",["^Z",[[],["^4Y"]]]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^4[",false,"^53",1,"^50",["^Z",[[],["^4Y"]]],"^4W",["^Z",[[],["^4Y"]]],"^52",["^Z",[null,null]]]],"^I","~$clojure.test.check.random/make-random","^4[",false,"^6","clojure/test/check/random.cljs","^:",18,"^5E",["^ ","^4[",false,"^53",1,"^50",["^Z",[[],["^4Y"]]],"^4W",["^Z",[[],["^4Y"]]],"^52",["^Z",[null,null]]],"^50",["^Z",[[],["^4Y"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",139,"^9",139,"^53",1,"^54",true,"^4W",["^Z",[[],["^4Y"]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",75,"^8",17,"^9",75,"^:",26,"^4R",true,"^4W",["^Z",["^4X",["^Z",[["~$n"]]]]]],"^4R",true,"^I","~$clojure.test.check.random/mix-gamma","^4[",false,"^6","clojure/test/check/random.cljs","^:",26,"^50",["^Z",[["~$n"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",75,"^9",75,"^53",1,"^54",true,"^4W",["^Z",["^4X",["^Z",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^I","~$clojure.test.check.random/mix-gamma-const-3","^6","clojure/test/check/random.cljs","^7",73,"^8",1,"^9",73,"^:",33,"^4R",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",73,"^8",16,"^9",73,"^:",33,"^4R",true],"^4S","^4T"],"~$split-n",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",37,"^8",4,"^9",37,"^:",11,"^56","^57","^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4W",["^Z",["^4X",["^Z",[["^58","~$n"]]]]]],"^56","^57","^I","~$clojure.test.check.random/split-n","^4[",false,"^6","clojure/test/check/random.cljs","^:",11,"^50",["^Z",[["^58","~$n"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",19,"^9",37,"^53",2,"^54",true,"^4W",["^Z",["^4X",["^Z",[["^58","~$n"]]]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^I","~$clojure.test.check.random/next-rng","^6","clojure/test/check/random.cljs","^7",130,"^8",1,"^9",130,"^:",24,"^4R",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",130,"^8",16,"^9",130,"^:",24,"^4R",true],"^4S","~$function"],"~$hex-long",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",49,"^8",17,"^9",49,"^:",25,"^4R",true,"^4W",["^Z",["^4X",["^Z",[["~$s"]]]]],"^<","Helper for defining constants."],"^4R",true,"^I","~$clojure.test.check.random/hex-long","^4[",false,"^6","clojure/test/check/random.cljs","^:",25,"^50",["^Z",[["~$s"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",49,"^9",49,"^53",1,"^54",true,"^4W",["^Z",["^4X",["^Z",[["~$s"]]]]],"^<","Helper for defining constants."],"~$rand-double",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",25,"^8",4,"^9",25,"^:",15,"^56","^57","^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4W",["^Z",["^4X",["^Z",[["^58"]]]]]],"^56","^57","^I","~$clojure.test.check.random/rand-double","^4[",false,"^6","clojure/test/check/random.cljs","^:",15,"^50",["^Z",[["^58"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",19,"^9",25,"^53",1,"^54",true,"^4W",["^Z",["^4X",["^Z",[["^58"]]]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^I","~$clojure.test.check.random/mix-64-const-1","^6","clojure/test/check/random.cljs","^7",59,"^8",1,"^9",59,"^:",30,"^4R",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",59,"^8",16,"^9",59,"^:",30,"^4R",true],"^4S","^4T"],"~$split",["^ ","^4V",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",31,"^8",4,"^9",31,"^:",9,"^56","^57","^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4W",["^Z",["^4X",["^Z",[["^58"]]]]]],"^56","^57","^I","~$clojure.test.check.random/split","^4[",false,"^6","clojure/test/check/random.cljs","^:",9,"^50",["^Z",[["^58"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^7",19,"^9",31,"^53",1,"^54",true,"^4W",["^Z",["^4X",["^Z",[["^58"]]]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^D",["^57"]],"^I","~$clojure.test.check.random/JavaUtilSplittableRandom","^6","clojure/test/check/random.cljs","^:",34,"~:type",true,"^8",10,"^7",91,"~:record",false,"^9",91,"^4S","^5O","~:skip-protocol-flag",null],"~$IRandom",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",19,"^8",14,"^9",19,"^:",21,"^<",null,"~:protocol-symbol",true,"~:jsdoc",["^Z",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^55",[["^58"]],"^5R",[["^58"]],"^5V",[["^58"]],"^5K",[["^58","~$n"]]]]],"^64",true,"^I","^57","^6","clojure/test/check/random.cljs","^:",21,"^8",1,"^7",19,"^66",["^ ","^67",["^ ","^55",[["^58"]],"^5R",[["^58"]],"^5V",[["^58"]],"^5K",[["^58","~$n"]]]],"~:info",null,"^9",19,"^4S","^4T","~:impls",["^D",["^5["]],"^<",null,"^65",["^Z",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^4V",null,"^5",["^ ","^5Z",["^D",["^57"]],"^6","clojure/test/check/random.cljs","^:",34,"^8",10,"~:factory","~:positional","^7",91,"^9",91,"^4W",["^Z",["^4X",["^Z",[["~$gamma","~$state"]]]]],"^62",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."],"^5Z",["^D",["^57"]],"^I","~$clojure.test.check.random/->JavaUtilSplittableRandom","^4[",false,"^6","clojure/test/check/random.cljs","^:",34,"^50",["^Z",[["^6=","^6>"]]],"^51",null,"^52",["^Z",[null,null]],"^8",1,"^6;","^6<","^7",91,"^9",91,"^53",2,"^54",true,"^4W",["^Z",["^4X",["^Z",[["^6=","^6>"]]]]],"^62",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^D",["~:returned","~:state","~:seed","^6>","^6="]],"~:order",["^6=","^6>","^6C","^6B","^6A"]],"^14",["^ ","^V",["^D",[]]],"^15",["^ "],"^16",["^T","^S","^O","^Q"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^44",[["^6G","~:static-fns"],true,["^6G","~:elide-asserts"],false,["^6G","~:optimize-constants"],null,["^6G","~:external-config"],null,["^6G","~:tooling-config"],null,["^6G","~:emit-constants"],null,["^6G","~:infer-externs"],true,["^6G","^1="],null,["~:js-options","~:js-provider"],"^V",["~:mode"],"~:dev",["^6G","~:fn-invoke-direct"],null,["^6G","^1?"],"/dev/null"]]]