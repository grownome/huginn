["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.doubles');\ngoog.require('clojure.test.check.random.longs');\n\n/**\n * @interface\n */\nclojure.test.check.random.IRandom = function(){};\n\n/**\n * Returns a random goog.math.Long based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_long = (function clojure$test$check$random$rand_long(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$rand_long$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$rand_long$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.rand_long[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.rand_long[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-long\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n *   based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_double = (function clojure$test$check$random$rand_double(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$rand_double$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$rand_double$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.rand_double[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.rand_double[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-double\",rng);\n}\n}\n}\n});\n\n/**\n * Returns two new RNGs [rng1 rng2], which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split = (function clojure$test$check$random$split(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$split$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$split$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.split[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.split[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a collection of `n` RNGs, which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split_n = (function clojure$test$check$random$split_n(rng,n){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$split_n$arity$2 == null))))){\nreturn rng.clojure$test$check$random$IRandom$split_n$arity$2(rng,n);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.split_n[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4244__auto__.call(null,rng,n));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.split_n[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4244__auto____$1.call(null,rng,n));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split-n\",rng);\n}\n}\n}\n});\n\n/**\n * Helper for defining constants.\n */\nclojure.test.check.random.hex_long = (function clojure$test$check$random$hex_long(s){\nreturn clojure.test.check.random.longs.from_string(s,(16));\n});\n/**\n * Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\n */\nclojure.test.check.random.bxoubsr = (function clojure$test$check$random$bxoubsr(x,n){\nreturn clojure.test.check.random.longs.bit_xor(clojure.test.check.random.longs.unsigned_bit_shift_right(x,n),x);\n});\nclojure.test.check.random.mix_64_const_1 = clojure.test.check.random.hex_long(\"bf58476d1ce4e5b9\");\nclojure.test.check.random.mix_64_const_2 = clojure.test.check.random.hex_long(\"94d049bb133111eb\");\nclojure.test.check.random.mix_64 = (function clojure$test$check$random$mix_64(n){\nreturn clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(30)),clojure.test.check.random.mix_64_const_1),(27)),clojure.test.check.random.mix_64_const_2),(31));\n});\nclojure.test.check.random.mix_gamma_const_1 = clojure.test.check.random.hex_long(\"ff51afd7ed558ccd\");\nclojure.test.check.random.mix_gamma_const_2 = clojure.test.check.random.hex_long(\"c4ceb9fe1a85ec53\");\nclojure.test.check.random.mix_gamma_const_3 = clojure.test.check.random.hex_long(\"aaaaaaaaaaaaaaaa\");\nclojure.test.check.random.mix_gamma = (function clojure$test$check$random$mix_gamma(n){\nvar z = clojure.test.check.random.longs.bit_or(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(33)),clojure.test.check.random.mix_gamma_const_1),(33)),clojure.test.check.random.mix_gamma_const_2),(33)),clojure.test.check.random.longs.ONE);\nvar G__27576 = z;\nif(((24) > (function (){var G__27577 = clojure.test.check.random.bxoubsr(z,(1));\nreturn (clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1(G__27577) : clojure.test.check.random.longs.bit_count.call(null,G__27577));\n})())){\nreturn clojure.test.check.random.longs.bit_xor(G__27576,clojure.test.check.random.mix_gamma_const_3);\n} else {\nreturn G__27576;\n}\n});\n\n/**\n* @constructor\n * @implements {clojure.test.check.random.IRandom}\n*/\nclojure.test.check.random.JavaUtilSplittableRandom = (function (gamma,state){\nthis.gamma = gamma;\nthis.state = state;\n});\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_long$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn clojure.test.check.random.mix_64(clojure.test.check.random.longs._PLUS_(self__.state,self__.gamma));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_double$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn clojure.test.check.random.doubles.rand_long__GT_rand_double(this$__$1.clojure$test$check$random$IRandom$rand_long$arity$1(null));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,self__.state);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state_SINGLEQUOTE__SINGLEQUOTE_)),(new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)))], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split_n$arity$2 = (function (this$,n){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__27587 = n;\nswitch (G__27587) {\ncase (0):\nreturn cljs.core.PersistentVector.EMPTY;\n\nbreak;\ncase (1):\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1], null);\n\nbreak;\ndefault:\nvar n_dec = (n - (1));\nvar state__$1 = self__.state;\nvar ret = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n_dec,cljs.core.count(ret))){\nreturn cljs.core.persistent_BANG_(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state__$1))));\n} else {\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state__$1);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nvar new_rng = (new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)));\nvar G__27678 = state_SINGLEQUOTE__SINGLEQUOTE_;\nvar G__27679 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,new_rng);\nstate__$1 = G__27678;\nret = G__27679;\ncontinue;\n}\nbreak;\n}\n\n}\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"gamma\",\"gamma\",-770466082,null),new cljs.core.Symbol(null,\"state\",\"state\",-348086572,null)], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$type = true;\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorStr = \"clojure.test.check.random/JavaUtilSplittableRandom\";\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorPrWriter = (function (this__4192__auto__,writer__4193__auto__,opt__4194__auto__){\nreturn cljs.core._write(writer__4193__auto__,\"clojure.test.check.random/JavaUtilSplittableRandom\");\n});\n\n/**\n * Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom.\n */\nclojure.test.check.random.__GT_JavaUtilSplittableRandom = (function clojure$test$check$random$__GT_JavaUtilSplittableRandom(gamma,state){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(gamma,state));\n});\n\nclojure.test.check.random.golden_gamma = clojure.test.check.random.hex_long(\"9e3779b97f4a7c15\");\nclojure.test.check.random.make_java_util_splittable_random = (function clojure$test$check$random$make_java_util_splittable_random(seed){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(clojure.test.check.random.golden_gamma,(function (){var or__3949__auto__ = clojure.test.check.random.longs.__GT_long(seed);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Bad random seed!\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null));\n}\n})()));\n});\nclojure.test.check.random.next_rng = (function (){var a = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),clojure.test.check.random.make_java_util_splittable_random((new Date()).valueOf())], null));\nreturn ((function (a){\nreturn (function (){\nreturn new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,((function (a){\nreturn (function (p__27613){\nvar map__27614 = p__27613;\nvar map__27614__$1 = ((((!((map__27614 == null)))?(((((map__27614.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27614.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27614):map__27614);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27614__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar vec__27617 = clojure.test.check.random.split(state);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27617,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27617,(1),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),r1,new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163),r2], null);\n});})(a))\n));\n});\n;})(a))\n})();\n/**\n * Given an optional integer (or goog.math.Long) seed, returns an\n *   implementation of the IRandom protocol.\n */\nclojure.test.check.random.make_random = (function clojure$test$check$random$make_random(var_args){\nvar G__27625 = arguments.length;\nswitch (G__27625) {\ncase 0:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn (clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0 ? clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0() : clojure.test.check.random.next_rng.call(null));\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1 = (function (seed){\nreturn clojure.test.check.random.make_java_util_splittable_random(seed);\n});\n\nclojure.test.check.random.make_random.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",27,"~:author","Gary Fredericks","~:doc","Purely functional and splittable pseudo-random number generators."],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.doubles","^O","~$doubles","^O","~$clojure.test.check.random.longs","^Q","~$longs","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$+","^Q","~$*","^Q","^F","^Q","^H","^Q","^E","^Q","^G","^Q"],"~:require-macros",["^ ","^S","^S"],"~:form",["~#list",["~$ns","^J",["^Z",["~:refer-clojure","~:exclude",["~$+","~$*","^F","^H","^E","^G"]]],["^Z",["^V",["^O","~:as","^P"],["^Q","^12","^R","~:refer",["~$+","~$*","^F","^H","^E","^G"]]]]]],"~:flags",["^ ","^V",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^O","^Q"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random.cljs"],"~:compiled-at",1540144999729,"~:resource-name","clojure/test/check/random.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["x__4243__auto__","m__4244__auto__","clojure/test.check.random.rand-long","goog/typeOf","cljs.core/missing-protocol","clojure/test.check.random.rand-double","clojure/test.check.random.split","clojure/test.check.random.split-n","clojure.test.check.random/IRandom","clojure.test.check.random/rand-long","rng","clojure.test.check.random/rand-double","clojure.test.check.random/split","clojure.test.check.random/split-n","n","clojure.test.check.random/hex-long","s","clojure.test.check.random.longs/from-string","clojure.test.check.random/bxoubsr","x","clojure.test.check.random.longs/unsigned-bit-shift-right","clojure.test.check.random.longs/bit-xor","clojure.test.check.random/mix-64-const-1","clojure.test.check.random/mix-64-const-2","clojure.test.check.random/mix-64","clojure.test.check.random.longs/*","clojure.test.check.random/mix-gamma-const-1","clojure.test.check.random/mix-gamma-const-2","clojure.test.check.random/mix-gamma-const-3","clojure.test.check.random/mix-gamma","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/ONE","z","G__27576","G__27577","clojure.test.check.random.longs/bit-count","cljs.core/PROTOCOL_SENTINEL","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","clojure.test.check.random/JavaUtilSplittableRandom","clojure.test.check.random/->JavaUtilSplittableRandom","gamma","state","_","clojure.test.check.random.longs/+","this","clojure.test.check.random.doubles/rand-long->rand-double","state'","state''","gamma'","G__27587","n-dec","ret","cljs.core/transient","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/persistent!","new-rng","clojure.test.check.random/golden-gamma","clojure.test.check.random/make-java-util-splittable-random","seed","or__3949__auto__","clojure.test.check.random.longs/->long","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","clojure.test.check.random/next-rng","a","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/Date","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p__27613","map__27614","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__27617","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","r1","r2","var_args","G__27625","clojure.test.check.random/make-random","js/Error"]]],"~:cache-keys",["~#cmap",[["~:macro","^S"],[1534380137000],["^18","goog/math/math.js"],[1530991559994,"^T","~$goog.array","~$goog.asserts"],["^18","goog/array/array.js"],[1530991559994,"^T","^1G"],["^18","goog/debug/error.js"],[1530991559994,"^T"],["^18","clojure/test/check/random/doubles.cljs"],[1535586405418,"^T","^S","^Q"],["^18","goog/dom/nodetype.js"],[1530991559994,"^T"],["^18","clojure/test/check/random.cljs"],[1535586405418,"^T","^S","^O","^Q"],["^18","goog/object/object.js"],[1530991559994,"^T"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^18","goog/math/long.js"],[1530991559994,"^T","^1G","~$goog.reflect"],["^18","goog/functions/functions.js"],[1530991559994,"^T"],["^18","goog/structs/map.js"],[1530991559994,"^T","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^18","goog/asserts/asserts.js"],[1530991559994,"^T","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^18","goog/uri/uri.js"],[1530991559994,"^T","^1F","^1G","^1O","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^18","goog/base.js"],[1530991559994],["^18","goog/structs/structs.js"],[1530991559994,"^T","^1F","^1L"],["^18","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^T","^S"],["^18","goog/string/string.js"],[1530991559994,"^T"],["^18","goog/reflect/reflect.js"],[1530991559994,"^T"],["^18","goog/string/stringbuffer.js"],[1530991559994,"^T"],["^18","goog/iter/iter.js"],[1530991559994,"^T","^1F","^1G","~$goog.functions","~$goog.math"],["^18","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1O","^1L","^1F","~$goog.Uri","~$goog.string.StringBuffer"],["^18","clojure/test/check/random/longs.cljs"],[1535586405418,"^T","^S","~$clojure.test.check.random.longs.bit-count-impl","^1W"],["^18","goog/math/integer.js"],[1530991559994,"^T"],["^18","goog/uri/utils.js"],[1530991559994,"^T","^1F","^1G","^1O"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random.cljs","^7",12,"^8",2,"^9",12,"^:",27,"^;","Gary Fredericks","^<","Purely functional and splittable pseudo-random number generators."],"^=",["^ ","^>","^?","^@","^A"],"~:shadow/protocol-prefixes",["^D",["clojure$test$check$random$IRandom$"]],"^B",null,"^C",["^D",["^E","^F","^G","~$*","^H","~$+"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^D",["^V"]],"~:shadow/js-access-global",["^D",["Date","Error"]],"^W",["^ ","~$+","^Q","~$*","^Q","^F","^Q","^H","^Q","^E","^Q","^G","^Q"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^I","~$clojure.test.check.random/mix-gamma-const-1","^6","clojure/test/check/random.cljs","^7",71,"^8",1,"^9",71,"^:",33,"~:private",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",71,"^8",16,"^9",71,"^:",33,"^26",true],"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",123,"^8",7,"^9",123,"^:",39,"~:arglists",["^Z",["~$quote",["^Z",[["~$seed"]]]]]],"^I","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^6","clojure/test/check/random.cljs","^:",39,"~:method-params",["^Z",[["^2="]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"^7",123,"^9",123,"~:max-fixed-arity",1,"~:fn-var",true,"^2;",["^Z",["^2<",["^Z",[["^2="]]]]]],"~$rand-long",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",20,"^8",4,"^9",20,"^:",13,"~:protocol","~$clojure.test.check.random/IRandom","^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^2;",["^Z",["^2<",["^Z",[["~$rng"]]]]]],"^2F","^2G","^I","~$clojure.test.check.random/rand-long","^2?",false,"^6","clojure/test/check/random.cljs","^:",13,"^2@",["^Z",[["^2H"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",19,"^9",20,"^2C",1,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["^2H"]]]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",62,"^8",17,"^9",62,"^:",23,"^26",true,"^2;",["^Z",["^2<",["^Z",[["~$n"]]]]]],"^26",true,"^I","~$clojure.test.check.random/mix-64","^2?",false,"^6","clojure/test/check/random.cljs","^:",23,"^2@",["^Z",[["~$n"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",62,"^9",62,"^2C",1,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["~$n"]]]]]],"~$golden-gamma",["^ ","^I","~$clojure.test.check.random/golden-gamma","^6","clojure/test/check/random.cljs","^7",120,"^8",1,"^9",120,"^:",28,"^26",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",120,"^8",16,"^9",120,"^:",28,"^26",true],"^27","^28"],"~$mix-gamma-const-2",["^ ","^I","~$clojure.test.check.random/mix-gamma-const-2","^6","clojure/test/check/random.cljs","^7",72,"^8",1,"^9",72,"^:",33,"^26",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",72,"^8",16,"^9",72,"^:",33,"^26",true],"^27","^28"],"~$mix-64-const-2",["^ ","^I","~$clojure.test.check.random/mix-64-const-2","^6","clojure/test/check/random.cljs","^7",60,"^8",1,"^9",60,"^:",30,"^26",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",60,"^8",16,"^9",60,"^:",30,"^26",true],"^27","^28"],"~$bxoubsr",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",54,"^8",17,"^9",54,"^:",24,"^26",true,"^2;",["^Z",["^2<",["^Z",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^26",true,"^I","~$clojure.test.check.random/bxoubsr","^2?",false,"^6","clojure/test/check/random.cljs","^:",24,"^2@",["^Z",[["~$x","~$n"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",54,"^9",54,"^2C",2,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",139,"^8",7,"^9",139,"^:",18,"^2;",["^Z",["^2<",["^Z",[[],["^2="]]]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^2?",false,"^2C",1,"^2@",["^Z",[[],["^2="]]],"^2;",["^Z",[[],["^2="]]],"^2B",["^Z",[null,null]]]],"^I","~$clojure.test.check.random/make-random","^2?",false,"^6","clojure/test/check/random.cljs","^:",18,"^2U",["^ ","^2?",false,"^2C",1,"^2@",["^Z",[[],["^2="]]],"^2;",["^Z",[[],["^2="]]],"^2B",["^Z",[null,null]]],"^2@",["^Z",[[],["^2="]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",139,"^9",139,"^2C",1,"^2D",true,"^2;",["^Z",[[],["^2="]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",75,"^8",17,"^9",75,"^:",26,"^26",true,"^2;",["^Z",["^2<",["^Z",[["~$n"]]]]]],"^26",true,"^I","~$clojure.test.check.random/mix-gamma","^2?",false,"^6","clojure/test/check/random.cljs","^:",26,"^2@",["^Z",[["~$n"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",75,"^9",75,"^2C",1,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^I","~$clojure.test.check.random/mix-gamma-const-3","^6","clojure/test/check/random.cljs","^7",73,"^8",1,"^9",73,"^:",33,"^26",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",73,"^8",16,"^9",73,"^:",33,"^26",true],"^27","^28"],"~$split-n",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",37,"^8",4,"^9",37,"^:",11,"^2F","^2G","^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^2;",["^Z",["^2<",["^Z",[["^2H","~$n"]]]]]],"^2F","^2G","^I","~$clojure.test.check.random/split-n","^2?",false,"^6","clojure/test/check/random.cljs","^:",11,"^2@",["^Z",[["^2H","~$n"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",19,"^9",37,"^2C",2,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["^2H","~$n"]]]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^I","~$clojure.test.check.random/next-rng","^6","clojure/test/check/random.cljs","^7",130,"^8",1,"^9",130,"^:",24,"^26",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",130,"^8",16,"^9",130,"^:",24,"^26",true],"^27","~$function"],"~$hex-long",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",49,"^8",17,"^9",49,"^:",25,"^26",true,"^2;",["^Z",["^2<",["^Z",[["~$s"]]]]],"^<","Helper for defining constants."],"^26",true,"^I","~$clojure.test.check.random/hex-long","^2?",false,"^6","clojure/test/check/random.cljs","^:",25,"^2@",["^Z",[["~$s"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",49,"^9",49,"^2C",1,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["~$s"]]]]],"^<","Helper for defining constants."],"~$rand-double",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",25,"^8",4,"^9",25,"^:",15,"^2F","^2G","^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^2;",["^Z",["^2<",["^Z",[["^2H"]]]]]],"^2F","^2G","^I","~$clojure.test.check.random/rand-double","^2?",false,"^6","clojure/test/check/random.cljs","^:",15,"^2@",["^Z",[["^2H"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",19,"^9",25,"^2C",1,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["^2H"]]]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^I","~$clojure.test.check.random/mix-64-const-1","^6","clojure/test/check/random.cljs","^7",59,"^8",1,"^9",59,"^:",30,"^26",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",59,"^8",16,"^9",59,"^:",30,"^26",true],"^27","^28"],"~$split",["^ ","^2:",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",31,"^8",4,"^9",31,"^:",9,"^2F","^2G","^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^2;",["^Z",["^2<",["^Z",[["^2H"]]]]]],"^2F","^2G","^I","~$clojure.test.check.random/split","^2?",false,"^6","clojure/test/check/random.cljs","^:",9,"^2@",["^Z",[["^2H"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^7",19,"^9",31,"^2C",1,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["^2H"]]]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^D",["^2G"]],"^I","~$clojure.test.check.random/JavaUtilSplittableRandom","^6","clojure/test/check/random.cljs","^:",34,"~:type",true,"^8",10,"^7",91,"~:record",false,"^9",91,"^27","^33","~:skip-protocol-flag",null],"~$IRandom",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",19,"^8",14,"^9",19,"^:",21,"^<",null,"~:protocol-symbol",true,"~:jsdoc",["^Z",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^2E",[["^2H"]],"^36",[["^2H"]],"^3:",[["^2H"]],"^2[",[["^2H","~$n"]]]]],"^3D",true,"^I","^2G","^6","clojure/test/check/random.cljs","^:",21,"^8",1,"^7",19,"^3F",["^ ","^3G",["^ ","^2E",[["^2H"]],"^36",[["^2H"]],"^3:",[["^2H"]],"^2[",[["^2H","~$n"]]]],"~:info",null,"^9",19,"^27","^28","~:impls",["^D",["^3?"]],"^<",null,"^3E",["^Z",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^2:",null,"^5",["^ ","^3>",["^D",["^2G"]],"^6","clojure/test/check/random.cljs","^:",34,"^8",10,"~:factory","~:positional","^7",91,"^9",91,"^2;",["^Z",["^2<",["^Z",[["~$gamma","~$state"]]]]],"^3B",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."],"^3>",["^D",["^2G"]],"^I","~$clojure.test.check.random/->JavaUtilSplittableRandom","^2?",false,"^6","clojure/test/check/random.cljs","^:",34,"^2@",["^Z",[["^3M","^3N"]]],"^2A",null,"^2B",["^Z",[null,null]],"^8",1,"^3K","^3L","^7",91,"^9",91,"^2C",2,"^2D",true,"^2;",["^Z",["^2<",["^Z",[["^3M","^3N"]]]]],"^3B",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."]],"^X",["^ ","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^D",["~:returned","~:state","~:seed","^3N","^3M"]],"~:order",["^3M","^3N","^3S","^3R","^3Q"]],"^14",["^ ","^V",["^D",[]]],"^15",["^ "],"^16",["^T","^S","^O","^Q"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1D",[["^3W","~:static-fns"],true,["^3W","~:elide-asserts"],false,["^3W","~:optimize-constants"],null,["^3W","~:external-config"],null,["^3W","~:tooling-config"],null,["^3W","~:emit-constants"],null,["^3W","~:infer-externs"],true,["^3W","^1="],null,["~:js-options","~:js-provider"],"^V",["~:mode"],"~:dev",["^3W","~:fn-invoke-direct"],null,["^3W","~:source-map"],"/dev/null"]]]