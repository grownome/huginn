["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\ngoog.require('cljs.core');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (max){\nreturn (function (p1__16099_SHARP_){\nreturn (max === p1__16099_SHARP_);\n});})(max))\n,coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__16108 = arguments.length;\nswitch (G__16108) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4546__auto__ = [];\nvar len__4531__auto___16195 = arguments.length;\nvar i__4532__auto___16196 = (0);\nwhile(true){\nif((i__4532__auto___16196 < len__4531__auto___16195)){\nargs_arr__4546__auto__.push((arguments[i__4532__auto___16196]));\n\nvar G__16202 = (i__4532__auto___16196 + (1));\ni__4532__auto___16196 = G__16202;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\n\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.union.cljs$lang$applyTo = (function (seq16102){\nvar G__16103 = cljs.core.first(seq16102);\nvar seq16102__$1 = cljs.core.next(seq16102);\nvar G__16104 = cljs.core.first(seq16102__$1);\nvar seq16102__$2 = cljs.core.next(seq16102__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__16103,G__16104,seq16102__$2);\n});\n\nclojure.set.union.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__16135 = arguments.length;\nswitch (G__16135) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4546__auto__ = [];\nvar len__4531__auto___16211 = arguments.length;\nvar i__4532__auto___16213 = (0);\nwhile(true){\nif((i__4532__auto___16213 < len__4531__auto___16211)){\nargs_arr__4546__auto__.push((arguments[i__4532__auto___16213]));\n\nvar G__16216 = (i__4532__auto___16213 + (1));\ni__4532__auto___16213 = G__16216;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\n\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__16227 = s2;\nvar G__16228 = s1;\ns1 = G__16227;\ns2 = G__16228;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__16128_SHARP_){\nreturn (- cljs.core.count(p1__16128_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.intersection.cljs$lang$applyTo = (function (seq16131){\nvar G__16132 = cljs.core.first(seq16131);\nvar seq16131__$1 = cljs.core.next(seq16131);\nvar G__16133 = cljs.core.first(seq16131__$1);\nvar seq16131__$2 = cljs.core.next(seq16131__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__16132,G__16133,seq16131__$2);\n});\n\nclojure.set.intersection.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__16141 = arguments.length;\nswitch (G__16141) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4546__auto__ = [];\nvar len__4531__auto___16252 = arguments.length;\nvar i__4532__auto___16253 = (0);\nwhile(true){\nif((i__4532__auto___16253 < len__4531__auto___16252)){\nargs_arr__4546__auto__.push((arguments[i__4532__auto___16253]));\n\nvar G__16254 = (i__4532__auto___16253 + (1));\ni__4532__auto___16253 = G__16254;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\n\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n});\n\n/** @this {Function} */\nclojure.set.difference.cljs$lang$applyTo = (function (seq16138){\nvar G__16139 = cljs.core.first(seq16138);\nvar seq16138__$1 = cljs.core.next(seq16138);\nvar G__16140 = cljs.core.first(seq16138__$1);\nvar seq16138__$2 = cljs.core.next(seq16138__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__16139,G__16140,seq16138__$2);\n});\n\nclojure.set.difference.cljs$lang$maxFixedArity = (2);\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16143_SHARP_){\nreturn cljs.core.select_keys(p1__16143_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__16145){\nvar vec__16146 = p__16145;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16146,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16146,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__16149_SHARP_){\nreturn clojure.set.rename_keys(p1__16149_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__16151){\nvar vec__16152 = p__16151;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16152,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16152,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__16160 = arguments.length;\nswitch (G__16160) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__16162 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16162,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16162,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ks,vec__16162,r,s,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__16165 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__16165) : idx.call(null,G__16165));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,ks,vec__16162,r,s,idx){\nreturn (function (p1__16155_SHARP_,p2__16156_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16155_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__16156_SHARP_,x], 0)));\n});})(found,ks,vec__16162,r,s,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(ks,vec__16162,r,s,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__16166 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16166,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16166,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__16166,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__16166,r,s,k,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__16170 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__16170) : idx.call(null,G__16170));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,vec__16166,r,s,k,idx){\nreturn (function (p1__16157_SHARP_,p2__16158_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__16157_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__16158_SHARP_,x], 0)));\n});})(found,vec__16166,r,s,k,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(vec__16166,r,s,k,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n});\n\nclojure.set.join.cljs$lang$maxFixedArity = 3;\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__16173_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__16173_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__16179_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__16179_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^K","~$goog","^L"],"~:seen",["^D",[]],"~:uses",null,"~:require-macros",["^ ","^K","^K"],"~:form",["~#list",["~$ns","^F"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1540144996083,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","cljs.core/cons","p1__16099#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","var_args","G__16108","clojure.set/union","args-arr__4546__auto__","len__4531__auto__","i__4532__auto__","argseq__4547__auto__","cljs.core/IndexedSeq","seq16102","G__16103","cljs.core/first","cljs.core/next","G__16104","self__4518__auto__","s1","s2","cljs.core/count","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","sets","bubbled-sets","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core/into","cljs.core/rest","G__16135","clojure.set/intersection","seq16131","G__16132","G__16133","result","item","cljs.core/contains?","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p1__16128#","G__16141","clojure.set/difference","seq16138","G__16139","G__16140","cljs.core/disj","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__16143#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__16145","vec__16146","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","old","new","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__16149#","clojure.set/index","x","ik","cljs.core.get.cljs$core$IFn$_invoke$arity$3","clojure.set/map-invert","p__16151","vec__16152","v","G__16160","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__16162","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","r","idx","ret","found","G__16165","p1__16155#","p2__16156#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","km","vec__16166","cljs.core/vals","G__16170","p1__16157#","p2__16158#","clojure.set/subset?","set1","set2","p1__16173#","cljs.core/every?","clojure.set/superset?","p1__16179#"]]],"~:cache-keys",["~#cmap",[["~:macro","^K"],[1534380137000],["^W","goog/math/math.js"],[1530991559994,"^L","~$goog.array","~$goog.asserts"],["^W","goog/array/array.js"],[1530991559994,"^L","^1:"],["^W","goog/debug/error.js"],[1530991559994,"^L"],["^W","goog/dom/nodetype.js"],[1530991559994,"^L"],["^W","goog/object/object.js"],[1530991559994,"^L"],"~:SHADOW-TIMESTAMP",[1540077702000,1534380137000],["^W","goog/math/long.js"],[1530991559994,"^L","^1:","~$goog.reflect"],["^W","goog/functions/functions.js"],[1530991559994,"^L"],["^W","goog/structs/map.js"],[1530991559994,"^L","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^W","goog/asserts/asserts.js"],[1530991559994,"^L","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^W","goog/uri/uri.js"],[1530991559994,"^L","^19","^1:","^1B","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^W","goog/base.js"],[1530991559994],["^W","goog/structs/structs.js"],[1530991559994,"^L","^19","^1?"],["^W","goog/string/string.js"],[1530991559994,"^L"],["^W","goog/reflect/reflect.js"],[1530991559994,"^L"],["^W","goog/string/stringbuffer.js"],[1530991559994,"^L"],["^W","goog/iter/iter.js"],[1530991559994,"^L","^19","^1:","~$goog.functions","~$goog.math"],["^W","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^1B","^1?","^19","~$goog.Uri","~$goog.string.StringBuffer"],["^W","goog/math/integer.js"],[1530991559994,"^L"],["^W","clojure/set.cljs"],[1534380137690,"^L","^K"],["^W","goog/uri/utils.js"],[1530991559994,"^L","^19","^1:","^1B"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L"],"^M",["^D",[]],"~:shadow/js-access-global",["^D",["Error"]],"^N",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^Q",["~$quote",["^Q",[[],["~$s1"],["^1U","~$s2"],["^1U","^1V","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",["^Q",[[],["^1U"],["^1U","^1V"]]],"^1S",["^Q",[[],["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"~:arglists-meta",["^Q",[null,null,null,null]]]],"^E","~$clojure.set/union","^1Y",true,"^6","clojure/set.cljs","^:",12,"^1X",["^ ","^1Y",true,"^1Z",2,"^1[",["^Q",[[],["^1U"],["^1U","^1V"]]],"^1S",["^Q",[[],["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^20",["^Q",[null,null,null,null]]],"^1[",["^Q",[[],["^1U"],["^1U","^1V"]]],"~:protocol-impl",null,"^20",["^Q",[null,null,null,null]],"^8",1,"^7",19,"^9",19,"^1Z",2,"~:fn-var",true,"^1S",["^Q",[[],["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^1S",["^Q",["^1T",["^Q",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^E","~$clojure.set/map-invert","^1Y",false,"^6","clojure/set.cljs","^:",17,"^1[",["^Q",[["~$m"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",97,"^9",97,"^1Z",1,"^23",true,"^1S",["^Q",["^1T",["^Q",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^1S",["^Q",["^1T",["^Q",[["~$xrel","~$yrel"],["^27","^28","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^1X",["^ ","^1Y",false,"^1Z",3,"^1[",["^Q",[["^27","^28"],["^27","^28","^29"]]],"^1S",["^Q",[["^27","^28"],["^27","^28","^29"]]],"^20",["^Q",[null,null]]]],"^E","~$clojure.set/join","^1Y",false,"^6","clojure/set.cljs","^:",11,"^1X",["^ ","^1Y",false,"^1Z",3,"^1[",["^Q",[["^27","^28"],["^27","^28","^29"]]],"^1S",["^Q",[["^27","^28"],["^27","^28","^29"]]],"^20",["^Q",[null,null]]],"^1[",["^Q",[["^27","^28"],["^27","^28","^29"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",101,"^9",101,"^1Z",3,"^23",true,"^1S",["^Q",[["^27","^28"],["^27","^28","^29"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^1S",["^Q",["^1T",["^Q",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^E","~$clojure.set/select","^1Y",false,"^6","clojure/set.cljs","^:",13,"^1[",["^Q",[["^2<","^2="]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",61,"^9",61,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^2<","^2="]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^1S",["^Q",["^1T",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]]]],"^;","Return a set that is the intersection of the input sets","^1X",["^ ","^1Y",true,"^1Z",2,"^1[",["^Q",[["^1U"],["^1U","^1V"]]],"^1S",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^20",["^Q",[null,null,null]]]],"^E","~$clojure.set/intersection","^1Y",true,"^6","clojure/set.cljs","^:",19,"^1X",["^ ","^1Y",true,"^1Z",2,"^1[",["^Q",[["^1U"],["^1U","^1V"]]],"^1S",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^20",["^Q",[null,null,null]]],"^1[",["^Q",[["^1U"],["^1U","^1V"]]],"^22",null,"^20",["^Q",[null,null,null]],"^8",1,"^7",31,"^9",31,"^1Z",2,"^23",true,"^1S",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^1S",["^Q",["^1T",["^Q",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^E","~$clojure.set/superset?","^1Y",false,"^6","clojure/set.cljs","^:",16,"^1[",["^Q",[["^2B","^2C"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",137,"^9",137,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^2B","^2C"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^1S",["^Q",["^1T",["^Q",[["^27","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^E","~$clojure.set/index","^1Y",false,"^6","clojure/set.cljs","^:",12,"^1[",["^Q",[["^27","^2F"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",87,"^9",87,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^27","^2F"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^1S",["^Q",["^1T",["^Q",[["~$k","~$coll"]]]]]],"^2I",true,"^E","~$clojure.set/bubble-max-key","^1Y",false,"^6","clojure/set.cljs","^:",22,"^1[",["^Q",[["~$k","^2J"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",13,"^9",13,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["~$k","^2J"]]]]]],"~$subset?",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^1S",["^Q",["^1T",["^Q",[["^2B","^2C"]]]]],"^;","Is set1 a subset of set2?"],"^E","~$clojure.set/subset?","^1Y",false,"^6","clojure/set.cljs","^:",14,"^1[",["^Q",[["^2B","^2C"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",131,"^9",131,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^2B","^2C"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^1S",["^Q",["^1T",["^Q",[["^27","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^E","~$clojure.set/rename","^1Y",false,"^6","clojure/set.cljs","^:",13,"^1[",["^Q",[["^27","^2O"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",82,"^9",82,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^27","^2O"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^1S",["^Q",["^1T",["^Q",[["~$map","^2O"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^E","~$clojure.set/rename-keys","^1Y",false,"^6","clojure/set.cljs","^:",18,"^1[",["^Q",[["^2R","^2O"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",72,"^9",72,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^2R","^2O"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^1S",["^Q",["^1T",["^Q",[["^27","^2F"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^E","~$clojure.set/project","^1Y",false,"^6","clojure/set.cljs","^:",14,"^1[",["^Q",[["^27","^2F"]]],"^22",null,"^20",["^Q",[null,null]],"^8",1,"^7",67,"^9",67,"^1Z",2,"^23",true,"^1S",["^Q",["^1T",["^Q",[["^27","^2F"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^1R",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^1S",["^Q",["^1T",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^1X",["^ ","^1Y",true,"^1Z",2,"^1[",["^Q",[["^1U"],["^1U","^1V"]]],"^1S",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^20",["^Q",[null,null,null]]]],"^E","~$clojure.set/difference","^1Y",true,"^6","clojure/set.cljs","^:",17,"^1X",["^ ","^1Y",true,"^1Z",2,"^1[",["^Q",[["^1U"],["^1U","^1V"]]],"^1S",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^20",["^Q",[null,null,null]]],"^1[",["^Q",[["^1U"],["^1U","^1V"]]],"^22",null,"^20",["^Q",[null,null,null]],"^8",1,"^7",46,"^9",46,"^1Z",2,"^23",true,"^1S",["^Q",[["^1U"],["^1U","^1V"],["^1U","^1V","~$&","^1W"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^O",["^ ","^K","^K"],"^S",["^ "],"^T",["^ "],"^U",["^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^17",[["^2Z","~:static-fns"],true,["^2Z","~:elide-asserts"],false,["^2Z","~:optimize-constants"],null,["^2Z","~:external-config"],null,["^2Z","~:tooling-config"],null,["^2Z","~:emit-constants"],null,["^2Z","~:infer-externs"],true,["^2Z","^10"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^2Z","~:fn-invoke-direct"],null,["^2Z","~:source-map"],"/dev/null"]]]