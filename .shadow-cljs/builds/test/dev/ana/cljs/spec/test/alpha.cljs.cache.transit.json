["^ ","~:output",["^ ","~:js","goog.provide('cljs.spec.test.alpha');\ngoog.require('cljs.core');\ngoog.require('goog.object');\ngoog.require('goog.userAgent.product');\ngoog.require('clojure.string');\ngoog.require('cljs.stacktrace');\ngoog.require('cljs.pprint');\ngoog.require('cljs.spec.alpha');\ngoog.require('cljs.spec.gen.alpha');\ngoog.require('clojure.test.check');\ngoog.require('clojure.test.check.properties');\ncljs.spec.test.alpha.distinct_by = (function cljs$spec$test$alpha$distinct_by(f,coll){\nvar step = (function cljs$spec$test$alpha$distinct_by_$_step(xs,seen){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar fexpr__27355 = (function (p__27357,seen__$1){\nwhile(true){\nvar vec__27358 = p__27357;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__27358,(0),null);\nvar xs__$1 = vec__27358;\nvar temp__5457__auto__ = cljs.core.seq(xs__$1);\nif(temp__5457__auto__){\nvar s = temp__5457__auto__;\nvar v = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x));\nif(cljs.core.contains_QMARK_(seen__$1,v)){\nvar G__27361 = cljs.core.rest(s);\nvar G__27362 = seen__$1;\np__27357 = G__27361;\nseen__$1 = G__27362;\ncontinue;\n} else {\nreturn cljs.core.cons(x,cljs$spec$test$alpha$distinct_by_$_step(cljs.core.rest(s),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1,v)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n});\nreturn fexpr__27355(xs,seen);\n}),null,null));\n});\nreturn step(coll,cljs.core.PersistentHashSet.EMPTY);\n});\ncljs.spec.test.alpha.__GT_sym = (function cljs$spec$test$alpha$__GT_sym(x){\nvar fexpr__27370 = cljs.core.deref(new cljs.core.Var(function(){return cljs.spec.alpha.__GT_sym;},new cljs.core.Symbol(\"cljs.spec.alpha\",\"->sym\",\"cljs.spec.alpha/->sym\",-2031271081,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,new cljs.core.Symbol(null,\"cljs.spec.alpha\",\"cljs.spec.alpha\",505122844,null),new cljs.core.Symbol(null,\"->sym\",\"->sym\",696606926,null),\"cljs/spec/alpha.cljs\",13,1,308,308,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null)),\"Returns a symbol from a symbol or var\",(cljs.core.truth_(cljs.spec.alpha.__GT_sym)?cljs.spec.alpha.__GT_sym.cljs$lang$test:null)])));\nreturn (fexpr__27370.cljs$core$IFn$_invoke$arity$1 ? fexpr__27370.cljs$core$IFn$_invoke$arity$1(x) : fexpr__27370.call(null,x));\n});\n/**\n * if false, instrumented fns call straight through\n */\ncljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = true;\ncljs.spec.test.alpha.get_host_port = (function cljs$spec$test$alpha$get_host_port(){\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"browser\",cljs.core._STAR_target_STAR_)){\nreturn cljs.core.PersistentArrayMap.EMPTY;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"host\",\"host\",-1558485167),window.location.host,new cljs.core.Keyword(null,\"port\",\"port\",1534937262),window.location.port], null);\n}\n});\ncljs.spec.test.alpha.get_ua_product = (function cljs$spec$test$alpha$get_ua_product(){\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"browser\",cljs.core._STAR_target_STAR_)){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_target_STAR_);\n} else {\nif(cljs.core.truth_(goog.userAgent.product.SAFARI)){\nreturn new cljs.core.Keyword(null,\"safari\",\"safari\",497115653);\n} else {\nif(cljs.core.truth_(goog.userAgent.product.CHROME)){\nreturn new cljs.core.Keyword(null,\"chrome\",\"chrome\",1718738387);\n} else {\nif(cljs.core.truth_(goog.userAgent.product.FIREFOX)){\nreturn new cljs.core.Keyword(null,\"firefox\",\"firefox\",1283768880);\n} else {\nif(cljs.core.truth_(goog.userAgent.product.IE)){\nreturn new cljs.core.Keyword(null,\"ie\",\"ie\",2038473780);\n} else {\nreturn null;\n}\n}\n}\n}\n}\n});\ncljs.spec.test.alpha.get_env = (function cljs$spec$test$alpha$get_env(){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ua-product\",\"ua-product\",938384227),cljs.spec.test.alpha.get_ua_product()], null);\n});\n/**\n * Fn-spec must include at least :args or :ret specs.\n */\ncljs.spec.test.alpha.fn_spec_QMARK_ = (function cljs$spec$test$alpha$fn_spec_QMARK_(m){\nvar or__3949__auto__ = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(m);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814).cljs$core$IFn$_invoke$arity$1(m);\n}\n});\ncljs.spec.test.alpha.explain_data_STAR_ = (function cljs$spec$test$alpha$explain_data_STAR_(spec,v){\nif(cljs.core.truth_(cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$3(spec,v,null))){\nreturn null;\n} else {\nreturn cljs.spec.alpha.explain_data(spec,v);\n}\n});\ncljs.spec.test.alpha.find_caller = (function cljs$spec$test$alpha$find_caller(st){\nvar search_spec_fn = (function cljs$spec$test$alpha$find_caller_$_search_spec_fn(frame){\nif(cljs.core.truth_(frame)){\nvar s = new cljs.core.Keyword(null,\"function\",\"function\",-2127255473).cljs$core$IFn$_invoke$arity$1(frame);\nvar and__3938__auto__ = typeof s === 'string';\nif(and__3938__auto__){\nvar and__3938__auto____$1 = !(clojure.string.blank_QMARK_(s));\nif(and__3938__auto____$1){\nreturn cljs.core.re_find(/cljs\\.spec\\.test\\.spec_checking_fn/,s);\n} else {\nreturn and__3938__auto____$1;\n}\n} else {\nreturn and__3938__auto__;\n}\n} else {\nreturn null;\n}\n});\nreturn cljs.core.first(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(search_spec_fn,cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__27377_SHARP_){\nreturn cljs.core.not(search_spec_fn(p1__27377_SHARP_));\n}),st)));\n});\ncljs.spec.test.alpha.spec_checking_fn = (function cljs$spec$test$alpha$spec_checking_fn(v,f,fn_spec){\nvar fn_spec__$1 = (function (){var fexpr__27386 = cljs.core.deref(new cljs.core.Var(function(){return cljs.spec.alpha.maybe_spec;},new cljs.core.Symbol(\"cljs.spec.alpha\",\"maybe-spec\",\"cljs.spec.alpha/maybe-spec\",1954004993,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,new cljs.core.Symbol(null,\"cljs.spec.alpha\",\"cljs.spec.alpha\",505122844,null),new cljs.core.Symbol(null,\"maybe-spec\",\"maybe-spec\",-741366888,null),\"cljs/spec/alpha.cljs\",18,1,105,105,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"spec-or-k\",\"spec-or-k\",1986391440,null)], null)),\"spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil.\",(cljs.core.truth_(cljs.spec.alpha.maybe_spec)?cljs.spec.alpha.maybe_spec.cljs$lang$test:null)])));\nreturn (fexpr__27386.cljs$core$IFn$_invoke$arity$1 ? fexpr__27386.cljs$core$IFn$_invoke$arity$1(fn_spec) : fexpr__27386.call(null,fn_spec));\n})();\nvar conform_BANG_ = ((function (fn_spec__$1){\nreturn (function (v__$1,role,spec,data,args){\nvar conformed = cljs.spec.alpha.conform(spec,data);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"cljs.spec.alpha\",\"invalid\",\"cljs.spec.alpha/invalid\",-1220295119),conformed)){\nvar caller = cljs.spec.test.alpha.find_caller((function (){var G__27389 = cljs.spec.test.alpha.get_host_port();\nvar G__27390 = (new Error()).stack;\nvar G__27391 = cljs.spec.test.alpha.get_env();\nvar G__27392 = null;\nreturn (cljs.stacktrace.parse_stacktrace.cljs$core$IFn$_invoke$arity$4 ? cljs.stacktrace.parse_stacktrace.cljs$core$IFn$_invoke$arity$4(G__27389,G__27390,G__27391,G__27392) : cljs.stacktrace.parse_stacktrace.call(null,G__27389,G__27390,G__27391,G__27392));\n})());\nvar ed = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(cljs.spec.alpha.explain_data_STAR_(spec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [role], null),cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY,data),new cljs.core.Keyword(\"cljs.spec.alpha\",\"args\",\"cljs.spec.alpha/args\",1870769783),args,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"cljs.spec.alpha\",\"failure\",\"cljs.spec.alpha/failure\",188258592),new cljs.core.Keyword(null,\"instrument\",\"instrument\",-960698844)], 0)),(cljs.core.truth_(caller)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.spec.test.alpha\",\"caller\",\"cljs.spec.test.alpha/caller\",-398302390),caller], null):null)], 0));\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Call to \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(v__$1),\" did not conform to spec:\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var sb__4462__auto__ = (new goog.string.StringBuffer());\nvar _STAR_print_newline_STAR_27394_27413 = cljs.core._STAR_print_newline_STAR_;\nvar _STAR_print_fn_STAR_27395_27414 = cljs.core._STAR_print_fn_STAR_;\ncljs.core._STAR_print_newline_STAR_ = true;\n\ncljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_27394_27413,_STAR_print_fn_STAR_27395_27414,sb__4462__auto__,caller,ed,conformed,fn_spec__$1){\nreturn (function (x__4463__auto__){\nreturn sb__4462__auto__.append(x__4463__auto__);\n});})(_STAR_print_newline_STAR_27394_27413,_STAR_print_fn_STAR_27395_27414,sb__4462__auto__,caller,ed,conformed,fn_spec__$1))\n;\n\ntry{cljs.spec.alpha.explain_out(ed);\n}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_27395_27414;\n\ncljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_27394_27413;\n}\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4462__auto__)].join('');\n})())].join(''),ed);\n} else {\nreturn conformed;\n}\n});})(fn_spec__$1))\n;\nvar G__27396 = ((function (fn_spec__$1,conform_BANG_){\nreturn (function() { \nvar G__27415__delegate = function (args){\nif(cljs.spec.test.alpha._STAR_instrument_enabled_STAR_){\nvar _STAR_instrument_enabled_STAR_27397 = cljs.spec.test.alpha._STAR_instrument_enabled_STAR_;\ncljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = null;\n\ntry{if(cljs.core.truth_(new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(fn_spec__$1))){\nconform_BANG_(v,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(fn_spec__$1),args,args);\n} else {\n}\n\nvar _STAR_instrument_enabled_STAR_27398 = cljs.spec.test.alpha._STAR_instrument_enabled_STAR_;\ncljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = true;\n\ntry{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);\n}finally {cljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = _STAR_instrument_enabled_STAR_27398;\n}}finally {cljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = _STAR_instrument_enabled_STAR_27397;\n}} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);\n}\n};\nvar G__27415 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__27416__i = 0, G__27416__a = new Array(arguments.length -  0);\nwhile (G__27416__i < G__27416__a.length) {G__27416__a[G__27416__i] = arguments[G__27416__i + 0]; ++G__27416__i;}\n  args = new cljs.core.IndexedSeq(G__27416__a,0,null);\n} \nreturn G__27415__delegate.call(this,args);};\nG__27415.cljs$lang$maxFixedArity = 0;\nG__27415.cljs$lang$applyTo = (function (arglist__27417){\nvar args = cljs.core.seq(arglist__27417);\nreturn G__27415__delegate(args);\n});\nG__27415.cljs$core$IFn$_invoke$arity$variadic = G__27415__delegate;\nreturn G__27415;\n})()\n;})(fn_spec__$1,conform_BANG_))\n;\nvar G__27399_27418 = G__27396;\nvar G__27400_27419 = (new cljs.core.MetaFn(((function (G__27399_27418,G__27396,fn_spec__$1,conform_BANG_){\nreturn (function() { \nvar G__27422__delegate = function (args){\nif(cljs.spec.test.alpha._STAR_instrument_enabled_STAR_){\nvar _STAR_instrument_enabled_STAR_27401 = cljs.spec.test.alpha._STAR_instrument_enabled_STAR_;\ncljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = null;\n\ntry{if(cljs.core.truth_(new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(fn_spec__$1))){\nconform_BANG_(v,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(fn_spec__$1),args,args);\n} else {\n}\n\nvar _STAR_instrument_enabled_STAR_27406 = cljs.spec.test.alpha._STAR_instrument_enabled_STAR_;\ncljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = true;\n\ntry{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);\n}finally {cljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = _STAR_instrument_enabled_STAR_27406;\n}}finally {cljs.spec.test.alpha._STAR_instrument_enabled_STAR_ = _STAR_instrument_enabled_STAR_27401;\n}} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);\n}\n};\nvar G__27422 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__27423__i = 0, G__27423__a = new Array(arguments.length -  0);\nwhile (G__27423__i < G__27423__a.length) {G__27423__a[G__27423__i] = arguments[G__27423__i + 0]; ++G__27423__i;}\n  args = new cljs.core.IndexedSeq(G__27423__a,0,null);\n} \nreturn G__27422__delegate.call(this,args);};\nG__27422.cljs$lang$maxFixedArity = 0;\nG__27422.cljs$lang$applyTo = (function (arglist__27424){\nvar args = cljs.core.seq(arglist__27424);\nreturn G__27422__delegate(args);\n});\nG__27422.cljs$core$IFn$_invoke$arity$variadic = G__27422__delegate;\nreturn G__27422;\n})()\n;})(G__27399_27418,G__27396,fn_spec__$1,conform_BANG_))\n,null));\ngoog.object.extend(G__27399_27418,G__27400_27419);\n\nreturn G__27396;\n});\ncljs.spec.test.alpha.no_fspec = (function cljs$spec$test$alpha$no_fspec(v,spec){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Fn at \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(v),\" is not spec'ed.\"].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"var\",\"var\",-769682797),v,new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),spec,new cljs.core.Keyword(\"cljs.spec.alpha\",\"failure\",\"cljs.spec.alpha/failure\",188258592),new cljs.core.Keyword(null,\"no-fspec\",\"no-fspec\",-1763393966)], null));\n});\nif((typeof cljs !== 'undefined') && (typeof cljs.spec !== 'undefined') && (typeof cljs.spec.test !== 'undefined') && (typeof cljs.spec.test.alpha !== 'undefined') && (typeof cljs.spec.test.alpha.instrumented_vars !== 'undefined')){\n} else {\ncljs.spec.test.alpha.instrumented_vars = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\n/**\n * Helper for instrument.\n */\ncljs.spec.test.alpha.instrument_choose_fn = (function cljs$spec$test$alpha$instrument_choose_fn(f,spec,sym,p__27426){\nvar map__27427 = p__27426;\nvar map__27427__$1 = ((((!((map__27427 == null)))?(((((map__27427.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27427.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27427):map__27427);\nvar over = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27427__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nvar stub = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27427__$1,new cljs.core.Keyword(null,\"stub\",\"stub\",1339145807));\nvar replace = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27427__$1,new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770));\nif(cljs.core.truth_(cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([sym]),stub))){\nreturn cljs.spec.gen.alpha.generate(cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$2(spec,over));\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(replace,sym,f);\n}\n});\n/**\n * Helper for instrument\n */\ncljs.spec.test.alpha.instrument_choose_spec = (function cljs$spec$test$alpha$instrument_choose_spec(spec,sym,p__27438){\nvar map__27439 = p__27438;\nvar map__27439__$1 = ((((!((map__27439 == null)))?(((((map__27439.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27439.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27439):map__27439);\nvar overrides = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27439__$1,new cljs.core.Keyword(null,\"spec\",\"spec\",347520401));\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(overrides,sym,spec);\n});\ncljs.spec.test.alpha.instrument_1_STAR_ = (function cljs$spec$test$alpha$instrument_1_STAR_(s,v,opts){\nvar spec = cljs.spec.alpha.get_spec(v);\nvar map__27444 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.spec.test.alpha.instrumented_vars),v);\nvar map__27444__$1 = ((((!((map__27444 == null)))?(((((map__27444.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27444.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27444):map__27444);\nvar raw = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27444__$1,new cljs.core.Keyword(null,\"raw\",\"raw\",1604651272));\nvar wrapped = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27444__$1,new cljs.core.Keyword(null,\"wrapped\",\"wrapped\",1775172701));\nvar current = cljs.core.deref(v);\nvar to_wrap = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(wrapped,current))?raw:current);\nvar ospec = (function (){var or__3949__auto__ = cljs.spec.test.alpha.instrument_choose_spec(spec,s,opts);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nthrow cljs.spec.test.alpha.no_fspec(v,spec);\n}\n})();\nvar ofn = cljs.spec.test.alpha.instrument_choose_fn(to_wrap,ospec,s,opts);\nvar checked = cljs.spec.test.alpha.spec_checking_fn(v,ofn,ospec);\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.spec.test.alpha.instrumented_vars,cljs.core.assoc,v,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"raw\",\"raw\",1604651272),to_wrap,new cljs.core.Keyword(null,\"wrapped\",\"wrapped\",1775172701),checked], null));\n\nreturn checked;\n});\ncljs.spec.test.alpha.unstrument_1_STAR_ = (function cljs$spec$test$alpha$unstrument_1_STAR_(s,v){\nif(cljs.core.truth_(v)){\nvar temp__5457__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.spec.test.alpha.instrumented_vars),v);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar map__27449 = temp__5457__auto__;\nvar map__27449__$1 = ((((!((map__27449 == null)))?(((((map__27449.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27449.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27449):map__27449);\nvar raw = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27449__$1,new cljs.core.Keyword(null,\"raw\",\"raw\",1604651272));\nvar wrapped = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27449__$1,new cljs.core.Keyword(null,\"wrapped\",\"wrapped\",1775172701));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.spec.test.alpha.instrumented_vars,cljs.core.dissoc,v);\n\nvar current = cljs.core.deref(v);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(wrapped,current)){\nreturn raw;\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\ncljs.spec.test.alpha.fn_spec_name_QMARK_ = (function cljs$spec$test$alpha$fn_spec_name_QMARK_(s){\nreturn (s instanceof cljs.core.Symbol);\n});\ncljs.spec.test.alpha.collectionize = (function cljs$spec$test$alpha$collectionize(x){\nif((x instanceof cljs.core.Symbol)){\nreturn (new cljs.core.List(null,x,null,(1),null));\n} else {\nreturn x;\n}\n});\n/**\n * Given an opts map as per instrument, returns the set of syms\n * that can be instrumented.\n */\ncljs.spec.test.alpha.instrumentable_syms = (function cljs$spec$test$alpha$instrumentable_syms(var_args){\nvar G__27457 = arguments.length;\nswitch (G__27457) {\ncase 0:\nreturn cljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn cljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$1(null);\n});\n\ncljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$1 = (function (opts){\nif(cljs.core.every_QMARK_(cljs.core.ident_QMARK_,cljs.core.keys(new cljs.core.Keyword(null,\"gen\",\"gen\",142575302).cljs$core$IFn$_invoke$arity$1(opts)))){\n} else {\nthrow (new Error([\"Assert failed: \",\"instrument :gen expects ident keys\",\"\\n\",\"(every? ident? (keys (:gen opts)))\"].join('')));\n}\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.PersistentHashSet.EMPTY,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.spec.test.alpha.fn_spec_name_QMARK_,cljs.core.keys(cljs.spec.alpha.registry())),cljs.core.keys(new cljs.core.Keyword(null,\"spec\",\"spec\",347520401).cljs$core$IFn$_invoke$arity$1(opts)),new cljs.core.Keyword(null,\"stub\",\"stub\",1339145807).cljs$core$IFn$_invoke$arity$1(opts),cljs.core.keys(new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770).cljs$core$IFn$_invoke$arity$1(opts))], null));\n});\n\ncljs.spec.test.alpha.instrumentable_syms.cljs$lang$maxFixedArity = 1;\n\ncljs.spec.test.alpha.explain_check = (function cljs$spec$test$alpha$explain_check(args,spec,v,role){\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Specification-based check failed\",(cljs.core.truth_(cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$3(spec,v,null))?null:cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(cljs.spec.alpha.explain_data_STAR_(spec,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [role], null),cljs.core.PersistentVector.EMPTY,cljs.core.PersistentVector.EMPTY,v),new cljs.core.Keyword(\"cljs.spec.test.alpha\",\"args\",\"cljs.spec.test.alpha/args\",78409593),args,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"cljs.spec.test.alpha\",\"val\",\"cljs.spec.test.alpha/val\",1634694485),v,new cljs.core.Keyword(\"cljs.spec.alpha\",\"failure\",\"cljs.spec.alpha/failure\",188258592),new cljs.core.Keyword(null,\"check-failed\",\"check-failed\",-1316157547)], 0))));\n});\n/**\n * Returns true if call passes specs, otherwise *returns* an exception\n * with explain-data + ::s/failure.\n */\ncljs.spec.test.alpha.check_call = (function cljs$spec$test$alpha$check_call(f,specs,args){\nvar cargs = (cljs.core.truth_(new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(specs))?cljs.spec.alpha.conform(new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(specs),args):null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cargs,new cljs.core.Keyword(\"cljs.spec.alpha\",\"invalid\",\"cljs.spec.alpha/invalid\",-1220295119))){\nreturn cljs.spec.test.alpha.explain_check(args,new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(specs),args,new cljs.core.Keyword(null,\"args\",\"args\",1315556576));\n} else {\nvar ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);\nvar cret = (cljs.core.truth_(new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814).cljs$core$IFn$_invoke$arity$1(specs))?cljs.spec.alpha.conform(new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814).cljs$core$IFn$_invoke$arity$1(specs),ret):null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cret,new cljs.core.Keyword(\"cljs.spec.alpha\",\"invalid\",\"cljs.spec.alpha/invalid\",-1220295119))){\nreturn cljs.spec.test.alpha.explain_check(args,new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814).cljs$core$IFn$_invoke$arity$1(specs),ret,new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814));\n} else {\nif(cljs.core.truth_((function (){var and__3938__auto__ = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(specs);\nif(cljs.core.truth_(and__3938__auto__)){\nvar and__3938__auto____$1 = new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814).cljs$core$IFn$_invoke$arity$1(specs);\nif(cljs.core.truth_(and__3938__auto____$1)){\nreturn new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204).cljs$core$IFn$_invoke$arity$1(specs);\n} else {\nreturn and__3938__auto____$1;\n}\n} else {\nreturn and__3938__auto__;\n}\n})())){\nif(cljs.core.truth_(cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204).cljs$core$IFn$_invoke$arity$1(specs),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cargs,new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),cret], null)))){\nreturn true;\n} else {\nreturn cljs.spec.test.alpha.explain_check(args,new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204).cljs$core$IFn$_invoke$arity$1(specs),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"args\",\"args\",1315556576),cargs,new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814),cret], null),new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204));\n}\n} else {\nreturn true;\n}\n}\n}\n});\ncljs.spec.test.alpha.quick_check = (function cljs$spec$test$alpha$quick_check(f,specs,p__27469){\nvar map__27470 = p__27469;\nvar map__27470__$1 = ((((!((map__27470 == null)))?(((((map__27470.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27470.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27470):map__27470);\nvar gen = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27470__$1,new cljs.core.Keyword(null,\"gen\",\"gen\",142575302));\nvar opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__27470__$1,new cljs.core.Keyword(\"clojure.test.check\",\"opts\",\"clojure.test.check/opts\",-1773872533));\nvar map__27472 = opts;\nvar map__27472__$1 = ((((!((map__27472 == null)))?(((((map__27472.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__27472.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__27472):map__27472);\nvar num_tests = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__27472__$1,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),(1000));\nvar g = (function (){try{return cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(specs),gen);\n}catch (e27474){if((e27474 instanceof Error)){\nvar t = e27474;\nreturn t;\n} else {\nthrow e27474;\n\n}\n}})();\nif((g instanceof Error)){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),g], null);\n} else {\nvar prop = cljs.spec.gen.alpha.for_all_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [g], null),((function (map__27472,map__27472__$1,num_tests,g,map__27470,map__27470__$1,gen,opts){\nreturn (function (p1__27468_SHARP_){\nreturn cljs.spec.test.alpha.check_call(f,specs,p1__27468_SHARP_);\n});})(map__27472,map__27472__$1,num_tests,g,map__27470,map__27470__$1,gen,opts))\n], 0));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.spec.gen.alpha.quick_check,num_tests,prop,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.identity,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([opts], 0)));\n}\n});\n/**\n * Builds spec result map.\n */\ncljs.spec.test.alpha.make_check_result = (function cljs$spec$test$alpha$make_check_result(check_sym,spec,test_check_ret){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),spec,new cljs.core.Keyword(\"clojure.test.check\",\"ret\",\"clojure.test.check/ret\",1393978960),test_check_ret], null),(cljs.core.truth_(check_sym)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"sym\",\"sym\",-1444860305),check_sym], null):null),(function (){var temp__5457__auto__ = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(test_check_ret);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar result = temp__5457__auto__;\nif(result === true){\nreturn null;\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"failure\",\"failure\",720415879),result], null);\n}\n} else {\nreturn null;\n}\n})(),(function (){var temp__5457__auto__ = new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412).cljs$core$IFn$_invoke$arity$1(test_check_ret);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar shrunk = temp__5457__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"failure\",\"failure\",720415879),new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(shrunk)], null);\n} else {\nreturn null;\n}\n})()], 0));\n});\ncljs.spec.test.alpha.validate_check_opts = (function cljs$spec$test$alpha$validate_check_opts(opts){\nif(cljs.core.every_QMARK_(cljs.core.ident_QMARK_,cljs.core.keys(new cljs.core.Keyword(null,\"gen\",\"gen\",142575302).cljs$core$IFn$_invoke$arity$1(opts)))){\nreturn null;\n} else {\nthrow (new Error([\"Assert failed: \",\"check :gen expects ident keys\",\"\\n\",\"(every? ident? (keys (:gen opts)))\"].join('')));\n}\n});\ncljs.spec.test.alpha.failure_type = (function cljs$spec$test$alpha$failure_type(x){\nreturn new cljs.core.Keyword(\"cljs.spec.alpha\",\"failure\",\"cljs.spec.alpha/failure\",188258592).cljs$core$IFn$_invoke$arity$1(cljs.core.ex_data(x));\n});\ncljs.spec.test.alpha.unwrap_failure = (function cljs$spec$test$alpha$unwrap_failure(x){\nif(cljs.core.truth_(cljs.spec.test.alpha.failure_type(x))){\nreturn cljs.core.ex_data(x);\n} else {\nreturn x;\n}\n});\n/**\n * Returns the type of the check result. This can be any of the\n * ::s/failure keywords documented in 'check', or:\n * \n *   :check-passed   all checked fn returns conformed\n *   :check-threw    checked fn threw an exception\n */\ncljs.spec.test.alpha.result_type = (function cljs$spec$test$alpha$result_type(ret){\nvar failure = new cljs.core.Keyword(null,\"failure\",\"failure\",720415879).cljs$core$IFn$_invoke$arity$1(ret);\nif((failure == null)){\nreturn new cljs.core.Keyword(null,\"check-passed\",\"check-passed\",1505510820);\n} else {\nif(cljs.core.truth_(cljs.spec.test.alpha.failure_type(failure))){\nreturn cljs.spec.test.alpha.failure_type(failure);\n} else {\nreturn new cljs.core.Keyword(null,\"check-threw\",\"check-threw\",-1050428963);\n\n}\n}\n});\n/**\n * Given a check result, returns an abbreviated version\n * suitable for summary use.\n */\ncljs.spec.test.alpha.abbrev_result = (function cljs$spec$test$alpha$abbrev_result(x){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"failure\",\"failure\",720415879).cljs$core$IFn$_invoke$arity$1(x))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.Keyword(\"clojure.test.check\",\"ret\",\"clojure.test.check/ret\",1393978960)),new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),cljs.spec.alpha.describe),new cljs.core.Keyword(null,\"failure\",\"failure\",720415879),cljs.spec.test.alpha.unwrap_failure);\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(x,new cljs.core.Keyword(null,\"spec\",\"spec\",347520401),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"clojure.test.check\",\"ret\",\"clojure.test.check/ret\",1393978960)], 0));\n}\n});\n/**\n * Given a collection of check-results, e.g. from 'check', pretty\n * prints the summary-result (default abbrev-result) of each.\n * \n * Returns a map with :total, the total number of results, plus a\n * key with a count for each different :type of result.\n */\ncljs.spec.test.alpha.summarize_results = (function cljs$spec$test$alpha$summarize_results(var_args){\nvar G__27480 = arguments.length;\nswitch (G__27480) {\ncase 1:\nreturn cljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn cljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\ncljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$1 = (function (check_results){\nreturn cljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$2(check_results,cljs.spec.test.alpha.abbrev_result);\n});\n\ncljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$2 = (function (check_results,summary_result){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (summary,result){\ncljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1((summary_result.cljs$core$IFn$_invoke$arity$1 ? summary_result.cljs$core$IFn$_invoke$arity$1(result) : summary_result.call(null,result)));\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(summary,new cljs.core.Keyword(null,\"total\",\"total\",1916810418),cljs.core.inc),cljs.spec.test.alpha.result_type(result),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\n}),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"total\",\"total\",1916810418),(0)], null),check_results);\n});\n\ncljs.spec.test.alpha.summarize_results.cljs$lang$maxFixedArity = 2;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cljs/spec/test/alpha.cljs","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",25],"~:ns-aliases",["^ ","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",["^ ","~$with-instrument-disabled","~$cljs.spec.test.alpha"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$check-fn",["^ ","~:arglists",["~#list",[["~$f","~$spec"],["~$f","^I","~$opts"]]],"~:doc","Runs generative tests for fn f using spec and opts. See\n'check' for options and return.","^7",177,"^8",1,"^6","cljs/spec/test/alpha.cljc","~:name","~$cljs.spec.test.alpha/check-fn","~:ns","^B","~:macro",true],"~$instrument",["^ ","^G",["^H",[[],["~$xs"],["~$sym-or-syms","^J"]]],"^K","Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n  :spec     a map from var-name symbols to override specs\n  :stub     a set of var-name symbols to be replaced by stubs\n  :gen      a map from spec names to generator overrides\n  :replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented.","^7",69,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/instrument","^N","^B","^O",true],"~$unstrument-1",["^ ","^G",["^H",[[["~$quote","~$s"]]]],"^7",45,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/unstrument-1","^N","^B","^O",true],"~$unstrument",["^ ","^G",["^H",[[],["^R"]]],"^K","Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented.","^7",129,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/unstrument","^N","^B","^O",true],"~$check",["^ ","^G",["^H",[[],["^R"],["^R","^J"]]],"^K","Run generative tests for spec conformance on vars named by\nsym-or-syms, a symbol or collection of symbols. If sym-or-syms\nis not specified, check all checkable vars. If a symbol identifies a\nnamespace then all symbols in that namespace will be enumerated.\n\nThe opts map includes the following optional keys, where stc\naliases clojure.test.check:\n\n::stc/opts  opts to flow through test.check/quick-check\n:gen        map from spec names to generator overrides\n\nThe ::stc/opts include :num-tests in addition to the keys\ndocumented by test.check. Generator overrides are passed to\nspec/gen when generating function args.\n\nReturns a lazy sequence of check result maps with the following\nkeys\n\n:spec       the spec tested\n:sym        optional symbol naming the var tested\n:failure    optional test failure\n::stc/ret   optional value returned by test.check/quick-check\n\nThe value for :failure can be any exception. Exceptions thrown by\nspec itself will have an ::s/failure value in ex-data:\n\n:check-failed   at least one checked return did not conform\n:no-args-spec   no :args spec provided\n:no-fn          no fn provided\n:no-fspec       no fspec provided\n:no-gen         unable to generate :args\n:instrument     invalid args detected by instrument\n","^7",207,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/check","^N","^B","^O",true],"^A",["^ ","^G",["^H",[["~$&","~$body"]]],"^K","Disables instrument's checking of calls, within a scope.","^7",29,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/with-instrument-disabled","^N","^B","^O",true],"~$checkable-syms",["^ ","^G",["^H",[[],["^J"]]],"^K","Given an opts map as per check, returns the set of syms that\ncan be checked.","^7",195,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/checkable-syms","^N","^B","^O",true],"~$instrument-1",["^ ","^G",["^H",[[["^U","~$s"],"^J"]]],"^7",35,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/instrument-1","^N","^B","^O",true],"~$check-1",["^ ","^G",["^H",[[["^U","~$s","~:as","~$qs"],"~$f","^I","^J"]]],"^7",152,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","~$cljs.spec.test.alpha/check-1","^N","^B","^O",true]],"^L","^B","~:op","^N","~:imports",null,"~:requires",["^ ","~$goog.userAgent.product","^1<","~$cljs.stacktrace","^1=","~$cljs.core","^1>","~$gobj","~$goog.object","~$stc","~$clojure.test.check","~$goog","^1C","^1@","^1@","~$gen","~$cljs.spec.gen.alpha","~$pp","~$cljs.pprint","^1B","^1B","^1G","^1G","~$s","~$cljs.spec.alpha","~$string","~$clojure.string","~$clojure.test.check.properties","^1K","~$product","^1<","^1J","^1J","~$st","^1=","^1H","^1H","^1E","^1E"],"~:seen",["^D",["~:require","~:require-macros"]],"~:uses",null,"^1P",["^ ","^B","^B","~$m","^B","^1>","^1>","^1D","^1E","^1F","^1G","^1G","^1G","~$s","^1H","^1H","^1H","^1E","^1E"],"~:form",["^H",["~$ns","^B",["^H",["^1P",["^B","^16","~$m","~:refer",["^A"]]]],["^H",["^1O",["^1@","^16","^1?"],["^1<","^16","^1L"],["^1J","^16","^1I"],["^1=","^16","^1M"],["^1G","^16","^1F"],["^1H","^16","~$s"],["^1E","^16","^1D"],["^1B","^16","^1A"],["^1K"]]]]],"~:flags",["^ ","^1P",["^D",[]],"^1O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^1C","^1>","^1@","^1<","^1J","^1=","^1G","^1H","^1E","^1B","^1K"]],"^N","^B","~:resource-id",["~:shadow.build.classpath/resource","cljs/spec/test/alpha.cljs"],"~:compiled-at",1537546389562,"~:resource-name","cljs/spec/test/alpha.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.spec.test.alpha\n  (:require-macros [cljs.spec.test.alpha :as m :refer [with-instrument-disabled]])\n  (:require\n    [goog.object :as gobj]\n    [goog.userAgent.product :as product]\n    [clojure.string :as string]\n    [cljs.stacktrace :as st]\n    [cljs.pprint :as pp]\n    [cljs.spec.alpha :as s]\n    [cljs.spec.gen.alpha :as gen]\n    [clojure.test.check :as stc]\n    [clojure.test.check.properties]))\n\n(defn distinct-by\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [v (f x)]\n                         (if (contains? seen v)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen v)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn ->sym\n  [x]\n  (@#'s/->sym x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instrument ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *instrument-enabled*\n  \"if false, instrumented fns call straight through\"\n  true)\n\n(defn get-host-port []\n  (if (not= \"browser\" *target*)\n    {}\n    {:host (.. js/window -location -host)\n     :port (.. js/window -location -port)}))\n\n(defn get-ua-product []\n  (if (not= \"browser\" *target*)\n    (keyword *target*)\n    (cond\n      product/SAFARI :safari\n      product/CHROME :chrome\n      product/FIREFOX :firefox\n      product/IE :ie)))\n\n(defn get-env []\n  {:ua-product (get-ua-product)})\n\n(defn- fn-spec?\n  \"Fn-spec must include at least :args or :ret specs.\"\n  [m]\n  (or (:args m) (:ret m)))\n\n;; wrap spec/explain-data until specs always return nil for ok data\n(defn- explain-data*\n  [spec v]\n  (when-not (s/valid? spec v nil)\n    (s/explain-data spec v)))\n\n(defn- find-caller [st]\n  (letfn [(search-spec-fn [frame]\n            (when frame\n              (let [s (:function frame)]\n                (and (string? s) (not (string/blank? s))\n                     (re-find #\"cljs\\.spec\\.test\\.spec_checking_fn\" s)))))]\n    (->> st\n         (drop-while #(not (search-spec-fn %)))\n         (drop-while search-spec-fn)\n         first)))\n\n;; TODO: check ::caller result in other browsers - David\n\n(defn- spec-checking-fn\n  [v f fn-spec]\n  (let [fn-spec (@#'s/maybe-spec fn-spec)\n        conform! (fn [v role spec data args]\n                   (let [conformed (s/conform spec data)]\n                     (if (= ::s/invalid conformed)\n                       (let [caller (find-caller\n                                      (st/parse-stacktrace\n                                        (get-host-port)\n                                        (.-stack (js/Error.))\n                                        (get-env) nil))\n                             ed (merge (assoc (s/explain-data* spec [role] [] [] data)\n                                         ::s/args args\n                                         ::s/failure :instrument)\n                                  (when caller\n                                    {::caller caller}))]\n                         (throw (ex-info\n                                  (str \"Call to \" v \" did not conform to spec:\\n\" (with-out-str (s/explain-out ed)))\n                                  ed)))\n                       conformed)))]\n    (doto (fn [& args]\n            (if *instrument-enabled*\n              (with-instrument-disabled\n                (when (:args fn-spec) (conform! v :args (:args fn-spec) args args))\n                (binding [*instrument-enabled* true]\n                  (apply f args)))\n              (apply f args)))\n      (gobj/extend (MetaFn. (fn [& args]\n                              (if *instrument-enabled*\n                                (with-instrument-disabled\n                                  (when (:args fn-spec) (conform! v :args (:args fn-spec) args args))\n                                  (binding [*instrument-enabled* true]\n                                    (apply f args)))\n                                (apply f args))) nil)))))\n\n(defn- no-fspec\n  [v spec]\n  (ex-info (str \"Fn at \" v \" is not spec'ed.\")\n    {:var v :spec spec ::s/failure :no-fspec}))\n\n(defonce ^:private instrumented-vars (atom {}))\n\n(defn- instrument-choose-fn\n  \"Helper for instrument.\"\n  [f spec sym {over :gen :keys [stub replace]}]\n  (if (some #{sym} stub)\n    (-> spec (s/gen over) gen/generate)\n    (get replace sym f)))\n\n(defn- instrument-choose-spec\n  \"Helper for instrument\"\n  [spec sym {overrides :spec}]\n  (get overrides sym spec))\n\n(defn- instrument-1*\n  [s v opts]\n  (let [spec (s/get-spec v)\n        {:keys [raw wrapped]} (get @instrumented-vars v)\n        current @v\n        to-wrap (if (= wrapped current) raw current)\n        ospec (or (instrument-choose-spec spec s opts)\n                (throw (no-fspec v spec)))\n        ofn (instrument-choose-fn to-wrap ospec s opts)\n        checked (spec-checking-fn v ofn ospec)]\n    (swap! instrumented-vars assoc v {:raw to-wrap :wrapped checked})\n    checked))\n\n(defn- unstrument-1*\n  [s v]\n  (when v\n    (when-let [{:keys [raw wrapped]} (get @instrumented-vars v)]\n      (swap! instrumented-vars dissoc v)\n      (let [current @v]\n        (when (= wrapped current)\n          raw)))))\n\n(defn- fn-spec-name?\n  [s]\n  (symbol? s))\n\n(defn- collectionize\n  [x]\n  (if (symbol? x)\n    (list x)\n    x))\n\n(defn instrumentable-syms\n  \"Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.\"\n  ([] (instrumentable-syms nil))\n  ([opts]\n   (assert (every? ident? (keys (:gen opts))) \"instrument :gen expects ident keys\")\n   (reduce into #{} [(filter fn-spec-name? (keys (s/registry)))\n                     (keys (:spec opts))\n                     (:stub opts)\n                     (keys (:replace opts))])))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; testing  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- explain-check\n  [args spec v role]\n  (ex-info\n    \"Specification-based check failed\"\n    (when-not (s/valid? spec v nil)\n      (assoc (s/explain-data* spec [role] [] [] v)\n        ::args args\n        ::val v\n        ::s/failure :check-failed))))\n\n(defn- check-call\n  \"Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure.\"\n  [f specs args]\n  (let [cargs (when (:args specs) (s/conform (:args specs) args))]\n    (if (= cargs ::s/invalid)\n      (explain-check args (:args specs) args :args)\n      (let [ret (apply f args)\n            cret (when (:ret specs) (s/conform (:ret specs) ret))]\n        (if (= cret ::s/invalid)\n          (explain-check args (:ret specs) ret :ret)\n          (if (and (:args specs) (:ret specs) (:fn specs))\n            (if (s/valid? (:fn specs) {:args cargs :ret cret})\n              true\n              (explain-check args (:fn specs) {:args cargs :ret cret} :fn))\n            true))))))\n\n(defn- quick-check\n  [f specs {gen :gen opts ::stc/opts}]\n  (let [{:keys [num-tests] :or {num-tests 1000}} opts\n        g (try (s/gen (:args specs) gen) (catch js/Error t t))]\n    (if (instance? js/Error g)\n      {:result g}\n      (let [prop (gen/for-all* [g] #(check-call f specs %))]\n        (apply gen/quick-check num-tests prop (mapcat identity opts))))))\n\n(defn- make-check-result\n  \"Builds spec result map.\"\n  [check-sym spec test-check-ret]\n  (merge {:spec spec\n          ::stc/ret test-check-ret}\n    (when check-sym\n      {:sym check-sym})\n    (when-let [result (-> test-check-ret :result)]\n      (when-not (true? result) {:failure result}))\n    (when-let [shrunk (-> test-check-ret :shrunk)]\n      {:failure (:result shrunk)})))\n\n(defn- validate-check-opts\n  [opts]\n  (assert (every? ident? (keys (:gen opts))) \"check :gen expects ident keys\"))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; check reporting  ;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- failure-type\n  [x]\n  (::s/failure (ex-data x)))\n\n(defn- unwrap-failure\n  [x]\n  (if (failure-type x)\n    (ex-data x)\n    x))\n\n(defn- result-type\n  \"Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception\"\n  [ret]\n  (let [failure (:failure ret)]\n    (cond\n      (nil? failure) :check-passed\n      (failure-type failure) (failure-type failure)\n      :default :check-threw)))\n\n(defn abbrev-result\n  \"Given a check result, returns an abbreviated version\nsuitable for summary use.\"\n  [x]\n  (if (:failure x)\n    (-> (dissoc x ::stc/ret)\n      (update :spec s/describe)\n      (update :failure unwrap-failure))\n    (dissoc x :spec ::stc/ret)))\n\n(defn summarize-results\n  \"Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result.\"\n  ([check-results] (summarize-results check-results abbrev-result))\n  ([check-results summary-result]\n   (reduce\n     (fn [summary result]\n       (pp/pprint (summary-result result))\n       (-> summary\n         (update :total inc)\n         (update (result-type result) (fnil inc 0))))\n     {:total 0}\n     check-results)))\n\n(comment\n  (require\n    '[cljs.pprint :as pp]\n    '[cljs.spec :as s]\n    '[cljs.spec.gen :as gen]\n    '[cljs.test :as ctest])\n\n  (require :reload '[cljs.spec.test :as test])\n\n  ;; discover speced vars for your own test runner\n  (s/speced-vars)\n\n  ;; check a single var\n  (test/check-var #'-)\n  (test/check-var #'+)\n  (test/check-var #'clojure.spec.broken-specs/throwing-fn)\n\n  ;; old style example tests\n  (ctest/run-all-tests)\n\n  (s/speced-vars 'clojure.spec.correct-specs)\n  ;; new style spec tests return same kind of map\n  (test/check-var #'subs)\n  (cljs.spec.test/run-tests 'clojure.core)\n  (test/run-all-tests)\n\n  ;; example evaluation\n  (defn ranged-rand\n    \"Returns random int in range start <= rand < end\"\n    [start end]\n    (+ start (long (rand (- end start)))))\n\n  (s/fdef ranged-rand\n    :args (s/and (s/cat :start int? :end int?)\n                 #(< (:start %) (:end %)))\n    :ret  int?\n    :fn   (s/and #(>= (:ret %) (-> % :args :start))\n                 #(< (:ret %) (-> % :args :end))))\n\n  (instrumentable-syms)\n\n  (m/instrument-1 `ranged-rand {})\n  (m/unstrument-1 `ranged-rand)\n\n  (m/instrument)\n  (m/instrument `ranged-rand)\n  (m/instrument `[ranged-rand])\n\n  (m/unstrument)\n  (m/unstrument `ranged-rand)\n  (m/unstrument `[ranged-rand])\n\n  (ranged-rand 8 5)\n  (defn foo\n    ([a])\n    ([a b]\n     (ranged-rand 8 5)))\n  (foo 1 2)\n  (m/unstrument-1 `ranged-rand)\n\n  (m/check-1 `ranged-rand nil nil {})\n\n  (m/check-fn inc\n    (s/fspec\n      :args (s/cat :x int?)\n      :ret  int?))\n\n  (m/checkable-syms)\n\n  (m/check `ranged-rand)\n  )\n\n\n\n\n\n","~:reader-features",["^D",["~:cljs"]],"~:source-map",["^ ","~i21",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",11],["^ ","^26",35,"^27",11],["^ ","^26",0,"^27",12]],"~i6",[["^ ","^26",0,"^27",11,"^L","cljs.spec.test.alpha/distinct-by"]]],"~i22",["^ ","~i4",[["^ ","^26",78,"^27",11,"^L","f"]],"~i6",[["^ ","^26",80,"^27",11,"^L","coll"]]],"~i23",["^ ","~i3",[["^ ","^26",0,"^27",12],["^ ","^26",0,"^27",41]],"~i9",[["^ ","^26",4,"^27",12,"^L","step"]],"~i14",[["^ ","^26",11,"^27",12],["^ ","^26",0,"^27",13]],"~i24",[["^ ","^26",61,"^27",12,"^L","xs"]],"~i27",[["^ ","^26",64,"^27",12,"^L","seen"]]],"^2;",["^ ","~i16",[["^ ","^26",0,"^27",13],["^ ","^26",12,"^27",13,"^L","cljs.core/LazySeq"],["^ ","^26",30,"^27",13],["^ ","^26",35,"^27",13],["^ ","^26",0,"^27",14],["^ ","^26",3,"^27",39],["^ ","^26",8,"^27",39]]],"~i25",["^ ","~i18",[["^ ","^26",0,"^27",14],["^ ","^26",4,"^27",14,"^L","fexpr__27355"],["^ ","^26",0,"^27",38],["^ ","^26",0,"^27",38],["^ ","^26",7,"^27",38,"^L","fexpr__27355"]],"~i19",[["^ ","^26",19,"^27",14],["^ ","^26",30,"^27",14,"^L","p__27357"],["^ ","^26",0,"^27",16],["^ ","^26",0,"^27",16],["^ ","^26",4,"^27",16,"^L","vec__27358"],["^ ","^26",17,"^27",16,"^L","p__27357"],["^ ","^26",8,"^27",17],["^ ","^26",8,"^27",17,"^L","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^26",52,"^27",17,"^L","vec__27358"],["^ ","^26",63,"^27",17],["^ ","^26",67,"^27",17],["^ ","^26",13,"^27",18,"^L","vec__27358"],["^ ","^26",0,"^27",19]],"^2>",[["^ ","^26",4,"^27",17,"^L","x"]],"~i31",[["^ ","^26",4,"^27",18,"^L","xs"]],"~i35",[["^ ","^26",39,"^27",14,"^L","seen"]]],"~i26",["^ ","^25",[["^ ","^26",0,"^27",19],["^ ","^26",4,"^27",19,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",20],["^ ","^26",0,"^27",20],["^ ","^26",3,"^27",20,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",21],["^ ","^26",0,"^27",21],["^ ","^26",8,"^27",21,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",22],["^ ","^26",0,"^27",33]],"~i32",[["^ ","^26",4,"^27",21,"^L","s"]],"~i34",[["^ ","^26",25,"^27",19]],"^2B",[["^ ","^26",25,"^27",19,"^L","cljs.core/seq"]],"~i39",[["^ ","^26",39,"^27",19,"^L","xs"]]],"^2<",["^ ","^29",[["^ ","^26",0,"^27",22],["^ ","^26",0,"^27",23]],"~i29",[["^ ","^26",4,"^27",22,"^L","v"]],"^2A",[["^ ","^26",8,"^27",22]],"^2D",[["^ ","^26",9,"^27",22,"^L","f"],["^ ","^26",43,"^27",22,"^L","f"],["^ ","^26",80,"^27",22,"^L","f"]],"^2E",[["^ ","^26",75,"^27",22,"^L","x"],["^ ","^26",92,"^27",22,"^L","x"]]],"~i28",["^ ","^2>",[["^ ","^26",0,"^27",23]],"^2G",[["^ ","^26",3,"^27",23]],"~i30",[["^ ","^26",3,"^27",23,"^L","cljs.core/contains?"]],"~i40",[["^ ","^26",29,"^27",23,"^L","seen"]],"~i45",[["^ ","^26",38,"^27",23,"^L","v"]]],"^2G",["^ ","^2<",[["^ ","^26",0,"^27",24]],"^2E",[["^ ","^26",15,"^27",24]],"^2B",[["^ ","^26",15,"^27",24,"^L","cljs.core/rest"]],"^2J",[["^ ","^26",30,"^27",24,"^L","s"]],"~i43",[["^ ","^26",15,"^27",25,"^L","seen"]]],"^2I",["^ ","^2<",[["^ ","^26",0,"^27",30]],"^2H",[["^ ","^26",7,"^27",30,"^L","cljs.core/cons"]],"~i33",[["^ ","^26",22,"^27",30,"^L","x"]],"^2B",[["^ ","^26",24,"^27",30]],"~i36",[["^ ","^26",24,"^27",30,"^L","step"]],"~i41",[["^ ","^26",64,"^27",30]],"~i42",[["^ ","^26",64,"^27",30,"^L","cljs.core/rest"]],"~i47",[["^ ","^26",79,"^27",30,"^L","s"]],"~i50",[["^ ","^26",82,"^27",30]],"~i51",[["^ ","^26",82,"^27",30,"^L","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"~i56",[["^ ","^26",127,"^27",30,"^L","seen"]],"~i61",[["^ ","^26",136,"^27",30,"^L","v"]]],"^2A",["^ ","~i20",[["^ ","^26",20,"^27",38,"^L","xs"]],"^29",[["^ ","^26",23,"^27",38,"^L","seen"]]],"^2D",["^ ","~i5",[["^ ","^26",0,"^27",41],["^ ","^26",17,"^27",41]],"~i6",[["^ ","^26",7,"^27",41,"^L","step"]],"~i11",[["^ ","^26",12,"^27",41,"^L","coll"]]],"^2E",["^ ","~i0",[["^ ","^26",0,"^27",43],["^ ","^26",32,"^27",43],["^ ","^26",0,"^27",44]],"~i6",[["^ ","^26",0,"^27",43,"^L","cljs.spec.test.alpha/->sym"]]],"^2B",["^ ","~i3",[["^ ","^26",72,"^27",43,"^L","x"]]],"^2N",["^ ","~i2",[["^ ","^26",0,"^27",44],["^ ","^26",4,"^27",44,"^L","fexpr__27370"],["^ ","^26",19,"^27",44],["^ ","^26",19,"^27",44,"^L","cljs.core/deref"],["^ ","^26",35,"^27",44],["^ ","^26",98,"^27",44],["^ ","^26",187,"^27",44],["^ ","^26",227,"^27",44],["^ ","^26",286,"^27",44],["^ ","^26",334,"^27",44],["^ ","^26",387,"^27",44],["^ ","^26",441,"^27",44],["^ ","^26",506,"^27",44],["^ ","^26",563,"^27",44],["^ ","^26",615,"^27",44],["^ ","^26",676,"^27",44],["^ ","^26",737,"^27",44],["^ ","^26",788,"^27",44],["^ ","^26",842,"^27",44],["^ ","^26",847,"^27",44],["^ ","^26",925,"^27",44],["^ ","^26",983,"^27",44],["^ ","^26",1006,"^27",44],["^ ","^26",1009,"^27",44],["^ ","^26",1011,"^27",44],["^ ","^26",1015,"^27",44],["^ ","^26",1019,"^27",44],["^ ","^26",1034,"^27",44],["^ ","^26",1117,"^27",44],["^ ","^26",1177,"^27",44],["^ ","^26",1217,"^27",44],["^ ","^26",1235,"^27",44,"^L","cljs.spec.alpha/->sym"],["^ ","^26",1261,"^27",44],["^ ","^26",1261,"^27",44],["^ ","^26",1261,"^27",44,"^L","cljs.spec.alpha/->sym"],["^ ","^26",1301,"^27",44],["^ ","^26",0,"^27",45],["^ ","^26",0,"^27",45],["^ ","^26",8,"^27",45,"^L","fexpr__27370"],["^ ","^26",53,"^27",45,"^L","fexpr__27370"],["^ ","^26",101,"^27",45,"^L","fexpr__27370"]],"^2:",[["^ ","^26",96,"^27",45,"^L","x"],["^ ","^26",124,"^27",45,"^L","x"]]],"^2J",["^ ","~i0",[["^ ","^26",0,"^27",47],["^ ","^26",54,"^27",50]],"^2>",[["^ ","^26",0,"^27",50,"^L","cljs.spec.test.alpha/*instrument-enabled*"]]],"~i44",["^ ","~i0",[["^ ","^26",0,"^27",51],["^ ","^26",37,"^27",51],["^ ","^26",0,"^27",52]],"~i6",[["^ ","^26",0,"^27",51,"^L","cljs.spec.test.alpha/get-host-port"]]],"^2K",["^ ","~i2",[["^ ","^26",0,"^27",52],["^ ","^26",0,"^27",53],["^ ","^26",0,"^27",55],["^ ","^26",50,"^27",55],["^ ","^26",125,"^27",55]],"~i6",[["^ ","^26",3,"^27",52],["^ ","^26",51,"^27",52]],"~i7",[["^ ","^26",3,"^27",52,"^L","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"]],"^28",[["^ ","^26",61,"^27",52,"^L","cljs.core/*target*"]]],"^2Q",["^ ","^2W",[["^ ","^26",104,"^27",55],["^ ","^26",104,"^27",55]],"~i15",[["^ ","^26",104,"^27",55,"^L","js/window"]]],"~i48",["^ ","^2W",[["^ ","^26",178,"^27",55],["^ ","^26",178,"^27",55]],"^2Y",[["^ ","^26",178,"^27",55,"^L","js/window"]]],"^2R",["^ ","~i0",[["^ ","^26",0,"^27",58],["^ ","^26",38,"^27",58],["^ ","^26",0,"^27",59]],"~i6",[["^ ","^26",0,"^27",58,"^L","cljs.spec.test.alpha/get-ua-product"]]],"^2S",["^ ","~i2",[["^ ","^26",0,"^27",59]],"~i6",[["^ ","^26",3,"^27",59],["^ ","^26",51,"^27",59]],"~i7",[["^ ","^26",3,"^27",59,"^L","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"]],"^28",[["^ ","^26",61,"^27",59,"^L","cljs.core/*target*"]]],"~i52",["^ ","~i4",[["^ ","^26",0,"^27",60]],"~i5",[["^ ","^26",7,"^27",60,"^L","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1"]],"~i13",[["^ ","^26",55,"^27",60,"^L","cljs.core/*target*"]]],"~i53",["^ ","~i4",[["^ ","^26",0,"^27",62],["^ ","^26",0,"^27",63],["^ ","^26",0,"^27",65],["^ ","^26",0,"^27",66],["^ ","^26",0,"^27",68],["^ ","^26",0,"^27",69],["^ ","^26",0,"^27",71],["^ ","^26",0,"^27",72],["^ ","^26",0,"^27",74]]],"~i54",["^ ","~i6",[["^ ","^26",20,"^27",62,"^L","goog.userAgent.product/SAFARI"]]],"~i55",["^ ","~i6",[["^ ","^26",20,"^27",65,"^L","goog.userAgent.product/CHROME"]]],"^2T",["^ ","~i6",[["^ ","^26",20,"^27",68,"^L","goog.userAgent.product/FIREFOX"]]],"~i57",["^ ","~i6",[["^ ","^26",20,"^27",71,"^L","goog.userAgent.product/IE"]]],"~i59",["^ ","~i0",[["^ ","^26",0,"^27",81],["^ ","^26",31,"^27",81],["^ ","^26",0,"^27",82],["^ ","^26",0,"^27",82],["^ ","^26",50,"^27",82]],"~i6",[["^ ","^26",0,"^27",81,"^L","cljs.spec.test.alpha/get-env"]]],"~i60",["^ ","^2Y",[["^ ","^26",114,"^27",82]],"^2=",[["^ ","^26",114,"^27",82,"^L","cljs.spec.test.alpha/get-ua-product"]]],"~i62",["^ ","~i0",[["^ ","^26",0,"^27",84],["^ ","^26",38,"^27",87],["^ ","^26",0,"^27",88]],"~i7",[["^ ","^26",0,"^27",87,"^L","cljs.spec.test.alpha/fn-spec?"]]],"~i64",["^ ","~i3",[["^ ","^26",84,"^27",87,"^L","m"]]],"~i65",["^ ","~i2",[["^ ","^26",0,"^27",88],["^ ","^26",4,"^27",88,"^L","or__3949__auto__"],["^ ","^26",0,"^27",89],["^ ","^26",0,"^27",89],["^ ","^26",20,"^27",89,"^L","or__3949__auto__"],["^ ","^26",0,"^27",90,"^L","or__3949__auto__"]],"~i6",[["^ ","^26",23,"^27",88],["^ ","^26",23,"^27",88]],"^30",[["^ ","^26",106,"^27",88,"^L","m"]],"^2=",[["^ ","^26",0,"^27",92],["^ ","^26",7,"^27",92]],"^28",[["^ ","^26",88,"^27",92,"^L","m"]]],"~i68",["^ ","~i0",[["^ ","^26",0,"^27",95],["^ ","^26",42,"^27",95],["^ ","^26",0,"^27",96]],"~i7",[["^ ","^26",0,"^27",95,"^L","cljs.spec.test.alpha/explain-data*"]]],"~i69",["^ ","~i3",[["^ ","^26",92,"^27",95,"^L","spec"]],"~i8",[["^ ","^26",97,"^27",95,"^L","v"]]],"~i70",["^ ","~i2",[["^ ","^26",0,"^27",96],["^ ","^26",0,"^27",97],["^ ","^26",0,"^27",99]],"~i12",[["^ ","^26",20,"^27",96],["^ ","^26",86,"^27",96]],"^30",[["^ ","^26",20,"^27",96,"^L","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$3"]],"^28",[["^ ","^26",79,"^27",96,"^L","spec"]],"^2<",[["^ ","^26",84,"^27",96,"^L","v"]]],"~i71",["^ ","~i4",[["^ ","^26",0,"^27",99]],"~i5",[["^ ","^26",7,"^27",99,"^L","cljs.spec.alpha/explain-data"]],"^2V",[["^ ","^26",36,"^27",99,"^L","spec"]],"^2>",[["^ ","^26",41,"^27",99,"^L","v"]]],"~i73",["^ ","~i0",[["^ ","^26",0,"^27",102],["^ ","^26",35,"^27",102],["^ ","^26",0,"^27",103]],"~i7",[["^ ","^26",0,"^27",102,"^L","cljs.spec.test.alpha/find-caller"]],"^2V",[["^ ","^26",78,"^27",102,"^L","st"]]],"~i74",["^ ","~i2",[["^ ","^26",0,"^27",103],["^ ","^26",21,"^27",103],["^ ","^26",0,"^27",104],["^ ","^26",0,"^27",121]],"^2<",[["^ ","^26",81,"^27",103,"^L","frame"]]],"~i75",["^ ","^3=",[["^ ","^26",0,"^27",104],["^ ","^26",0,"^27",105],["^ ","^26",0,"^27",118]],"^2?",[["^ ","^26",20,"^27",104,"^L","frame"]]],"~i76",["^ ","^2:",[["^ ","^26",0,"^27",105],["^ ","^26",0,"^27",106]],"^2V",[["^ ","^26",4,"^27",105,"^L","s"]],"^28",[["^ ","^26",8,"^27",105],["^ ","^26",8,"^27",105]],"^2M",[["^ ","^26",100,"^27",105,"^L","frame"]]],"~i77",["^ ","^2=",[["^ ","^26",0,"^27",106],["^ ","^26",4,"^27",106,"^L","and__3938__auto__"],["^ ","^26",0,"^27",107],["^ ","^26",0,"^27",107],["^ ","^26",3,"^27",107,"^L","and__3938__auto__"],["^ ","^26",0,"^27",108],["^ ","^26",4,"^27",108,"^L","and__3938__auto__"],["^ ","^26",0,"^27",109],["^ ","^26",0,"^27",109],["^ ","^26",3,"^27",109,"^L","and__3938__auto__"],["^ ","^26",0,"^27",112,"^L","and__3938__auto__"],["^ ","^26",0,"^27",115,"^L","and__3938__auto__"]],"^25",[["^ ","^26",24,"^27",106]],"^2I",[["^ ","^26",31,"^27",106,"^L","s"]],"^2M",[["^ ","^26",28,"^27",108]],"~i38",[["^ ","^26",30,"^27",108]],"^2F",[["^ ","^26",30,"^27",108,"^L","clojure.string/blank?"]],"^31",[["^ ","^26",58,"^27",108,"^L","s"]]],"~i78",["^ ","^25",[["^ ","^26",0,"^27",110],["^ ","^26",25,"^27",110]],"^28",[["^ ","^26",7,"^27",110,"^L","cljs.core/re-find"]],"^3:",[["^ ","^26",62,"^27",110,"^L","s"]]],"~i79",["^ ","~i4",[["^ ","^26",0,"^27",121]],"~i9",[["^ ","^26",3,"^27",123,"^L","st"]]],"~i80",["^ ","~i9",[["^ ","^26",89,"^27",121],["^ ","^26",140,"^27",121],["^ ","^26",151,"^27",121,"^L","p1__27377#"],["^ ","^26",0,"^27",122]],"~i10",[["^ ","^26",89,"^27",121,"^L","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2"]],"^28",[["^ ","^26",0,"^27",122]],"^29",[["^ ","^26",7,"^27",122,"^L","cljs.core/not"]],"^2<",[["^ ","^26",21,"^27",122],["^ ","^26",36,"^27",122,"^L","p1__27377#"]],"^2H",[["^ ","^26",21,"^27",122,"^L","search-spec-fn"]]],"~i81",["^ ","~i9",[["^ ","^26",23,"^27",121]],"^3H",[["^ ","^26",23,"^27",121,"^L","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2"]],"^25",[["^ ","^26",74,"^27",121,"^L","search-spec-fn"]]],"~i82",["^ ","~i9",[["^ ","^26",7,"^27",121,"^L","cljs.core/first"]]],"~i86",["^ ","~i0",[["^ ","^26",0,"^27",125],["^ ","^26",40,"^27",125],["^ ","^26",0,"^27",126]],"~i7",[["^ ","^26",0,"^27",125,"^L","cljs.spec.test.alpha/spec-checking-fn"]]],"~i87",["^ ","~i3",[["^ ","^26",88,"^27",125,"^L","v"]],"~i5",[["^ ","^26",90,"^27",125,"^L","f"]],"~i7",[["^ ","^26",92,"^27",125,"^L","fn-spec"]]],"~i88",["^ ","~i2",[["^ ","^26",0,"^27",126],["^ ","^26",0,"^27",163]],"~i8",[["^ ","^26",4,"^27",126,"^L","fn-spec"]],"^2=",[["^ ","^26",18,"^27",126],["^ ","^26",35,"^27",126,"^L","fexpr__27386"],["^ ","^26",50,"^27",126],["^ ","^26",50,"^27",126,"^L","cljs.core/deref"],["^ ","^26",66,"^27",126],["^ ","^26",131,"^27",126],["^ ","^26",229,"^27",126],["^ ","^26",269,"^27",126],["^ ","^26",328,"^27",126],["^ ","^26",376,"^27",126],["^ ","^26",429,"^27",126],["^ ","^26",483,"^27",126],["^ ","^26",548,"^27",126],["^ ","^26",605,"^27",126],["^ ","^26",657,"^27",126],["^ ","^26",718,"^27",126],["^ ","^26",779,"^27",126],["^ ","^26",830,"^27",126],["^ ","^26",884,"^27",126],["^ ","^26",889,"^27",126],["^ ","^26",967,"^27",126],["^ ","^26",1036,"^27",126],["^ ","^26",1059,"^27",126],["^ ","^26",1062,"^27",126],["^ ","^26",1064,"^27",126],["^ ","^26",1068,"^27",126],["^ ","^26",1072,"^27",126],["^ ","^26",1087,"^27",126],["^ ","^26",1170,"^27",126],["^ ","^26",1246,"^27",126],["^ ","^26",1320,"^27",126],["^ ","^26",1338,"^27",126,"^L","cljs.spec.alpha/maybe-spec"],["^ ","^26",1366,"^27",126],["^ ","^26",1366,"^27",126],["^ ","^26",1366,"^27",126,"^L","cljs.spec.alpha/maybe-spec"],["^ ","^26",1408,"^27",126],["^ ","^26",0,"^27",127],["^ ","^26",0,"^27",127],["^ ","^26",8,"^27",127,"^L","fexpr__27386"],["^ ","^26",53,"^27",127,"^L","fexpr__27386"],["^ ","^26",107,"^27",127,"^L","fexpr__27386"]],"^2M",[["^ ","^26",96,"^27",127,"^L","fn-spec"],["^ ","^26",130,"^27",127,"^L","fn-spec"]]],"~i89",["^ ","~i8",[["^ ","^26",4,"^27",129,"^L","conform!"]],"~i17",[["^ ","^26",20,"^27",129],["^ ","^26",0,"^27",131]],"^28",[["^ ","^26",18,"^27",130,"^L","v"]],"^2;",[["^ ","^26",24,"^27",130,"^L","role"]],"^2G",[["^ ","^26",29,"^27",130,"^L","spec"]],"^2E",[["^ ","^26",34,"^27",130,"^L","data"]],"^2F",[["^ ","^26",39,"^27",130,"^L","args"]]],"~i90",["^ ","^2@",[["^ ","^26",0,"^27",131],["^ ","^26",0,"^27",132]],"^2>",[["^ ","^26",4,"^27",131,"^L","conformed"]],"^2B",[["^ ","^26",16,"^27",131]],"^2N",[["^ ","^26",16,"^27",131,"^L","cljs.spec.alpha/conform"]],"~i46",[["^ ","^26",40,"^27",131,"^L","spec"]],"^2S",[["^ ","^26",45,"^27",131,"^L","data"]]],"~i91",["^ ","^25",[["^ ","^26",0,"^27",132]],"^2>",[["^ ","^26",3,"^27",132],["^ ","^26",48,"^27",132]],"^2C",[["^ ","^26",3,"^27",132,"^L","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2J",[["^ ","^26",137,"^27",132,"^L","conformed"]]],"~i92",["^ ","^29",[["^ ","^26",0,"^27",133],["^ ","^26",0,"^27",140]],"^2G",[["^ ","^26",4,"^27",133,"^L","caller"]],"^2N",[["^ ","^26",13,"^27",133]],"~i37",[["^ ","^26",13,"^27",133,"^L","cljs.spec.test.alpha/find-caller"]]],"~i93",["^ ","^3D",[["^ ","^26",46,"^27",133],["^ ","^26",63,"^27",133,"^L","G__27389"],["^ ","^26",4,"^27",134,"^L","G__27390"],["^ ","^26",4,"^27",135,"^L","G__27391"],["^ ","^26",4,"^27",136,"^L","G__27392"],["^ ","^26",15,"^27",136],["^ ","^26",0,"^27",137],["^ ","^26",0,"^27",137],["^ ","^26",136,"^27",137,"^L","G__27389"],["^ ","^26",145,"^27",137,"^L","G__27390"],["^ ","^26",154,"^27",137,"^L","G__27391"],["^ ","^26",163,"^27",137,"^L","G__27392"],["^ ","^26",218,"^27",137,"^L","G__27389"],["^ ","^26",227,"^27",137,"^L","G__27390"],["^ ","^26",236,"^27",137,"^L","G__27391"],["^ ","^26",245,"^27",137,"^L","G__27392"]],"^2F",[["^ ","^26",8,"^27",137,"^L","cljs.stacktrace/parse-stacktrace"],["^ ","^26",73,"^27",137,"^L","cljs.stacktrace/parse-stacktrace"],["^ ","^26",175,"^27",137,"^L","cljs.stacktrace/parse-stacktrace"]]],"~i94",["^ ","^2J",[["^ ","^26",74,"^27",133]],"^2O",[["^ ","^26",74,"^27",133,"^L","cljs.spec.test.alpha/get-host-port"]]],"~i95",["^ ","^2J",[["^ ","^26",15,"^27",134]],"~i49",[["^ ","^26",15,"^27",134],["^ ","^26",20,"^27",134,"^L","js/Error"]]],"~i96",["^ ","^2J",[["^ ","^26",15,"^27",135]],"^2O",[["^ ","^26",15,"^27",135,"^L","cljs.spec.test.alpha/get-env"]]],"~i97",["^ ","^2G",[["^ ","^26",4,"^27",139,"^L","ed"]],"^2D",[["^ ","^26",9,"^27",139]],"^2M",[["^ ","^26",9,"^27",139,"^L","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^2F",[["^ ","^26",112,"^27",139],["^ ","^26",373,"^27",139],["^ ","^26",510,"^27",139],["^ ","^26",597,"^27",139]],"^2J",[["^ ","^26",112,"^27",139,"^L","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"^3Q",[["^ ","^26",165,"^27",139],["^ ","^26",205,"^27",139],["^ ","^26",301,"^27",139],["^ ","^26",334,"^27",139]],"^2Q",[["^ ","^26",165,"^27",139,"^L","cljs.spec.alpha/explain-data*"]],"~i63",[["^ ","^26",200,"^27",139,"^L","spec"]],"^3;",[["^ ","^26",288,"^27",139,"^L","role"]],"^3I",[["^ ","^26",367,"^27",139,"^L","data"]]],"~i98",["^ ","^2R",[["^ ","^26",455,"^27",139,"^L","args"]]],"~i100",["^ ","^2E",[["^ ","^26",668,"^27",139],["^ ","^26",694,"^27",139],["^ ","^26",694,"^27",139],["^ ","^26",737,"^27",139],["^ ","^26",848,"^27",139]],"^2J",[["^ ","^26",686,"^27",139,"^L","caller"]]],"~i101",["^ ","^3Q",[["^ ","^26",833,"^27",139,"^L","caller"]]],"~i102",["^ ","^2>",[["^ ","^26",0,"^27",140]],"^2D",[["^ ","^26",6,"^27",140]],"^2M",[["^ ","^26",6,"^27",140,"^L","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]]],"~i103",["^ ","^2E",[["^ ","^26",54,"^27",140],["^ ","^26",55,"^27",140],["^ ","^26",117,"^27",140]],"^2R",[["^ ","^26",110,"^27",140,"^L","v"]],"^3J",[["^ ","^26",191,"^27",140],["^ ","^26",208,"^27",140,"^L","sb__4462__auto__"],["^ ","^26",227,"^27",140],["^ ","^26",232,"^27",140,"^L","goog.string/StringBuffer"],["^ ","^26",0,"^27",141],["^ ","^26",0,"^27",141],["^ ","^26",4,"^27",141,"^L","*print-newline*27394"],["^ ","^26",43,"^27",141,"^L","cljs.core/*print-newline*"],["^ ","^26",4,"^27",142,"^L","*print-fn*27395"],["^ ","^26",38,"^27",142,"^L","cljs.core/*print-fn*"],["^ ","^26",0,"^27",143],["^ ","^26",0,"^27",143],["^ ","^26",0,"^27",143,"^L","cljs.core/*print-newline*"],["^ ","^26",38,"^27",143],["^ ","^26",0,"^27",145],["^ ","^26",0,"^27",145,"^L","cljs.core/*print-fn*"],["^ ","^26",33,"^27",145],["^ ","^26",18,"^27",146,"^L","x__4463__auto__"],["^ ","^26",0,"^27",147],["^ ","^26",0,"^27",147],["^ ","^26",7,"^27",147,"^L","sb__4462__auto__"],["^ ","^26",31,"^27",147,"^L","x__4463__auto__"],["^ ","^26",0,"^27",151],["^ ","^26",4,"^27",151],["^ ","^26",10,"^27",152],["^ ","^26",10,"^27",152],["^ ","^26",10,"^27",152,"^L","cljs.core/*print-fn*"],["^ ","^26",43,"^27",152,"^L","*print-fn*27395"],["^ ","^26",0,"^27",154],["^ ","^26",0,"^27",154,"^L","cljs.core/*print-newline*"],["^ ","^26",38,"^27",154,"^L","*print-newline*27394"],["^ ","^26",0,"^27",156],["^ ","^26",52,"^27",156,"^L","sb__4462__auto__"]],"^3Y",[["^ ","^26",4,"^27",151]],"^3Z",[["^ ","^26",4,"^27",151,"^L","cljs.spec.alpha/explain-out"]],"~i111",[["^ ","^26",32,"^27",151,"^L","ed"]]],"~i104",["^ ","^2E",[["^ ","^26",16,"^27",157,"^L","ed"]]],"~i105",["^ ","^29",[["^ ","^26",0,"^27",159,"^L","conformed"]]],"~i106",["^ ","~i4",[["^ ","^26",0,"^27",163],["^ ","^26",4,"^27",163,"^L","G__27396"],["^ ","^26",0,"^27",203],["^ ","^26",0,"^27",246,"^L","G__27396"]],"^3H",[["^ ","^26",15,"^27",163],["^ ","^26",0,"^27",166]],"^3O",[["^ ","^26",35,"^27",165,"^L","args"],["^ ","^26",4,"^27",186,"^L","args"],["^ ","^26",2,"^27",190,"^L","args"],["^ ","^26",36,"^27",192,"^L","args"],["^ ","^26",4,"^27",195,"^L","args"],["^ ","^26",26,"^27",196,"^L","args"]]],"~i107",["^ ","^3=",[["^ ","^26",0,"^27",166]],"^2=",[["^ ","^26",3,"^27",166,"^L","cljs.spec.test.alpha/*instrument-enabled*"]]],"~i108",["^ ","^2:",[["^ ","^26",0,"^27",167],["^ ","^26",4,"^27",167,"^L","*instrument-enabled*27397"],["^ ","^26",42,"^27",167,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",0,"^27",168],["^ ","^26",0,"^27",168],["^ ","^26",0,"^27",168,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",54,"^27",168],["^ ","^26",0,"^27",170],["^ ","^26",4,"^27",170],["^ ","^26",11,"^27",180],["^ ","^26",11,"^27",180],["^ ","^26",11,"^27",180,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",65,"^27",180,"^L","*instrument-enabled*27397"]]],"~i109",["^ ","^2=",[["^ ","^26",4,"^27",170],["^ ","^26",0,"^27",171],["^ ","^26",0,"^27",173]],"^28",[["^ ","^26",24,"^27",170],["^ ","^26",24,"^27",170]],"^2G",[["^ ","^26",107,"^27",170,"^L","fn-spec"]],"^3D",[["^ ","^26",0,"^27",171],["^ ","^26",16,"^27",171]],"^2F",[["^ ","^26",0,"^27",171,"^L","conform!"]],"^2Z",[["^ ","^26",14,"^27",171,"^L","v"]],"^2T",[["^ ","^26",69,"^27",171],["^ ","^26",69,"^27",171]],"^3[",[["^ ","^26",152,"^27",171,"^L","fn-spec"]],"~i72",[["^ ","^26",165,"^27",171,"^L","args"]],"^3C",[["^ ","^26",170,"^27",171,"^L","args"]]],"~i110",["^ ","^2=",[["^ ","^26",0,"^27",175],["^ ","^26",4,"^27",175,"^L","*instrument-enabled*27398"],["^ ","^26",0,"^27",176],["^ ","^26",0,"^27",176],["^ ","^26",54,"^27",176],["^ ","^26",0,"^27",178],["^ ","^26",4,"^27",178],["^ ","^26",10,"^27",179],["^ ","^26",10,"^27",179],["^ ","^26",64,"^27",179,"^L","*instrument-enabled*27398"]],"^2C",[["^ ","^26",42,"^27",175,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",0,"^27",176,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",10,"^27",179,"^L","cljs.spec.test.alpha/*instrument-enabled*"]]],"^45",["^ ","^2?",[["^ ","^26",4,"^27",178]],"^2@",[["^ ","^26",11,"^27",178,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^2>",[["^ ","^26",57,"^27",178,"^L","f"]],"^2<",[["^ ","^26",59,"^27",178,"^L","args"]]],"~i112",["^ ","^2:",[["^ ","^26",0,"^27",182]],"^2Y",[["^ ","^26",7,"^27",182,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^25",[["^ ","^26",53,"^27",182,"^L","f"]],"^29",[["^ ","^26",55,"^27",182,"^L","args"]]],"~i113",["^ ","~i6",[["^ ","^26",0,"^27",203],["^ ","^26",4,"^27",203,"^L","G__27399"],["^ ","^26",21,"^27",203,"^L","G__27396"],["^ ","^26",4,"^27",204,"^L","G__27400"],["^ ","^26",0,"^27",244],["^ ","^26",0,"^27",244],["^ ","^26",19,"^27",244,"^L","G__27399"],["^ ","^26",34,"^27",244,"^L","G__27400"]],"~i7",[["^ ","^26",0,"^27",244,"^L","goog.object/extend"]],"^2@",[["^ ","^26",21,"^27",204],["^ ","^26",26,"^27",204,"^L","cljs.core/MetaFn"],["^ ","^26",1,"^27",243]],"^2H",[["^ ","^26",43,"^27",204],["^ ","^26",0,"^27",207]],"^2B",[["^ ","^26",35,"^27",206,"^L","args"],["^ ","^26",4,"^27",227,"^L","args"],["^ ","^26",2,"^27",231,"^L","args"],["^ ","^26",36,"^27",233,"^L","args"],["^ ","^26",4,"^27",236,"^L","args"],["^ ","^26",26,"^27",237,"^L","args"]]],"~i114",["^ ","^2I",[["^ ","^26",0,"^27",207]],"^2E",[["^ ","^26",3,"^27",207,"^L","cljs.spec.test.alpha/*instrument-enabled*"]]],"~i115",["^ ","^2D",[["^ ","^26",0,"^27",208],["^ ","^26",4,"^27",208,"^L","*instrument-enabled*27401"],["^ ","^26",42,"^27",208,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",0,"^27",209],["^ ","^26",0,"^27",209],["^ ","^26",0,"^27",209,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",54,"^27",209],["^ ","^26",0,"^27",211],["^ ","^26",4,"^27",211],["^ ","^26",11,"^27",221],["^ ","^26",11,"^27",221],["^ ","^26",11,"^27",221,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",65,"^27",221,"^L","*instrument-enabled*27401"]]],"~i116",["^ ","^2E",[["^ ","^26",4,"^27",211],["^ ","^26",0,"^27",212],["^ ","^26",0,"^27",214]],"^2J",[["^ ","^26",24,"^27",211],["^ ","^26",24,"^27",211]],"^2Q",[["^ ","^26",107,"^27",211,"^L","fn-spec"]],"^2T",[["^ ","^26",0,"^27",212],["^ ","^26",16,"^27",212]],"^34",[["^ ","^26",0,"^27",212,"^L","conform!"]],"~i66",[["^ ","^26",14,"^27",212,"^L","v"]],"^3@",[["^ ","^26",69,"^27",212],["^ ","^26",69,"^27",212]],"^3I",[["^ ","^26",152,"^27",212,"^L","fn-spec"]],"^3P",[["^ ","^26",165,"^27",212,"^L","args"]],"^3W",[["^ ","^26",170,"^27",212,"^L","args"]]],"~i117",["^ ","^2E",[["^ ","^26",0,"^27",216],["^ ","^26",4,"^27",216,"^L","*instrument-enabled*27406"],["^ ","^26",0,"^27",217],["^ ","^26",0,"^27",217],["^ ","^26",54,"^27",217],["^ ","^26",0,"^27",219],["^ ","^26",4,"^27",219],["^ ","^26",10,"^27",220],["^ ","^26",10,"^27",220],["^ ","^26",64,"^27",220,"^L","*instrument-enabled*27406"]],"^2X",[["^ ","^26",42,"^27",216,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",0,"^27",217,"^L","cljs.spec.test.alpha/*instrument-enabled*"],["^ ","^26",10,"^27",220,"^L","cljs.spec.test.alpha/*instrument-enabled*"]]],"~i118",["^ ","^2N",[["^ ","^26",4,"^27",219]],"^3T",[["^ ","^26",11,"^27",219,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^2L",[["^ ","^26",57,"^27",219,"^L","f"]],"^2K",[["^ ","^26",59,"^27",219,"^L","args"]]],"~i119",["^ ","^2D",[["^ ","^26",0,"^27",223]],"^2M",[["^ ","^26",7,"^27",223,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^2F",[["^ ","^26",53,"^27",223,"^L","f"]],"^2O",[["^ ","^26",55,"^27",223,"^L","args"]]],"~i121",["^ ","~i0",[["^ ","^26",0,"^27",248],["^ ","^26",32,"^27",248],["^ ","^26",0,"^27",249]],"~i7",[["^ ","^26",0,"^27",248,"^L","cljs.spec.test.alpha/no-fspec"]]],"~i122",["^ ","~i3",[["^ ","^26",72,"^27",248,"^L","v"]],"~i5",[["^ ","^26",74,"^27",248,"^L","spec"]]],"~i123",["^ ","~i2",[["^ ","^26",0,"^27",249],["^ ","^26",141,"^27",249],["^ ","^26",184,"^27",249],["^ ","^26",237,"^27",249],["^ ","^26",294,"^27",249],["^ ","^26",381,"^27",249]],"~i3",[["^ ","^26",7,"^27",249,"^L","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]],"^2W",[["^ ","^26",55,"^27",249],["^ ","^26",56,"^27",249],["^ ","^26",112,"^27",249]],"^2>",[["^ ","^26",109,"^27",249,"^L","v"]]],"~i124",["^ ","^3H",[["^ ","^26",235,"^27",249,"^L","v"]],"^2?",[["^ ","^26",289,"^27",249,"^L","spec"]]],"~i126",["^ ","~i0",[["^ ","^26",0,"^27",251],["^ ","^26",3,"^27",251],["^ ","^26",11,"^27",251,"^L","js/cljs"],["^ ","^26",44,"^27",251,"^L","js/cljs.spec"],["^ ","^26",82,"^27",251,"^L","js/cljs.spec.test"],["^ ","^26",125,"^27",251,"^L","js/cljs.spec.test.alpha"],["^ ","^26",174,"^27",251,"^L","js/cljs.spec.test.alpha.instrumented-vars"],["^ ","^26",0,"^27",252],["^ ","^26",0,"^27",253],["^ ","^26",0,"^27",253]],"^2@",[["^ ","^26",0,"^27",253,"^L","cljs.spec.test.alpha/instrumented-vars"]],"^3T",[["^ ","^26",41,"^27",253],["^ ","^26",86,"^27",253]],"^3D",[["^ ","^26",41,"^27",253,"^L","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i128",["^ ","~i0",[["^ ","^26",0,"^27",255],["^ ","^26",44,"^27",258],["^ ","^26",107,"^27",258,"^L","p__27426"],["^ ","^26",0,"^27",259],["^ ","^26",0,"^27",259],["^ ","^26",4,"^27",259,"^L","map__27427"],["^ ","^26",17,"^27",259,"^L","p__27426"],["^ ","^26",4,"^27",260,"^L","map__27427"],["^ ","^26",21,"^27",260],["^ ","^26",23,"^27",260],["^ ","^26",25,"^27",260],["^ ","^26",27,"^27",260],["^ ","^26",28,"^27",260,"^L","map__27427"],["^ ","^26",42,"^27",260],["^ ","^26",50,"^27",260],["^ ","^26",52,"^27",260],["^ ","^26",54,"^27",260],["^ ","^26",55,"^27",260],["^ ","^26",55,"^27",260,"^L","map__27427"],["^ ","^26",104,"^27",260],["^ ","^26",115,"^27",260],["^ ","^26",116,"^27",260,"^L","cljs.core/PROTOCOL_SENTINEL"],["^ ","^26",148,"^27",260],["^ ","^26",148,"^27",260,"^L","map__27427"],["^ ","^26",179,"^27",260],["^ ","^26",184,"^27",260],["^ ","^26",191,"^27",260],["^ ","^26",199,"^27",260],["^ ","^26",199,"^27",260,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",245,"^27",260,"^L","cljs.core/hash-map"],["^ ","^26",264,"^27",260,"^L","map__27427"],["^ ","^26",276,"^27",260,"^L","map__27427"],["^ ","^26",11,"^27",261],["^ ","^26",11,"^27",261,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",55,"^27",261,"^L","map__27427"],["^ ","^26",70,"^27",261],["^ ","^26",11,"^27",262],["^ ","^26",11,"^27",262,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",55,"^27",262,"^L","map__27427"],["^ ","^26",70,"^27",262],["^ ","^26",14,"^27",263],["^ ","^26",14,"^27",263,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",58,"^27",263,"^L","map__27427"],["^ ","^26",73,"^27",263],["^ ","^26",0,"^27",264]],"~i7",[["^ ","^26",0,"^27",258,"^L","cljs.spec.test.alpha/instrument-choose-fn"]]],"~i130",["^ ","~i3",[["^ ","^26",96,"^27",258,"^L","f"]],"~i5",[["^ ","^26",98,"^27",258,"^L","spec"]],"^3H",[["^ ","^26",103,"^27",258,"^L","sym"]],"^2Y",[["^ ","^26",4,"^27",261,"^L","over"]],"^2D",[["^ ","^26",4,"^27",262,"^L","stub"]],"^3T",[["^ ","^26",4,"^27",263,"^L","replace"]]],"~i131",["^ ","~i2",[["^ ","^26",0,"^27",264]],"~i6",[["^ ","^26",20,"^27",264],["^ ","^26",35,"^27",264]],"~i7",[["^ ","^26",20,"^27",264,"^L","cljs.core/some"]],"^2:",[["^ ","^26",82,"^27",264,"^L","sym"]],"^2@",[["^ ","^26",88,"^27",264,"^L","stub"]]],"~i132",["^ ","~i4",[["^ ","^26",0,"^27",265]],"~i8",[["^ ","^26",86,"^27",265,"^L","spec"]],"^30",[["^ ","^26",36,"^27",265]],"^2:",[["^ ","^26",36,"^27",265,"^L","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$2"]],"^2V",[["^ ","^26",91,"^27",265,"^L","over"]],"^2C",[["^ ","^26",7,"^27",265,"^L","cljs.spec.gen.alpha/generate"]]],"~i133",["^ ","~i4",[["^ ","^26",0,"^27",267]],"~i5",[["^ ","^26",7,"^27",267,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"~i9",[["^ ","^26",51,"^27",267,"^L","replace"]],"^3O",[["^ ","^26",59,"^27",267,"^L","sym"]],"^25",[["^ ","^26",63,"^27",267,"^L","f"]]],"~i135",["^ ","~i0",[["^ ","^26",0,"^27",270],["^ ","^26",46,"^27",273],["^ ","^26",109,"^27",273,"^L","p__27438"],["^ ","^26",0,"^27",274],["^ ","^26",0,"^27",274],["^ ","^26",4,"^27",274,"^L","map__27439"],["^ ","^26",17,"^27",274,"^L","p__27438"],["^ ","^26",4,"^27",275,"^L","map__27439"],["^ ","^26",21,"^27",275],["^ ","^26",23,"^27",275],["^ ","^26",25,"^27",275],["^ ","^26",27,"^27",275],["^ ","^26",28,"^27",275,"^L","map__27439"],["^ ","^26",42,"^27",275],["^ ","^26",50,"^27",275],["^ ","^26",52,"^27",275],["^ ","^26",54,"^27",275],["^ ","^26",55,"^27",275],["^ ","^26",55,"^27",275,"^L","map__27439"],["^ ","^26",104,"^27",275],["^ ","^26",115,"^27",275],["^ ","^26",116,"^27",275,"^L","cljs.core/PROTOCOL_SENTINEL"],["^ ","^26",148,"^27",275],["^ ","^26",148,"^27",275,"^L","map__27439"],["^ ","^26",179,"^27",275],["^ ","^26",184,"^27",275],["^ ","^26",191,"^27",275],["^ ","^26",199,"^27",275],["^ ","^26",199,"^27",275,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",245,"^27",275,"^L","cljs.core/hash-map"],["^ ","^26",264,"^27",275,"^L","map__27439"],["^ ","^26",276,"^27",275,"^L","map__27439"],["^ ","^26",16,"^27",276],["^ ","^26",16,"^27",276,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",60,"^27",276,"^L","map__27439"],["^ ","^26",75,"^27",276],["^ ","^26",0,"^27",277]],"~i7",[["^ ","^26",0,"^27",273,"^L","cljs.spec.test.alpha/instrument-choose-spec"]]],"~i137",["^ ","~i3",[["^ ","^26",100,"^27",273,"^L","spec"]],"~i8",[["^ ","^26",105,"^27",273,"^L","sym"]],"^30",[["^ ","^26",4,"^27",276,"^L","overrides"]]],"~i138",["^ ","~i2",[["^ ","^26",0,"^27",277]],"~i3",[["^ ","^26",7,"^27",277,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"~i7",[["^ ","^26",51,"^27",277,"^L","overrides"]],"^3O",[["^ ","^26",61,"^27",277,"^L","sym"]],"^25",[["^ ","^26",65,"^27",277,"^L","spec"]]],"~i140",["^ ","~i0",[["^ ","^26",0,"^27",279],["^ ","^26",42,"^27",279],["^ ","^26",0,"^27",280]],"~i7",[["^ ","^26",0,"^27",279,"^L","cljs.spec.test.alpha/instrument-1*"]]],"~i141",["^ ","~i3",[["^ ","^26",92,"^27",279,"^L","s"]],"~i5",[["^ ","^26",94,"^27",279,"^L","v"]],"~i7",[["^ ","^26",96,"^27",279,"^L","opts"]]],"~i142",["^ ","~i2",[["^ ","^26",0,"^27",280],["^ ","^26",4,"^27",281,"^L","map__27444"],["^ ","^26",4,"^27",282,"^L","map__27444"],["^ ","^26",21,"^27",282],["^ ","^26",23,"^27",282],["^ ","^26",25,"^27",282],["^ ","^26",27,"^27",282],["^ ","^26",28,"^27",282,"^L","map__27444"],["^ ","^26",42,"^27",282],["^ ","^26",50,"^27",282],["^ ","^26",52,"^27",282],["^ ","^26",54,"^27",282],["^ ","^26",55,"^27",282],["^ ","^26",55,"^27",282,"^L","map__27444"],["^ ","^26",104,"^27",282],["^ ","^26",115,"^27",282],["^ ","^26",116,"^27",282,"^L","cljs.core/PROTOCOL_SENTINEL"],["^ ","^26",148,"^27",282],["^ ","^26",148,"^27",282,"^L","map__27444"],["^ ","^26",179,"^27",282],["^ ","^26",184,"^27",282],["^ ","^26",191,"^27",282],["^ ","^26",199,"^27",282],["^ ","^26",199,"^27",282,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",245,"^27",282,"^L","cljs.core/hash-map"],["^ ","^26",264,"^27",282,"^L","map__27444"],["^ ","^26",276,"^27",282,"^L","map__27444"],["^ ","^26",10,"^27",283],["^ ","^26",10,"^27",283,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",54,"^27",283,"^L","map__27444"],["^ ","^26",69,"^27",283],["^ ","^26",14,"^27",284],["^ ","^26",14,"^27",284,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",58,"^27",284,"^L","map__27444"],["^ ","^26",73,"^27",284],["^ ","^26",14,"^27",285],["^ ","^26",14,"^27",285,"^L","cljs.core/deref"],["^ ","^26",0,"^27",296]],"~i8",[["^ ","^26",4,"^27",280,"^L","spec"]],"^30",[["^ ","^26",11,"^27",280]],"^2:",[["^ ","^26",11,"^27",280,"^L","cljs.spec.alpha/get-spec"]],"^2>",[["^ ","^26",36,"^27",280,"^L","v"]]],"~i143",["^ ","^2=",[["^ ","^26",4,"^27",283,"^L","raw"]],"^2V",[["^ ","^26",4,"^27",284,"^L","wrapped"]],"^2I",[["^ ","^26",17,"^27",281],["^ ","^26",61,"^27",281],["^ ","^26",61,"^27",281,"^L","cljs.core/deref"]],"^2A",[["^ ","^26",17,"^27",281,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2N",[["^ ","^26",77,"^27",281,"^L","cljs.spec.test.alpha/instrumented-vars"]],"^32",[["^ ","^26",117,"^27",281,"^L","v"]]],"~i144",["^ ","~i8",[["^ ","^26",4,"^27",285,"^L","current"]],"^3O",[["^ ","^26",30,"^27",285,"^L","v"]]],"~i145",["^ ","~i8",[["^ ","^26",4,"^27",286,"^L","to-wrap"]],"^2=",[["^ ","^26",14,"^27",286]],"^2V",[["^ ","^26",16,"^27",286]],"^25",[["^ ","^26",16,"^27",286,"^L","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^29",[["^ ","^26",61,"^27",286,"^L","wrapped"]],"^2A",[["^ ","^26",69,"^27",286,"^L","current"]],"^2J",[["^ ","^26",79,"^27",286,"^L","raw"]],"^2X",[["^ ","^26",83,"^27",286,"^L","current"]]],"~i146",["^ ","~i8",[["^ ","^26",4,"^27",287,"^L","ospec"]],"^2:",[["^ ","^26",12,"^27",287],["^ ","^26",29,"^27",287,"^L","or__3949__auto__"],["^ ","^26",0,"^27",288],["^ ","^26",0,"^27",288],["^ ","^26",20,"^27",288,"^L","or__3949__auto__"],["^ ","^26",0,"^27",289,"^L","or__3949__auto__"]],"^2?",[["^ ","^26",48,"^27",287]],"^2@",[["^ ","^26",48,"^27",287,"^L","cljs.spec.test.alpha/instrument-choose-spec"]],"^2P",[["^ ","^26",92,"^27",287,"^L","spec"]],"^2Q",[["^ ","^26",97,"^27",287,"^L","s"]],"^3X",[["^ ","^26",99,"^27",287,"^L","opts"]]],"~i147",["^ ","^2=",[["^ ","^26",0,"^27",291]],"^29",[["^ ","^26",6,"^27",291]],"^2;",[["^ ","^26",6,"^27",291,"^L","cljs.spec.test.alpha/no-fspec"]],"^2M",[["^ ","^26",36,"^27",291,"^L","v"]],"^2B",[["^ ","^26",38,"^27",291,"^L","spec"]]],"~i148",["^ ","~i8",[["^ ","^26",4,"^27",294,"^L","ofn"]],"^3=",[["^ ","^26",10,"^27",294]],"^30",[["^ ","^26",10,"^27",294,"^L","cljs.spec.test.alpha/instrument-choose-fn"]],"^2E",[["^ ","^26",52,"^27",294,"^L","to-wrap"]],"^2P",[["^ ","^26",60,"^27",294,"^L","ospec"]],"^2Z",[["^ ","^26",66,"^27",294,"^L","s"]],"^2R",[["^ ","^26",68,"^27",294,"^L","opts"]]],"~i149",["^ ","~i8",[["^ ","^26",4,"^27",295,"^L","checked"]],"^2=",[["^ ","^26",14,"^27",295]],"^3O",[["^ ","^26",14,"^27",295,"^L","cljs.spec.test.alpha/spec-checking-fn"]],"^2E",[["^ ","^26",52,"^27",295,"^L","v"]],"^2N",[["^ ","^26",54,"^27",295,"^L","ofn"]],"^2J",[["^ ","^26",58,"^27",295,"^L","ospec"]]],"~i150",["^ ","~i4",[["^ ","^26",0,"^27",296],["^ ","^26",108,"^27",296],["^ ","^26",151,"^27",296],["^ ","^26",210,"^27",296]],"~i5",[["^ ","^26",0,"^27",296,"^L","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4"]],"^2W",[["^ ","^26",51,"^27",296,"^L","cljs.spec.test.alpha/instrumented-vars"]],"^2G",[["^ ","^26",90,"^27",296,"^L","cljs.core/assoc"]],"^2B",[["^ ","^26",106,"^27",296,"^L","v"]],"^2L",[["^ ","^26",202,"^27",296,"^L","to-wrap"]],"^36",[["^ ","^26",269,"^27",296,"^L","checked"]]],"~i151",["^ ","~i4",[["^ ","^26",0,"^27",298,"^L","checked"]]],"~i153",["^ ","~i0",[["^ ","^26",0,"^27",300],["^ ","^26",42,"^27",300],["^ ","^26",0,"^27",301]],"~i7",[["^ ","^26",0,"^27",300,"^L","cljs.spec.test.alpha/unstrument-1*"]]],"~i154",["^ ","~i3",[["^ ","^26",92,"^27",300,"^L","s"]],"~i5",[["^ ","^26",94,"^27",300,"^L","v"]]],"~i155",["^ ","~i2",[["^ ","^26",0,"^27",301],["^ ","^26",0,"^27",302],["^ ","^26",0,"^27",320]],"~i8",[["^ ","^26",20,"^27",301,"^L","v"]]],"~i156",["^ ","~i4",[["^ ","^26",0,"^27",302],["^ ","^26",4,"^27",302,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",303],["^ ","^26",0,"^27",303],["^ ","^26",20,"^27",303,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",304],["^ ","^26",0,"^27",304],["^ ","^26",4,"^27",304,"^L","map__27449"],["^ ","^26",17,"^27",304,"^L","temp__5457__auto__"],["^ ","^26",4,"^27",305,"^L","map__27449"],["^ ","^26",21,"^27",305],["^ ","^26",23,"^27",305],["^ ","^26",25,"^27",305],["^ ","^26",27,"^27",305],["^ ","^26",28,"^27",305,"^L","map__27449"],["^ ","^26",42,"^27",305],["^ ","^26",50,"^27",305],["^ ","^26",52,"^27",305],["^ ","^26",54,"^27",305],["^ ","^26",55,"^27",305],["^ ","^26",55,"^27",305,"^L","map__27449"],["^ ","^26",104,"^27",305],["^ ","^26",115,"^27",305],["^ ","^26",116,"^27",305,"^L","cljs.core/PROTOCOL_SENTINEL"],["^ ","^26",148,"^27",305],["^ ","^26",148,"^27",305,"^L","map__27449"],["^ ","^26",179,"^27",305],["^ ","^26",184,"^27",305],["^ ","^26",191,"^27",305],["^ ","^26",199,"^27",305],["^ ","^26",199,"^27",305,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",245,"^27",305,"^L","cljs.core/hash-map"],["^ ","^26",264,"^27",305,"^L","map__27449"],["^ ","^26",276,"^27",305,"^L","map__27449"],["^ ","^26",10,"^27",306],["^ ","^26",10,"^27",306,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",54,"^27",306,"^L","map__27449"],["^ ","^26",69,"^27",306],["^ ","^26",14,"^27",307],["^ ","^26",14,"^27",307,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",58,"^27",307,"^L","map__27449"],["^ ","^26",73,"^27",307],["^ ","^26",0,"^27",308],["^ ","^26",0,"^27",317]],"^29",[["^ ","^26",4,"^27",306,"^L","raw"]],"^2<",[["^ ","^26",4,"^27",307,"^L","wrapped"]],"^3T",[["^ ","^26",25,"^27",302],["^ ","^26",69,"^27",302],["^ ","^26",69,"^27",302,"^L","cljs.core/deref"]],"^3D",[["^ ","^26",25,"^27",302,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^2L",[["^ ","^26",85,"^27",302,"^L","cljs.spec.test.alpha/instrumented-vars"]],"^2U",[["^ ","^26",125,"^27",302,"^L","v"]]],"~i157",["^ ","~i6",[["^ ","^26",0,"^27",308]],"~i7",[["^ ","^26",0,"^27",308,"^L","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"]],"^30",[["^ ","^26",51,"^27",308,"^L","cljs.spec.test.alpha/instrumented-vars"]],"^2A",[["^ ","^26",90,"^27",308,"^L","cljs.core/dissoc"]],"^3D",[["^ ","^26",107,"^27",308,"^L","v"]]],"~i158",["^ ","~i6",[["^ ","^26",0,"^27",310],["^ ","^26",14,"^27",310],["^ ","^26",14,"^27",310,"^L","cljs.core/deref"],["^ ","^26",0,"^27",311]],"^3=",[["^ ","^26",4,"^27",310,"^L","current"]],"^25",[["^ ","^26",30,"^27",310,"^L","v"]]],"~i159",["^ ","~i8",[["^ ","^26",0,"^27",311],["^ ","^26",0,"^27",312],["^ ","^26",0,"^27",314]],"^2:",[["^ ","^26",3,"^27",311]],"^2Y",[["^ ","^26",3,"^27",311,"^L","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^3O",[["^ ","^26",48,"^27",311,"^L","wrapped"]],"^2>",[["^ ","^26",56,"^27",311,"^L","current"]]],"~i160",["^ ","^3H",[["^ ","^26",0,"^27",312,"^L","raw"]]],"~i162",["^ ","~i0",[["^ ","^26",0,"^27",323],["^ ","^26",43,"^27",323],["^ ","^26",0,"^27",324]],"~i7",[["^ ","^26",0,"^27",323,"^L","cljs.spec.test.alpha/fn-spec-name?"]]],"~i163",["^ ","~i3",[["^ ","^26",94,"^27",323,"^L","s"]]],"~i164",["^ ","~i2",[["^ ","^26",0,"^27",324],["^ ","^26",21,"^27",324,"^L","cljs.core/Symbol"]],"^2W",[["^ ","^26",8,"^27",324,"^L","s"]]],"~i166",["^ ","~i0",[["^ ","^26",0,"^27",326],["^ ","^26",37,"^27",326],["^ ","^26",0,"^27",327]],"~i7",[["^ ","^26",0,"^27",326,"^L","cljs.spec.test.alpha/collectionize"]]],"~i167",["^ ","~i3",[["^ ","^26",82,"^27",326,"^L","x"]]],"~i168",["^ ","~i2",[["^ ","^26",0,"^27",327]],"~i6",[["^ ","^26",3,"^27",327],["^ ","^26",17,"^27",327,"^L","cljs.core/Symbol"]],"^2Y",[["^ ","^26",4,"^27",327,"^L","x"]]],"~i169",["^ ","~i4",[["^ ","^26",0,"^27",328],["^ ","^26",12,"^27",328,"^L","cljs.core/List"],["^ ","^26",27,"^27",328],["^ ","^26",34,"^27",328],["^ ","^26",39,"^27",328],["^ ","^26",43,"^27",328]],"^3H",[["^ ","^26",32,"^27",328,"^L","x"]]],"~i170",["^ ","~i4",[["^ ","^26",0,"^27",330,"^L","x"]]],"~i172",["^ ","~i0",[["^ ","^26",0,"^27",333],["^ ","^26",0,"^27",333],["^ ","^26",43,"^27",337],["^ ","^26",94,"^27",337,"^L","var_args"],["^ ","^26",0,"^27",338],["^ ","^26",0,"^27",338],["^ ","^26",4,"^27",338,"^L","G__27457"],["^ ","^26",15,"^27",338],["^ ","^26",15,"^27",338],["^ ","^26",0,"^27",339],["^ ","^26",0,"^27",339],["^ ","^26",8,"^27",339,"^L","G__27457"],["^ ","^26",5,"^27",340],["^ ","^26",0,"^27",341],["^ ","^26",7,"^27",341,"^L","cljs.spec.test.alpha/instrumentable-syms"],["^ ","^26",5,"^27",344],["^ ","^26",0,"^27",345],["^ ","^26",7,"^27",345,"^L","cljs.spec.test.alpha/instrumentable-syms"],["^ ","^26",78,"^27",345],["^ ","^26",79,"^27",345],["^ ","^26",89,"^27",345],["^ ","^26",0,"^27",349],["^ ","^26",6,"^27",349],["^ ","^26",11,"^27",349,"^L","js/Error"],["^ ","^26",17,"^27",349],["^ ","^26",18,"^27",349],["^ ","^26",80,"^27",349],["^ ","^26",80,"^27",349],["^ ","^26",0,"^27",354],["^ ","^26",0,"^27",354],["^ ","^26",73,"^27",354],["^ ","^26",0,"^27",355],["^ ","^26",0,"^27",358],["^ ","^26",0,"^27",358],["^ ","^26",73,"^27",358],["^ ","^26",0,"^27",359],["^ ","^26",0,"^27",367],["^ ","^26",0,"^27",367],["^ ","^26",67,"^27",367],["^ ","^26",0,"^27",369]],"~i6",[["^ ","^26",0,"^27",337,"^L","cljs.spec.test.alpha/instrumentable-syms"],["^ ","^26",0,"^27",354,"^L","cljs.spec.test.alpha/instrumentable-syms"],["^ ","^26",0,"^27",358,"^L","cljs.spec.test.alpha/instrumentable-syms"],["^ ","^26",0,"^27",367,"^L","cljs.spec.test.alpha/instrumentable-syms"]]],"~i175",["^ ","~i6",[["^ ","^26",0,"^27",355],["^ ","^26",78,"^27",355]],"~i7",[["^ ","^26",7,"^27",355,"^L","cljs.spec.test.alpha.instrumentable_syms.cljs$core$IFn$_invoke$arity$1"]]],"~i176",["^ ","~i4",[["^ ","^26",84,"^27",358,"^L","opts"]]],"~i177",["^ ","~i3",[["^ ","^26",0,"^27",359],["^ ","^26",0,"^27",360],["^ ","^26",0,"^27",361],["^ ","^26",0,"^27",361],["^ ","^26",6,"^27",361],["^ ","^26",11,"^27",361,"^L","js/Error"],["^ ","^26",17,"^27",361],["^ ","^26",18,"^27",361],["^ ","^26",36,"^27",361],["^ ","^26",73,"^27",361],["^ ","^26",78,"^27",361]],"^2W",[["^ ","^26",3,"^27",359]],"^3=",[["^ ","^26",3,"^27",359,"^L","cljs.core/every?"]],"^2@",[["^ ","^26",26,"^27",359,"^L","cljs.core/ident?"]],"^2C",[["^ ","^26",49,"^27",359]],"^2<",[["^ ","^26",49,"^27",359,"^L","cljs.core/keys"]],"^2D",[["^ ","^26",64,"^27",359],["^ ","^26",64,"^27",359]],"^3D",[["^ ","^26",144,"^27",359,"^L","opts"]]],"~i178",["^ ","~i3",[["^ ","^26",0,"^27",364],["^ ","^26",69,"^27",364],["^ ","^26",103,"^27",364]],"~i4",[["^ ","^26",7,"^27",364,"^L","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^2W",[["^ ","^26",54,"^27",364,"^L","cljs.core/into"]],"^25",[["^ ","^26",186,"^27",364]],"^28",[["^ ","^26",186,"^27",364,"^L","cljs.core.filter.cljs$core$IFn$_invoke$arity$2"]],"^2G",[["^ ","^26",233,"^27",364,"^L","cljs.spec.test.alpha/fn-spec-name?"]],"^2L",[["^ ","^26",274,"^27",364]],"^2X",[["^ ","^26",274,"^27",364,"^L","cljs.core/keys"]],"^3X",[["^ ","^26",289,"^27",364]],"^2R",[["^ ","^26",289,"^27",364,"^L","cljs.spec.alpha/registry"]]],"~i179",["^ ","^25",[["^ ","^26",318,"^27",364]],"^28",[["^ ","^26",318,"^27",364,"^L","cljs.core/keys"]],"^2<",[["^ ","^26",333,"^27",364],["^ ","^26",333,"^27",364]],"^2E",[["^ ","^26",415,"^27",364,"^L","opts"]]],"~i180",["^ ","^25",[["^ ","^26",422,"^27",364],["^ ","^26",422,"^27",364]],"^2H",[["^ ","^26",505,"^27",364,"^L","opts"]]],"~i181",["^ ","^25",[["^ ","^26",511,"^27",364]],"^28",[["^ ","^26",511,"^27",364,"^L","cljs.core/keys"]],"^2<",[["^ ","^26",526,"^27",364],["^ ","^26",526,"^27",364]],"^3T",[["^ ","^26",615,"^27",364,"^L","opts"]]],"~i185",["^ ","~i0",[["^ ","^26",0,"^27",369],["^ ","^26",37,"^27",369],["^ ","^26",0,"^27",370]],"~i7",[["^ ","^26",0,"^27",369,"^L","cljs.spec.test.alpha/explain-check"]]],"~i186",["^ ","~i3",[["^ ","^26",82,"^27",369,"^L","args"]],"~i8",[["^ ","^26",87,"^27",369,"^L","spec"]],"^30",[["^ ","^26",92,"^27",369,"^L","v"]],"^2Y",[["^ ","^26",94,"^27",369,"^L","role"]]],"~i187",["^ ","~i2",[["^ ","^26",0,"^27",370],["^ ","^26",55,"^27",370]],"~i3",[["^ ","^26",7,"^27",370,"^L","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]]],"~i189",["^ ","~i4",[["^ ","^26",90,"^27",370],["^ ","^26",181,"^27",370],["^ ","^26",186,"^27",370]],"^2:",[["^ ","^26",108,"^27",370],["^ ","^26",174,"^27",370]],"^2Y",[["^ ","^26",108,"^27",370,"^L","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$3"]],"^2;",[["^ ","^26",167,"^27",370,"^L","spec"]],"^2G",[["^ ","^26",172,"^27",370,"^L","v"]]],"~i190",["^ ","~i6",[["^ ","^26",186,"^27",370],["^ ","^26",444,"^27",370],["^ ","^26",589,"^27",370],["^ ","^26",681,"^27",370],["^ ","^26",768,"^27",370]],"~i7",[["^ ","^26",186,"^27",370,"^L","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"^30",[["^ ","^26",239,"^27",370],["^ ","^26",279,"^27",370],["^ ","^26",375,"^27",370],["^ ","^26",408,"^27",370]],"^2:",[["^ ","^26",239,"^27",370,"^L","cljs.spec.alpha/explain-data*"]],"^2I",[["^ ","^26",274,"^27",370,"^L","spec"]],"^2N",[["^ ","^26",362,"^27",370,"^L","role"]],"^2Z",[["^ ","^26",441,"^27",370,"^L","v"]]],"~i191",["^ ","^2Y",[["^ ","^26",534,"^27",370,"^L","args"]]],"~i192",["^ ","^2:",[["^ ","^26",679,"^27",370,"^L","v"]]],"~i195",["^ ","~i0",[["^ ","^26",0,"^27",372],["^ ","^26",34,"^27",376],["^ ","^26",0,"^27",377]],"~i7",[["^ ","^26",0,"^27",376,"^L","cljs.spec.test.alpha/check-call"]]],"~i198",["^ ","~i3",[["^ ","^26",76,"^27",376,"^L","f"]],"~i5",[["^ ","^26",78,"^27",376,"^L","specs"]],"^2W",[["^ ","^26",84,"^27",376,"^L","args"]]],"~i199",["^ ","~i2",[["^ ","^26",0,"^27",377],["^ ","^26",0,"^27",378]],"~i8",[["^ ","^26",4,"^27",377,"^L","cargs"]],"^2:",[["^ ","^26",12,"^27",377],["^ ","^26",121,"^27",377],["^ ","^26",241,"^27",377]],"^2V",[["^ ","^26",30,"^27",377],["^ ","^26",30,"^27",377]],"^2<",[["^ ","^26",113,"^27",377,"^L","specs"]],"^2E",[["^ ","^26",121,"^27",377]],"^2B",[["^ ","^26",121,"^27",377,"^L","cljs.spec.alpha/conform"]],"^2K",[["^ ","^26",145,"^27",377],["^ ","^26",145,"^27",377]],"^2[",[["^ ","^26",228,"^27",377,"^L","specs"]],"^35",[["^ ","^26",235,"^27",377,"^L","args"]]],"~i200",["^ ","~i4",[["^ ","^26",0,"^27",378]],"~i8",[["^ ","^26",3,"^27",378],["^ ","^26",54,"^27",378]],"~i9",[["^ ","^26",3,"^27",378,"^L","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2W",[["^ ","^26",48,"^27",378,"^L","cargs"]]],"~i201",["^ ","~i6",[["^ ","^26",0,"^27",379],["^ ","^26",142,"^27",379]],"~i7",[["^ ","^26",7,"^27",379,"^L","cljs.spec.test.alpha/explain-check"]],"^25",[["^ ","^26",42,"^27",379,"^L","args"]],"^2C",[["^ ","^26",47,"^27",379],["^ ","^26",47,"^27",379]],"^2M",[["^ ","^26",130,"^27",379,"^L","specs"]],"^2J",[["^ ","^26",137,"^27",379,"^L","args"]]],"~i202",["^ ","~i6",[["^ ","^26",0,"^27",381],["^ ","^26",0,"^27",383]],"^3=",[["^ ","^26",4,"^27",381,"^L","ret"]],"^2=",[["^ ","^26",10,"^27",381]],"^3O",[["^ ","^26",10,"^27",381,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"^29",[["^ ","^26",56,"^27",381,"^L","f"]],"^2>",[["^ ","^26",58,"^27",381,"^L","args"]]],"~i203",["^ ","^3=",[["^ ","^26",4,"^27",382,"^L","cret"]],"^3O",[["^ ","^26",11,"^27",382],["^ ","^26",118,"^27",382],["^ ","^26",235,"^27",382]],"^29",[["^ ","^26",29,"^27",382],["^ ","^26",29,"^27",382]],"^2G",[["^ ","^26",110,"^27",382,"^L","specs"]],"^2N",[["^ ","^26",118,"^27",382]],"^3T",[["^ ","^26",118,"^27",382,"^L","cljs.spec.alpha/conform"]],"^2Q",[["^ ","^26",142,"^27",382],["^ ","^26",142,"^27",382]],"^31",[["^ ","^26",223,"^27",382,"^L","specs"]],"^36",[["^ ","^26",230,"^27",382,"^L","ret"]]],"~i204",["^ ","~i8",[["^ ","^26",0,"^27",383]],"^3=",[["^ ","^26",3,"^27",383],["^ ","^26",53,"^27",383]],"^30",[["^ ","^26",3,"^27",383,"^L","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2Y",[["^ ","^26",48,"^27",383,"^L","cret"]]],"~i205",["^ ","^3H",[["^ ","^26",0,"^27",384],["^ ","^26",139,"^27",384]],"^2W",[["^ ","^26",7,"^27",384,"^L","cljs.spec.test.alpha/explain-check"]],"^2>",[["^ ","^26",42,"^27",384,"^L","args"]],"^2I",[["^ ","^26",47,"^27",384],["^ ","^26",47,"^27",384]],"^2N",[["^ ","^26",128,"^27",384,"^L","specs"]],"^2L",[["^ ","^26",135,"^27",384,"^L","ret"]]],"~i206",["^ ","^3H",[["^ ","^26",0,"^27",386],["^ ","^26",0,"^27",404]],"^2:",[["^ ","^26",20,"^27",386],["^ ","^26",37,"^27",386,"^L","and__3938__auto__"],["^ ","^26",0,"^27",387],["^ ","^26",0,"^27",387],["^ ","^26",20,"^27",387,"^L","and__3938__auto__"],["^ ","^26",0,"^27",388],["^ ","^26",4,"^27",388,"^L","and__3938__auto__"],["^ ","^26",0,"^27",389],["^ ","^26",0,"^27",389],["^ ","^26",20,"^27",389,"^L","and__3938__auto__"],["^ ","^26",0,"^27",392,"^L","and__3938__auto__"],["^ ","^26",0,"^27",395,"^L","and__3938__auto__"]],"^2@",[["^ ","^26",57,"^27",386],["^ ","^26",57,"^27",386]],"^2C",[["^ ","^26",140,"^27",386,"^L","specs"]],"^2M",[["^ ","^26",28,"^27",388],["^ ","^26",28,"^27",388]],"^2F",[["^ ","^26",109,"^27",388,"^L","specs"]],"^3Q",[["^ ","^26",0,"^27",390],["^ ","^26",7,"^27",390]],"^2S",[["^ ","^26",87,"^27",390,"^L","specs"]]],"~i207",["^ ","^3=",[["^ ","^26",0,"^27",398],["^ ","^26",0,"^27",399]],"^2=",[["^ ","^26",20,"^27",398],["^ ","^26",166,"^27",398],["^ ","^26",209,"^27",398],["^ ","^26",268,"^27",398]],"^3O",[["^ ","^26",20,"^27",398,"^L","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2"]],"^2C",[["^ ","^26",79,"^27",398],["^ ","^26",79,"^27",398]],"^2A",[["^ ","^26",159,"^27",398,"^L","specs"]],"^2K",[["^ ","^26",262,"^27",398,"^L","cargs"]],"^2T",[["^ ","^26",319,"^27",398,"^L","cret"]]],"~i209",["^ ","^2:",[["^ ","^26",0,"^27",401],["^ ","^26",134,"^27",401],["^ ","^26",177,"^27",401],["^ ","^26",236,"^27",401],["^ ","^26",300,"^27",401]],"^2Y",[["^ ","^26",7,"^27",401,"^L","cljs.spec.test.alpha/explain-check"]],"^2G",[["^ ","^26",42,"^27",401,"^L","args"]],"^2E",[["^ ","^26",47,"^27",401],["^ ","^26",47,"^27",401]],"^2F",[["^ ","^26",127,"^27",401,"^L","specs"]],"^31",[["^ ","^26",230,"^27",401,"^L","cargs"]],"^38",[["^ ","^26",287,"^27",401,"^L","cret"]]],"~i212",["^ ","~i0",[["^ ","^26",0,"^27",409],["^ ","^26",35,"^27",409],["^ ","^26",86,"^27",409,"^L","p__27469"],["^ ","^26",0,"^27",410],["^ ","^26",0,"^27",410],["^ ","^26",4,"^27",410,"^L","map__27470"],["^ ","^26",17,"^27",410,"^L","p__27469"],["^ ","^26",4,"^27",411,"^L","map__27470"],["^ ","^26",21,"^27",411],["^ ","^26",23,"^27",411],["^ ","^26",25,"^27",411],["^ ","^26",27,"^27",411],["^ ","^26",28,"^27",411,"^L","map__27470"],["^ ","^26",42,"^27",411],["^ ","^26",50,"^27",411],["^ ","^26",52,"^27",411],["^ ","^26",54,"^27",411],["^ ","^26",55,"^27",411],["^ ","^26",55,"^27",411,"^L","map__27470"],["^ ","^26",104,"^27",411],["^ ","^26",115,"^27",411],["^ ","^26",116,"^27",411,"^L","cljs.core/PROTOCOL_SENTINEL"],["^ ","^26",148,"^27",411],["^ ","^26",148,"^27",411,"^L","map__27470"],["^ ","^26",179,"^27",411],["^ ","^26",184,"^27",411],["^ ","^26",191,"^27",411],["^ ","^26",199,"^27",411],["^ ","^26",199,"^27",411,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",245,"^27",411,"^L","cljs.core/hash-map"],["^ ","^26",264,"^27",411,"^L","map__27470"],["^ ","^26",276,"^27",411,"^L","map__27470"],["^ ","^26",10,"^27",412],["^ ","^26",10,"^27",412,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",54,"^27",412,"^L","map__27470"],["^ ","^26",69,"^27",412],["^ ","^26",11,"^27",413],["^ ","^26",11,"^27",413,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",55,"^27",413,"^L","map__27470"],["^ ","^26",70,"^27",413],["^ ","^26",0,"^27",414]],"~i7",[["^ ","^26",0,"^27",409,"^L","cljs.spec.test.alpha/quick-check"]]],"~i213",["^ ","~i3",[["^ ","^26",78,"^27",409,"^L","f"]],"~i5",[["^ ","^26",80,"^27",409,"^L","specs"]],"^3=",[["^ ","^26",4,"^27",412,"^L","gen"]],"^25",[["^ ","^26",4,"^27",413,"^L","opts"]]],"~i214",["^ ","~i2",[["^ ","^26",0,"^27",414],["^ ","^26",4,"^27",414,"^L","map__27472"],["^ ","^26",4,"^27",415,"^L","map__27472"],["^ ","^26",21,"^27",415],["^ ","^26",23,"^27",415],["^ ","^26",25,"^27",415],["^ ","^26",27,"^27",415],["^ ","^26",28,"^27",415,"^L","map__27472"],["^ ","^26",42,"^27",415],["^ ","^26",50,"^27",415],["^ ","^26",52,"^27",415],["^ ","^26",54,"^27",415],["^ ","^26",55,"^27",415],["^ ","^26",55,"^27",415,"^L","map__27472"],["^ ","^26",104,"^27",415],["^ ","^26",115,"^27",415],["^ ","^26",116,"^27",415,"^L","cljs.core/PROTOCOL_SENTINEL"],["^ ","^26",148,"^27",415],["^ ","^26",148,"^27",415,"^L","map__27472"],["^ ","^26",179,"^27",415],["^ ","^26",184,"^27",415],["^ ","^26",191,"^27",415],["^ ","^26",199,"^27",415],["^ ","^26",199,"^27",415,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^26",245,"^27",415,"^L","cljs.core/hash-map"],["^ ","^26",264,"^27",415,"^L","map__27472"],["^ ","^26",276,"^27",415,"^L","map__27472"],["^ ","^26",16,"^27",416],["^ ","^26",16,"^27",416,"^L","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^26",60,"^27",416,"^L","map__27472"],["^ ","^26",75,"^27",416],["^ ","^26",138,"^27",416],["^ ","^26",0,"^27",426]],"^2=",[["^ ","^26",4,"^27",416,"^L","num-tests"]],"^3X",[["^ ","^26",17,"^27",414,"^L","opts"]]],"~i215",["^ ","~i8",[["^ ","^26",4,"^27",417,"^L","g"]],"^3H",[["^ ","^26",8,"^27",417],["^ ","^26",25,"^27",417],["^ ","^26",16,"^27",418],["^ ","^26",19,"^27",418],["^ ","^26",20,"^27",418,"^L","e27474"],["^ ","^26",0,"^27",419],["^ ","^26",8,"^27",419,"^L","e27474"],["^ ","^26",0,"^27",420],["^ ","^26",0,"^27",422],["^ ","^26",0,"^27",422],["^ ","^26",6,"^27",422,"^L","e27474"]],"^2Y",[["^ ","^26",25,"^27",417]],"^2=",[["^ ","^26",32,"^27",417,"^L","cljs.spec.alpha.gen.cljs$core$IFn$_invoke$arity$2"]],"^28",[["^ ","^26",82,"^27",417],["^ ","^26",82,"^27",417]],"^2G",[["^ ","^26",165,"^27",417,"^L","specs"]],"^2N",[["^ ","^26",172,"^27",417,"^L","gen"]],"^2Z",[["^ ","^26",38,"^27",418,"^L","js/Error"]],"^34",[["^ ","^26",4,"^27",419,"^L","t"]],"^35",[["^ ","^26",0,"^27",420,"^L","t"]]],"~i216",["^ ","~i4",[["^ ","^26",0,"^27",426],["^ ","^26",0,"^27",427],["^ ","^26",50,"^27",427]],"~i8",[["^ ","^26",3,"^27",426]],"^2@",[["^ ","^26",17,"^27",426,"^L","js/Error"]],"^2H",[["^ ","^26",4,"^27",426,"^L","g"]]],"~i217",["^ ","^2Y",[["^ ","^26",107,"^27",427,"^L","g"]]],"~i218",["^ ","~i6",[["^ ","^26",0,"^27",429],["^ ","^26",0,"^27",434]],"^3=",[["^ ","^26",4,"^27",429,"^L","prop"]],"^3O",[["^ ","^26",11,"^27",429],["^ ","^26",132,"^27",429],["^ ","^26",225,"^27",429],["^ ","^26",18,"^27",430,"^L","p1__27468#"],["^ ","^26",0,"^27",431]],"^2?",[["^ ","^26",11,"^27",429,"^L","cljs.spec.gen.alpha.for_all_STAR_.cljs$core$IFn$_invoke$arity$variadic"]],"^2D",[["^ ","^26",215,"^27",429,"^L","g"]],"^2N",[["^ ","^26",0,"^27",431],["^ ","^26",47,"^27",431,"^L","p1__27468#"]],"^3T",[["^ ","^26",7,"^27",431,"^L","cljs.spec.test.alpha/check-call"]],"^2Z",[["^ ","^26",39,"^27",431,"^L","f"]],"^2R",[["^ ","^26",41,"^27",431,"^L","specs"]]],"~i219",["^ ","~i8",[["^ ","^26",0,"^27",434]],"~i9",[["^ ","^26",7,"^27",434,"^L","cljs.core.apply.cljs$core$IFn$_invoke$arity$4"]],"^2Y",[["^ ","^26",53,"^27",434,"^L","cljs.spec.gen.alpha/quick-check"]],"^2A",[["^ ","^26",85,"^27",434,"^L","num-tests"]],"^2O",[["^ ","^26",95,"^27",434,"^L","prop"]],"^3Q",[["^ ","^26",100,"^27",434]],"^2Q",[["^ ","^26",100,"^27",434,"^L","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic"]],"^32",[["^ ","^26",154,"^27",434,"^L","cljs.core/identity"]],"^3[",[["^ ","^26",223,"^27",434,"^L","opts"]]],"~i221",["^ ","~i0",[["^ ","^26",0,"^27",437],["^ ","^26",41,"^27",440],["^ ","^26",0,"^27",441]],"~i7",[["^ ","^26",0,"^27",440,"^L","cljs.spec.test.alpha/make-check-result"]]],"~i223",["^ ","~i3",[["^ ","^26",90,"^27",440,"^L","check-sym"]],"^30",[["^ ","^26",100,"^27",440,"^L","spec"]],"^2?",[["^ ","^26",105,"^27",440,"^L","test-check-ret"]]],"~i224",["^ ","~i2",[["^ ","^26",0,"^27",441],["^ ","^26",110,"^27",441],["^ ","^26",153,"^27",441],["^ ","^26",210,"^27",441]],"~i3",[["^ ","^26",7,"^27",441,"^L","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^2=",[["^ ","^26",205,"^27",441,"^L","spec"]]],"~i225",["^ ","^2V",[["^ ","^26",296,"^27",441,"^L","test-check-ret"]]],"~i226",["^ ","~i4",[["^ ","^26",319,"^27",441],["^ ","^26",348,"^27",441],["^ ","^26",348,"^27",441],["^ ","^26",391,"^27",441],["^ ","^26",461,"^27",441]],"^3H",[["^ ","^26",337,"^27",441,"^L","check-sym"]]],"~i227",["^ ","^3=",[["^ ","^26",443,"^27",441,"^L","check-sym"]]],"~i228",["^ ","~i4",[["^ ","^26",467,"^27",441],["^ ","^26",484,"^27",441,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",442],["^ ","^26",0,"^27",442],["^ ","^26",20,"^27",442,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",443],["^ ","^26",0,"^27",443],["^ ","^26",13,"^27",443,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",444],["^ ","^26",0,"^27",450]],"^2Y",[["^ ","^26",4,"^27",443,"^L","result"]],"^28",[["^ ","^26",505,"^27",441],["^ ","^26",505,"^27",441]],"^2C",[["^ ","^26",592,"^27",441,"^L","test-check-ret"]]],"~i229",["^ ","~i6",[["^ ","^26",0,"^27",444],["^ ","^26",0,"^27",445],["^ ","^26",0,"^27",447],["^ ","^26",0,"^27",447],["^ ","^26",50,"^27",447]],"^2=",[["^ ","^26",3,"^27",444]],"^29",[["^ ","^26",3,"^27",444,"^L","result"]],"^2O",[["^ ","^26",108,"^27",447,"^L","result"]]],"~i230",["^ ","~i4",[["^ ","^26",5,"^27",452],["^ ","^26",22,"^27",452,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",453],["^ ","^26",0,"^27",453],["^ ","^26",20,"^27",453,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",454],["^ ","^26",0,"^27",454],["^ ","^26",13,"^27",454,"^L","temp__5457__auto__"],["^ ","^26",0,"^27",455],["^ ","^26",0,"^27",455],["^ ","^26",50,"^27",455],["^ ","^26",0,"^27",457]],"^2Y",[["^ ","^26",4,"^27",454,"^L","shrunk"]],"^28",[["^ ","^26",43,"^27",452],["^ ","^26",43,"^27",452]],"^2C",[["^ ","^26",131,"^27",452,"^L","test-check-ret"]]],"~i231",["^ ","^2=",[["^ ","^26",108,"^27",455],["^ ","^26",108,"^27",455]],"^2>",[["^ ","^26",195,"^27",455,"^L","shrunk"]]],"~i233",["^ ","~i0",[["^ ","^26",0,"^27",461],["^ ","^26",43,"^27",461],["^ ","^26",0,"^27",462]],"~i7",[["^ ","^26",0,"^27",461,"^L","cljs.spec.test.alpha/validate-check-opts"]]],"~i234",["^ ","~i3",[["^ ","^26",94,"^27",461,"^L","opts"]]],"~i235",["^ ","~i2",[["^ ","^26",0,"^27",462],["^ ","^26",0,"^27",463],["^ ","^26",0,"^27",465],["^ ","^26",0,"^27",465],["^ ","^26",6,"^27",465],["^ ","^26",11,"^27",465,"^L","js/Error"],["^ ","^26",17,"^27",465],["^ ","^26",18,"^27",465],["^ ","^26",36,"^27",465],["^ ","^26",68,"^27",465],["^ ","^26",73,"^27",465]],"^3H",[["^ ","^26",3,"^27",462]],"^2W",[["^ ","^26",3,"^27",462,"^L","cljs.core/every?"]],"^2?",[["^ ","^26",26,"^27",462,"^L","cljs.core/ident?"]],"^2>",[["^ ","^26",49,"^27",462]],"^2C",[["^ ","^26",49,"^27",462,"^L","cljs.core/keys"]],"^2A",[["^ ","^26",64,"^27",462],["^ ","^26",64,"^27",462]],"^3T",[["^ ","^26",144,"^27",462,"^L","opts"]]],"~i239",["^ ","~i0",[["^ ","^26",0,"^27",468],["^ ","^26",36,"^27",468],["^ ","^26",0,"^27",469]],"~i7",[["^ ","^26",0,"^27",468,"^L","cljs.spec.test.alpha/failure-type"]]],"~i240",["^ ","~i3",[["^ ","^26",80,"^27",468,"^L","x"]]],"~i241",["^ ","~i2",[["^ ","^26",0,"^27",469],["^ ","^26",7,"^27",469]],"^2Y",[["^ ","^26",124,"^27",469]],"^2=",[["^ ","^26",124,"^27",469,"^L","cljs.core/ex-data"]],"^2;",[["^ ","^26",142,"^27",469,"^L","x"]]],"~i243",["^ ","~i0",[["^ ","^26",0,"^27",471],["^ ","^26",38,"^27",471],["^ ","^26",0,"^27",472]],"~i7",[["^ ","^26",0,"^27",471,"^L","cljs.spec.test.alpha/unwrap-failure"]]],"~i244",["^ ","~i3",[["^ ","^26",84,"^27",471,"^L","x"]]],"~i245",["^ ","~i2",[["^ ","^26",0,"^27",472]],"~i6",[["^ ","^26",20,"^27",472]],"~i7",[["^ ","^26",20,"^27",472,"^L","cljs.spec.test.alpha/failure-type"]],"^2V",[["^ ","^26",54,"^27",472,"^L","x"]]],"~i246",["^ ","~i4",[["^ ","^26",0,"^27",473]],"~i5",[["^ ","^26",7,"^27",473,"^L","cljs.core/ex-data"]],"^30",[["^ ","^26",25,"^27",473,"^L","x"]]],"~i247",["^ ","~i4",[["^ ","^26",0,"^27",475,"^L","x"]]],"~i249",["^ ","~i0",[["^ ","^26",0,"^27",478],["^ ","^26",35,"^27",485],["^ ","^26",0,"^27",486]],"~i7",[["^ ","^26",0,"^27",485,"^L","cljs.spec.test.alpha/result-type"]]],"~i255",["^ ","~i3",[["^ ","^26",78,"^27",485,"^L","ret"]]],"~i256",["^ ","~i2",[["^ ","^26",0,"^27",486],["^ ","^26",0,"^27",487]],"~i8",[["^ ","^26",4,"^27",486,"^L","failure"]],"^2=",[["^ ","^26",14,"^27",486],["^ ","^26",14,"^27",486]],"^2C",[["^ ","^26",102,"^27",486,"^L","ret"]]],"~i257",["^ ","~i4",[["^ ","^26",0,"^27",487],["^ ","^26",0,"^27",488],["^ ","^26",0,"^27",490],["^ ","^26",0,"^27",493],["^ ","^26",0,"^27",493]]],"~i258",["^ ","~i6",[["^ ","^26",3,"^27",487],["^ ","^26",15,"^27",487]],"^3=",[["^ ","^26",4,"^27",487,"^L","failure"]]],"~i259",["^ ","~i6",[["^ ","^26",20,"^27",490]],"~i7",[["^ ","^26",20,"^27",490,"^L","cljs.spec.test.alpha/failure-type"]],"^2V",[["^ ","^26",54,"^27",490,"^L","failure"]],"^2G",[["^ ","^26",0,"^27",491]],"^2I",[["^ ","^26",7,"^27",491,"^L","cljs.spec.test.alpha/failure-type"]],"^2L",[["^ ","^26",41,"^27",491,"^L","failure"]]],"~i262",["^ ","~i0",[["^ ","^26",0,"^27",498],["^ ","^26",37,"^27",502],["^ ","^26",0,"^27",503]],"~i6",[["^ ","^26",0,"^27",502,"^L","cljs.spec.test.alpha/abbrev-result"]]],"~i265",["^ ","~i3",[["^ ","^26",82,"^27",502,"^L","x"]]],"~i266",["^ ","~i2",[["^ ","^26",0,"^27",503]],"~i6",[["^ ","^26",20,"^27",503],["^ ","^26",20,"^27",503]],"^2=",[["^ ","^26",108,"^27",503,"^L","x"]]],"~i267",["^ ","~i8",[["^ ","^26",101,"^27",504],["^ ","^26",150,"^27",504]],"~i9",[["^ ","^26",101,"^27",504,"^L","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"]],"^2=",[["^ ","^26",148,"^27",504,"^L","x"]]],"~i268",["^ ","~i6",[["^ ","^26",54,"^27",504],["^ ","^26",237,"^27",504]],"~i7",[["^ ","^26",54,"^27",504,"^L","cljs.core.update.cljs$core$IFn$_invoke$arity$3"]],"^2V",[["^ ","^26",289,"^27",504,"^L","cljs.spec.alpha/describe"]]],"~i269",["^ ","~i6",[["^ ","^26",0,"^27",504],["^ ","^26",315,"^27",504]],"~i7",[["^ ","^26",7,"^27",504,"^L","cljs.core.update.cljs$core$IFn$_invoke$arity$3"]],"^29",[["^ ","^26",373,"^27",504,"^L","cljs.spec.test.alpha/unwrap-failure"]]],"~i270",["^ ","~i4",[["^ ","^26",0,"^27",506],["^ ","^26",63,"^27",506],["^ ","^26",165,"^27",506]],"~i5",[["^ ","^26",7,"^27",506,"^L","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic"]],"^3=",[["^ ","^26",61,"^27",506,"^L","x"]]],"~i272",["^ ","~i0",[["^ ","^26",0,"^27",509],["^ ","^26",0,"^27",509],["^ ","^26",41,"^27",516],["^ ","^26",90,"^27",516,"^L","var_args"],["^ ","^26",0,"^27",517],["^ ","^26",0,"^27",517],["^ ","^26",4,"^27",517,"^L","G__27480"],["^ ","^26",15,"^27",517],["^ ","^26",15,"^27",517],["^ ","^26",0,"^27",518],["^ ","^26",0,"^27",518],["^ ","^26",8,"^27",518,"^L","G__27480"],["^ ","^26",5,"^27",519],["^ ","^26",0,"^27",520],["^ ","^26",7,"^27",520,"^L","cljs.spec.test.alpha/summarize-results"],["^ ","^26",76,"^27",520],["^ ","^26",77,"^27",520],["^ ","^26",87,"^27",520],["^ ","^26",5,"^27",523],["^ ","^26",0,"^27",524],["^ ","^26",7,"^27",524,"^L","cljs.spec.test.alpha/summarize-results"],["^ ","^26",76,"^27",524],["^ ","^26",77,"^27",524],["^ ","^26",87,"^27",524],["^ ","^26",93,"^27",524],["^ ","^26",94,"^27",524],["^ ","^26",104,"^27",524],["^ ","^26",0,"^27",528],["^ ","^26",6,"^27",528],["^ ","^26",11,"^27",528,"^L","js/Error"],["^ ","^26",17,"^27",528],["^ ","^26",18,"^27",528],["^ ","^26",80,"^27",528],["^ ","^26",80,"^27",528],["^ ","^26",0,"^27",533],["^ ","^26",0,"^27",533],["^ ","^26",71,"^27",533],["^ ","^26",0,"^27",534],["^ ","^26",0,"^27",537],["^ ","^26",0,"^27",537],["^ ","^26",71,"^27",537],["^ ","^26",0,"^27",538],["^ ","^26",0,"^27",545],["^ ","^26",0,"^27",545],["^ ","^26",65,"^27",545],["^ ","^26",0,"^27",547]],"~i6",[["^ ","^26",0,"^27",516,"^L","cljs.spec.test.alpha/summarize-results"],["^ ","^26",0,"^27",533,"^L","cljs.spec.test.alpha/summarize-results"],["^ ","^26",0,"^27",537,"^L","cljs.spec.test.alpha/summarize-results"],["^ ","^26",0,"^27",545,"^L","cljs.spec.test.alpha/summarize-results"]]],"~i278",["^ ","~i4",[["^ ","^26",82,"^27",533,"^L","check-results"]],"^2@",[["^ ","^26",0,"^27",534]],"^2V",[["^ ","^26",7,"^27",534,"^L","cljs.spec.test.alpha.summarize_results.cljs$core$IFn$_invoke$arity$2"]],"^3D",[["^ ","^26",76,"^27",534,"^L","check-results"]],"^2[",[["^ ","^26",90,"^27",534,"^L","cljs.spec.test.alpha/abbrev-result"]]],"~i279",["^ ","~i4",[["^ ","^26",82,"^27",537,"^L","check-results"]],"^2?",[["^ ","^26",96,"^27",537,"^L","summary-result"]]],"~i280",["^ ","~i3",[["^ ","^26",0,"^27",538],["^ ","^26",3,"^27",542],["^ ","^26",46,"^27",542],["^ ","^26",101,"^27",542]],"~i4",[["^ ","^26",7,"^27",538,"^L","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i281",["^ ","~i5",[["^ ","^26",54,"^27",538],["^ ","^26",0,"^27",539]],"^3H",[["^ ","^26",65,"^27",538,"^L","summary"]],"^2?",[["^ ","^26",73,"^27",538,"^L","result"]]],"~i282",["^ ","~i7",[["^ ","^26",0,"^27",539]],"~i8",[["^ ","^26",0,"^27",539,"^L","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1"]],"^2?",[["^ ","^26",49,"^27",539]],"^2@",[["^ ","^26",50,"^27",539,"^L","summary-result"],["^ ","^26",97,"^27",539,"^L","summary-result"],["^ ","^26",152,"^27",539,"^L","summary-result"]],"^2E",[["^ ","^26",142,"^27",539,"^L","result"],["^ ","^26",177,"^27",539,"^L","result"]]],"~i283",["^ ","^2W",[["^ ","^26",101,"^27",541,"^L","summary"]]],"~i284",["^ ","~i9",[["^ ","^26",54,"^27",541],["^ ","^26",109,"^27",541]],"^3H",[["^ ","^26",54,"^27",541,"^L","cljs.core.update.cljs$core$IFn$_invoke$arity$3"]],"^2;",[["^ ","^26",164,"^27",541,"^L","cljs.core/inc"]]],"~i285",["^ ","~i9",[["^ ","^26",0,"^27",541]],"^3H",[["^ ","^26",7,"^27",541,"^L","cljs.core.update.cljs$core$IFn$_invoke$arity$3"]],"^3O",[["^ ","^26",179,"^27",541]],"^2?",[["^ ","^26",179,"^27",541,"^L","cljs.spec.test.alpha/result-type"]],"^2I",[["^ ","^26",212,"^27",541,"^L","result"]],"^3D",[["^ ","^26",220,"^27",541],["^ ","^26",279,"^27",541]],"^2F",[["^ ","^26",220,"^27",541,"^L","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2"]],"^2X",[["^ ","^26",265,"^27",541,"^L","cljs.core/inc"]]],"~i287",["^ ","~i5",[["^ ","^26",113,"^27",542,"^L","check-results"]]],"~i289",["^ ","~i0",[["^ ","^26",0,"^27",547]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["^1Y","goog/labs/useragent/platform.js"],[1530991559994,"^1C","~$goog.labs.userAgent.util","~$goog.string"],["^O","^1>"],[1534380137000],["^1Y","cljs/spec/gen/alpha.cljs"],[1534380137690,"^1C","^1>","~$goog.Uri"],["^1Y","goog/math/math.js"],[1530991559994,"^1C","~$goog.array","~$goog.asserts"],["^1Y","goog/labs/useragent/browser.js"],[1530991559994,"^1C","^7B","^7?","^1@","^7@"],["^O","^B"],[1534380137000],["^1Y","goog/array/array.js"],[1530991559994,"^1C","^7C"],["^1Y","goog/useragent/useragent.js"],[1530991559994,"^1C","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^7?","~$goog.reflect","^7@"],["^1Y","clojure/test/check/properties.cljc"],[1535586405418,"^1C","^1>","~$clojure.test.check.generators","~$clojure.test.check.results"],["^1Y","clojure/test/check/generators.cljc"],[1535586405418,"^1C","^1>","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^7@","^1J"],["^1Y","goog/debug/error.js"],[1530991559994,"^1C"],["^1Y","clojure/test/check/random/doubles.cljs"],[1535586405418,"^1C","^1>","~$clojure.test.check.random.longs"],["^1Y","goog/dom/nodetype.js"],[1530991559994,"^1C"],["^1Y","cljs/pprint.cljs"],[1534380137690,"^1C","^1>","^1J","^7@","~$goog.string.StringBuffer"],["^O","^1E"],[1534380137000],["^1Y","clojure/test/check/rose_tree.cljc"],[1535586405418,"^1C","^1>"],["^1Y","clojure/test/check/impl.cljc"],[1535586405418,"^1C","^1>"],["^1Y","clojure/test/check/random.cljs"],[1535586405418,"^1C","^1>","~$clojure.test.check.random.doubles","^7L"],["^1Y","cljs/spec/test/alpha.cljs"],[1534380137690,"^1C","^1>","^1@","^1<","^1J","^1=","^1G","^1H","^1E","^1B","^1K"],["^1Y","goog/object/object.js"],[1530991559994,"^1C"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^1Y","cljs/stacktrace.cljc"],[1534380137690,"^1C","^1>","^7@","^1J"],["^1Y","goog/math/long.js"],[1530991559994,"^1C","^7C","^7G"],["^1Y","clojure/test/check.cljc"],[1535586405418,"^1C","^1>","^7H","^7J","^7I","^7K","~$clojure.test.check.impl"],["^1Y","goog/functions/functions.js"],[1530991559994,"^1C"],["^1Y","clojure/walk.cljs"],[1534380137690,"^1C","^1>"],["^1Y","goog/useragent/product.js"],[1530991559994,"^1C","^7D","^7F","~$goog.userAgent"],["^1Y","goog/structs/map.js"],[1530991559994,"^1C","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1@"],["^1Y","goog/labs/useragent/engine.js"],[1530991559994,"^1C","^7B","^7?","^7@"],["^O","^1H"],[1534380137000],["^1Y","goog/asserts/asserts.js"],[1530991559994,"^1C","~$goog.debug.Error","~$goog.dom.NodeType","^7@"],["^O","^1G"],[1534380137000],["^1Y","goog/uri/uri.js"],[1530991559994,"^1C","^7B","^7C","^7@","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1Y","cljs/spec/alpha.cljs"],[1534380137690,"^1C","^1>","^1@","~$clojure.walk","^1E","^1J"],["^1Y","goog/base.js"],[1530991559994],["^1Y","goog/structs/structs.js"],[1530991559994,"^1C","^7B","^1@"],["^1Y","clojure/string.cljs"],[1534380137690,"^1C","^1>","^7@","^7M"],["^1Y","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^1C","^1>"],["^1Y","goog/string/string.js"],[1530991559994,"^1C"],["^1Y","goog/reflect/reflect.js"],[1530991559994,"^1C"],["^1Y","goog/labs/useragent/util.js"],[1530991559994,"^1C","^7@"],["^1Y","goog/string/stringbuffer.js"],[1530991559994,"^1C"],["^1Y","goog/iter/iter.js"],[1530991559994,"^1C","^7B","^7C","~$goog.functions","~$goog.math"],["^1Y","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^7@","^1@","^7B","^7A","^7M"],["^1Y","clojure/test/check/random/longs.cljs"],[1535586405418,"^1C","^1>","~$clojure.test.check.random.longs.bit-count-impl","^82"],["^1Y","goog/math/integer.js"],[1530991559994,"^1C"],["^1Y","goog/uri/utils.js"],[1530991559994,"^1C","^7B","^7C","^7@"],["^1Y","clojure/test/check/results.cljc"],[1535586405418,"^1C","^1>"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",9,"^8",5,"^9",9,"^:",25],"^;",["^ ","^<","^=","^>","^?"],"^@",["^ ","^A","^B"],"^C",["^D",[]],"^E",["^ ","^F",["^ ","^G",["^H",[["~$f","^I"],["~$f","^I","^J"]]],"^K","Runs generative tests for fn f using spec and opts. See\n'check' for options and return.","^7",177,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^M","^N","^B","^O",true],"^P",["^ ","^G",["^H",[[],["^Q"],["^R","^J"]]],"^K","Instruments the vars named by sym-or-syms, a symbol or collection\nof symbols, or all instrumentable vars if sym-or-syms is not\nspecified. If a symbol identifies a namespace then all symbols in that\nnamespace will be enumerated.\n\nIf a var has an :args fn-spec, sets the var's root binding to a\nfn that checks arg conformance (throwing an exception on failure)\nbefore delegating to the original fn.\n\nThe opts map can be used to override registered specs, and/or to\nreplace fn implementations entirely. Opts for symbols not included\nin sym-or-syms are ignored. This facilitates sharing a common\noptions map across many different calls to instrument.\n\nThe opts map may have the following keys:\n\n  :spec     a map from var-name symbols to override specs\n  :stub     a set of var-name symbols to be replaced by stubs\n  :gen      a map from spec names to generator overrides\n  :replace  a map from var-name symbols to replacement fns\n\n:spec overrides registered fn-specs with specs your provide. Use\n:spec overrides to provide specs for libraries that do not have\nthem, or to constrain your own use of a fn to a subset of its\nspec'ed contract.\n\n:stub replaces a fn with a stub that checks :args, then uses the\n:ret spec to generate a return value.\n\n:gen overrides are used only for :stub generation.\n\n:replace replaces a fn with a fn that checks args conformance, then\ninvokes the fn you provide, enabling arbitrary stubbing and mocking.\n\n:spec can be used in combination with :stub or :replace.\n\nReturns a collection of syms naming the vars instrumented.","^7",69,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^S","^N","^B","^O",true],"^T",["^ ","^G",["^H",[[["^U","~$s"]]]],"^7",45,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^V","^N","^B","^O",true],"^W",["^ ","^G",["^H",[[],["^R"]]],"^K","Undoes instrument on the vars named by sym-or-syms, specified\nas in instrument. With no args, unstruments all instrumented vars.\nReturns a collection of syms naming the vars unstrumented.","^7",129,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^X","^N","^B","^O",true],"^Y",["^ ","^G",["^H",[[],["^R"],["^R","^J"]]],"^K","Run generative tests for spec conformance on vars named by\nsym-or-syms, a symbol or collection of symbols. If sym-or-syms\nis not specified, check all checkable vars. If a symbol identifies a\nnamespace then all symbols in that namespace will be enumerated.\n\nThe opts map includes the following optional keys, where stc\naliases clojure.test.check:\n\n::stc/opts  opts to flow through test.check/quick-check\n:gen        map from spec names to generator overrides\n\nThe ::stc/opts include :num-tests in addition to the keys\ndocumented by test.check. Generator overrides are passed to\nspec/gen when generating function args.\n\nReturns a lazy sequence of check result maps with the following\nkeys\n\n:spec       the spec tested\n:sym        optional symbol naming the var tested\n:failure    optional test failure\n::stc/ret   optional value returned by test.check/quick-check\n\nThe value for :failure can be any exception. Exceptions thrown by\nspec itself will have an ::s/failure value in ex-data:\n\n:check-failed   at least one checked return did not conform\n:no-args-spec   no :args spec provided\n:no-fn          no fn provided\n:no-fspec       no fspec provided\n:no-gen         unable to generate :args\n:instrument     invalid args detected by instrument\n","^7",207,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^Z","^N","^B","^O",true],"^A",["^ ","^G",["^H",[["~$&","^["]]],"^K","Disables instrument's checking of calls, within a scope.","^7",29,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^10","^N","^B","^O",true],"^11",["^ ","^G",["^H",[[],["^J"]]],"^K","Given an opts map as per check, returns the set of syms that\ncan be checked.","^7",195,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^12","^N","^B","^O",true],"^13",["^ ","^G",["^H",[[["^U","~$s"],"^J"]]],"^7",35,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^14","^N","^B","^O",true],"^15",["^ ","^G",["^H",[[["^U","~$s","^16","^17"],"~$f","^I","^J"]]],"^7",152,"^8",1,"^6","cljs/spec/test/alpha.cljc","^L","^18","^N","^B","^O",true]],"^L","^B","^1:",null,"^1;",["^ ","^1<","^1<","^1=","^1=","^1>","^1>","^1?","^1@","^1A","^1B","^1C","^1C","^1@","^1@","^1D","^1E","^1F","^1G","^1B","^1B","^1G","^1G","~$s","^1H","^1I","^1J","^1K","^1K","^1L","^1<","^1J","^1J","^1M","^1=","^1H","^1H","^1E","^1E"],"^1N",["^D",["^1O","^1P"]],"~:shadow/js-access-global",["^D",["window","Error"]],"^1Q",null,"~:defs",["^ ","~$failure-type",["^ ","~:protocol-inline",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",240,"^8",8,"^9",240,"^:",20,"~:private",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/failure-type","~:variadic",false,"^6","cljs/spec/test/alpha.cljs","^:",20,"~:method-params",["^H",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^8",1,"^7",240,"^9",240,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"~$get-env",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",60,"^8",7,"^9",60,"^:",14,"^G",["^H",["^U",["^H",[[]]]]]],"^L","~$cljs.spec.test.alpha/get-env","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",14,"^8=",["^H",[[]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",60,"^9",60,"^8@",0,"^8A",true,"^G",["^H",["^U",["^H",[[]]]]]],"~$instrument-choose-fn",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",129,"^8",8,"^9",129,"^:",28,"^8:",true,"^G",["^H",["^U",["^H",[["~$f","^I","~$sym",["^ ","~$over","~:gen","~:keys",["~$stub","~$replace"]]]]]]],"^K","Helper for instrument."],"^8:",true,"^L","~$cljs.spec.test.alpha/instrument-choose-fn","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",28,"^8=",["^H",[["~$f","^I","^8E","~$p__27426"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",129,"^9",129,"^8@",4,"^8A",true,"^G",["^H",["^U",["^H",[["~$f","^I","^8E",["^ ","^8F","^8G","^8H",["^8I","^8J"]]]]]]],"^K","Helper for instrument."],"~$explain-data*",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",69,"^8",8,"^9",69,"^:",21,"^8:",true,"^G",["^H",["^U",["^H",[["^I","~$v"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/explain-data*","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[["^I","~$v"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",69,"^9",69,"^8@",2,"^8A",true,"^G",["^H",["^U",["^H",[["^I","~$v"]]]]]],"~$explain-check",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",186,"^8",8,"^9",186,"^:",21,"^8:",true,"^G",["^H",["^U",["^H",[["~$args","^I","~$v","~$role"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/explain-check","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[["^8P","^I","~$v","^8Q"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",186,"^9",186,"^8@",4,"^8A",true,"^G",["^H",["^U",["^H",[["^8P","^I","~$v","^8Q"]]]]]],"~$distinct-by",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",22,"^8",7,"^9",22,"^:",18,"^G",["^H",["^U",["^H",[["~$f","~$coll"]]]]]],"^L","~$cljs.spec.test.alpha/distinct-by","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",18,"^8=",["^H",[["~$f","^8T"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",22,"^9",22,"^8@",2,"^8A",true,"^G",["^H",["^U",["^H",[["~$f","^8T"]]]]]],"~$*instrument-enabled*",["^ ","^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",41,"^8",26,"^9",41,"^:",46,"~:dynamic",true,"^8:",true],"^8:",true,"^L","~$cljs.spec.test.alpha/*instrument-enabled*","^6","cljs/spec/test/alpha.cljs","^:",46,"^8",1,"^8W",true,"^7",41,"^9",41,"~:tag","~$boolean","^K","if false, instrumented fns call straight through"],"~$collectionize",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",167,"^8",8,"^9",167,"^:",21,"^8:",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/collectionize","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[["~$x"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",167,"^9",167,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"~$instrumented-vars",["^ ","^L","~$cljs.spec.test.alpha/instrumented-vars","^6","cljs/spec/test/alpha.cljs","^7",127,"^8",1,"^9",127,"^:",37,"^8:",true,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",127,"^8",20,"^9",127,"^:",37,"^8:",true],"^8Y","~$any"],"~$summarize-results",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",273,"^8",7,"^9",273,"^:",24,"^G",["^H",["^U",["^H",[["~$check-results"],["^95","~$summary-result"]]]]],"^K","Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result.","~:top-fn",["^ ","^8<",false,"^8@",2,"^8=",["^H",[["^95"],["^95","^96"]]],"^G",["^H",[["^95"],["^95","^96"]]],"^8?",["^H",[null,null]]]],"^L","~$cljs.spec.test.alpha/summarize-results","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",24,"^97",["^ ","^8<",false,"^8@",2,"^8=",["^H",[["^95"],["^95","^96"]]],"^G",["^H",[["^95"],["^95","^96"]]],"^8?",["^H",[null,null]]],"^8=",["^H",[["^95"],["^95","^96"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",273,"^9",273,"^8@",2,"^8A",true,"^G",["^H",[["^95"],["^95","^96"]]],"^K","Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result."],"~$instrumentable-syms",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",173,"^8",7,"^9",173,"^:",26,"^G",["^H",["^U",["^H",[[],["^J"]]]]],"^K","Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.","^97",["^ ","^8<",false,"^8@",1,"^8=",["^H",[[],["^J"]]],"^G",["^H",[[],["^J"]]],"^8?",["^H",[null,null]]]],"^L","~$cljs.spec.test.alpha/instrumentable-syms","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",26,"^97",["^ ","^8<",false,"^8@",1,"^8=",["^H",[[],["^J"]]],"^G",["^H",[[],["^J"]]],"^8?",["^H",[null,null]]],"^8=",["^H",[[],["^J"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",173,"^9",173,"^8@",1,"^8A",true,"^G",["^H",[[],["^J"]]],"^K","Given an opts map as per instrument, returns the set of syms\nthat can be instrumented."],"~$get-host-port",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",45,"^8",7,"^9",45,"^:",20,"^G",["^H",["^U",["^H",[[]]]]]],"^L","~$cljs.spec.test.alpha/get-host-port","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",20,"^8=",["^H",[[]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",45,"^9",45,"^8@",0,"^8A",true,"^G",["^H",["^U",["^H",[[]]]]]],"~$spec-checking-fn",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",87,"^8",8,"^9",87,"^:",24,"^8:",true,"^G",["^H",["^U",["^H",[["~$v","~$f","~$fn-spec"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/spec-checking-fn","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",24,"^8=",["^H",[["~$v","~$f","^9>"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",87,"^9",87,"^8@",3,"^8A",true,"^G",["^H",["^U",["^H",[["~$v","~$f","^9>"]]]]]],"~$get-ua-product",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",51,"^8",7,"^9",51,"^:",21,"^G",["^H",["^U",["^H",[[]]]]]],"^L","~$cljs.spec.test.alpha/get-ua-product","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[[]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",51,"^9",51,"^8@",0,"^8A",true,"^G",["^H",["^U",["^H",[[]]]]]],"~$unwrap-failure",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",244,"^8",8,"^9",244,"^:",22,"^8:",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/unwrap-failure","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",22,"^8=",["^H",[["~$x"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",244,"^9",244,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"~$fn-spec-name?",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",163,"^8",8,"^9",163,"^:",21,"^8:",true,"^G",["^H",["^U",["^H",[["~$s"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/fn-spec-name?","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[["~$s"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",163,"^9",163,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["~$s"]]]]]],"~$->sym",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",35,"^8",7,"^9",35,"^:",12,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"^L","~$cljs.spec.test.alpha/->sym","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",12,"^8=",["^H",[["~$x"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",35,"^9",35,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["~$x"]]]]]],"~$instrument-1*",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",141,"^8",8,"^9",141,"^:",21,"^8:",true,"^G",["^H",["^U",["^H",[["~$s","~$v","^J"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/instrument-1*","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[["~$s","~$v","^J"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",141,"^9",141,"^8@",3,"^8A",true,"^G",["^H",["^U",["^H",[["~$s","~$v","^J"]]]]]],"~$quick-check",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",213,"^8",8,"^9",213,"^:",19,"^8:",true,"^G",["^H",["^U",["^H",[["~$f","~$specs",["^ ","^1D","^8G","^J","~:clojure.test.check/opts"]]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/quick-check","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",19,"^8=",["^H",[["~$f","^9K","~$p__27469"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",213,"^9",213,"^8@",3,"^8A",true,"^G",["^H",["^U",["^H",[["~$f","^9K",["^ ","^1D","^8G","^J","^9L"]]]]]]],"~$instrument-choose-spec",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",136,"^8",8,"^9",136,"^:",30,"^8:",true,"^G",["^H",["^U",["^H",[["^I","^8E",["^ ","~$overrides","~:spec"]]]]]],"^K","Helper for instrument"],"^8:",true,"^L","~$cljs.spec.test.alpha/instrument-choose-spec","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",30,"^8=",["^H",[["^I","^8E","~$p__27438"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",136,"^9",136,"^8@",3,"^8A",true,"^G",["^H",["^U",["^H",[["^I","^8E",["^ ","^9P","^9Q"]]]]]],"^K","Helper for instrument"],"~$find-caller",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",74,"^8",8,"^9",74,"^:",19,"^8:",true,"^G",["^H",["^U",["^H",[["^1M"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/find-caller","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",19,"^8=",["^H",[["^1M"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",74,"^9",74,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["^1M"]]]]]],"~$check-call",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",196,"^8",8,"^9",196,"^:",18,"^8:",true,"^G",["^H",["^U",["^H",[["~$f","^9K","^8P"]]]]],"^K","Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure."],"^8:",true,"^L","~$cljs.spec.test.alpha/check-call","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",18,"^8=",["^H",[["~$f","^9K","^8P"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",196,"^9",196,"^8@",3,"^8A",true,"^G",["^H",["^U",["^H",[["~$f","^9K","^8P"]]]]],"^K","Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure."],"~$fn-spec?",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",63,"^8",8,"^9",63,"^:",16,"^8:",true,"^G",["^H",["^U",["^H",[["~$m"]]]]],"^K","Fn-spec must include at least :args or :ret specs."],"^8:",true,"^L","~$cljs.spec.test.alpha/fn-spec?","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",16,"^8=",["^H",[["~$m"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",63,"^9",63,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["~$m"]]]]],"^K","Fn-spec must include at least :args or :ret specs."],"~$no-fspec",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",122,"^8",8,"^9",122,"^:",16,"^8:",true,"^G",["^H",["^U",["^H",[["~$v","^I"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/no-fspec","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",16,"^8=",["^H",[["~$v","^I"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",122,"^9",122,"^8@",2,"^8A",true,"^G",["^H",["^U",["^H",[["~$v","^I"]]]]]],"~$unstrument-1*",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",154,"^8",8,"^9",154,"^:",21,"^8:",true,"^G",["^H",["^U",["^H",[["~$s","~$v"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/unstrument-1*","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",21,"^8=",["^H",[["~$s","~$v"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",154,"^9",154,"^8@",2,"^8A",true,"^G",["^H",["^U",["^H",[["~$s","~$v"]]]]]],"~$make-check-result",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",222,"^8",8,"^9",222,"^:",25,"^8:",true,"^G",["^H",["^U",["^H",[["~$check-sym","^I","~$test-check-ret"]]]]],"^K","Builds spec result map."],"^8:",true,"^L","~$cljs.spec.test.alpha/make-check-result","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",25,"^8=",["^H",[["^:3","^I","^:4"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",222,"^9",222,"^8@",3,"^8A",true,"^G",["^H",["^U",["^H",[["^:3","^I","^:4"]]]]],"^K","Builds spec result map."],"~$result-type",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",250,"^8",8,"^9",250,"^:",19,"^8:",true,"^G",["^H",["^U",["^H",[["~$ret"]]]]],"^K","Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception"],"^8:",true,"^L","~$cljs.spec.test.alpha/result-type","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",19,"^8=",["^H",[["^:7"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",250,"^9",250,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["^:7"]]]]],"^K","Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception"],"~$abbrev-result",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",263,"^8",7,"^9",263,"^:",20,"^G",["^H",["^U",["^H",[["~$x"]]]]],"^K","Given a check result, returns an abbreviated version\nsuitable for summary use."],"^L","~$cljs.spec.test.alpha/abbrev-result","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",20,"^8=",["^H",[["~$x"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",263,"^9",263,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["~$x"]]]]],"^K","Given a check result, returns an abbreviated version\nsuitable for summary use."],"~$validate-check-opts",["^ ","^89",null,"^5",["^ ","^6","cljs/spec/test/alpha.cljs","^7",234,"^8",8,"^9",234,"^:",27,"^8:",true,"^G",["^H",["^U",["^H",[["^J"]]]]]],"^8:",true,"^L","~$cljs.spec.test.alpha/validate-check-opts","^8<",false,"^6","cljs/spec/test/alpha.cljs","^:",27,"^8=",["^H",[["^J"]]],"^8>",null,"^8?",["^H",[null,null]],"^8",1,"^7",234,"^9",234,"^8@",1,"^8A",true,"^G",["^H",["^U",["^H",[["^J"]]]]]]],"^1P",["^ ","^B","^B","~$m","^B","^1>","^1>","^1D","^1E","^1F","^1G","^1G","^1G","~$s","^1H","^1H","^1H","^1E","^1E"],"~:cljs.analyzer/constants",["^ ","^1N",["^D",["~:args","~:cljs.spec.alpha/failure","~$x","~$cljs.spec.alpha/maybe-spec","~:ret","~:ua-product","~:shrunk","~:fn","~:check-passed","~:instrument","~:safari","^8:","~:else","^8G","~:replace","~:failure","~:raw","~:default","^N","^L","^6","~:num-tests","~:cljs.spec.test.alpha/caller","^:","^9L","~:port","^9F","~:function","~:stub","~:sym","^8","~$spec-or-k","~:firefox","~:clojure.test.check/ret","^9Q","~:cljs.spec.alpha/invalid","~:host","~:total","~:no-fspec","^7","~:chrome","~:var","~:result","~:ie","~:cljs.spec.test.alpha/val","~:check-failed","^9","~:cljs.spec.alpha/args","~$cljs.spec.alpha/->sym","~$maybe-spec","~:cljs.spec.test.alpha/args","^G","^K","^1H","~:wrapped","~:check-threw","~:test"]],"~:order",["^;5","^8:","^N","^L","^6","^:","^8","^7","^9","^G","^K","^;:","^1H","^9F","~$x","^:W","^:O","^:G","^:Z","^:T","^;1","^:B","^:>","^:A","^:P","^:@","^;6","^:S","^:V","^;4","^:?","^:F","^:N","^:[","^9Q","^:Y","^8G","^:Q","^:I","^:K","^;8","^;7","^;2","^;3","^:D","^9L","^:M","^:H","^;0","^:U","^:R","^:J","^:C","^:E","^:L","^;9","^:X"]],"^1U",["^ ","^1P",["^D",[]],"^1O",["^D",[]]],"^1V",["^ "],"^1W",["^1C","^1>","^1@","^1<","^1J","^1=","^1G","^1H","^1E","^1B","^1K"]],"^N","^B","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^7>",[["^;>","~:static-fns"],true,["^;>","~:elide-asserts"],false,["^;>","~:optimize-constants"],null,["^;>","~:external-config"],null,["^;>","~:tooling-config"],null,["^;>","~:emit-constants"],null,["^;>","~:infer-externs"],true,["^;>","^22"],null,["~:js-options","~:js-provider"],"^1O",["~:mode"],"~:dev",["^;>","~:fn-invoke-direct"],null,["^;>","^24"],"/dev/null"]]]