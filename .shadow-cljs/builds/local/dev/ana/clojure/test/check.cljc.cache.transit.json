["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.generators');\ngoog.require('clojure.test.check.random');\ngoog.require('clojure.test.check.results');\ngoog.require('clojure.test.check.rose_tree');\ngoog.require('clojure.test.check.impl');\n\nclojure.test.check.make_rng = (function clojure$test$check$make_rng(seed){\nif(cljs.core.truth_(seed)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [seed,clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1(seed)], null);\n} else {\nvar non_nil_seed = clojure.test.check.impl.get_current_time_millis();\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [non_nil_seed,clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1(non_nil_seed)], null);\n}\n});\nclojure.test.check.complete = (function clojure$test$check$complete(property,num_trials,seed,reporter_fn){\nvar G__19210_19211 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"complete\",\"complete\",-500388775),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),true,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),num_trials,new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19210_19211) : reporter_fn.call(null,G__19210_19211));\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),true,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),num_trials,new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null);\n});\n/**\n * Tests `property` `num-tests` times.\n * \n *   Takes several optional keys:\n * \n *   `:seed`\n *  Can be used to re-run previous tests, as the seed used is returned\n *  after a test is run.\n * \n *   `:max-size`.\n *  can be used to control the 'size' of generated values. The size will\n *  start at 0, and grow up to max-size, as the number of tests increases.\n *  Generators will use the size parameter to bound their growth. This\n *  prevents, for example, generating a five-thousand element vector on\n *  the very first test.\n * \n *   `:reporter-fn`\n *  A callback function that will be called at various points in the test\n *  run, with a map like:\n * \n *    ;; called after a passing trial\n *    {:type      :trial\n *     :property  #<...>\n *     :so-far    <number of tests run so far>\n *     :num-tests <total number of tests>}\n * \n *    ;; called after each failing trial\n *    {:type         :failure\n *     :property     #<...>\n *     :result       ...\n *     :trial-number <tests ran before failure found>\n *     :failing-args [...]}\n * \n *  It will also be called on :complete, :shrink-step and :shrunk.\n * \n *   Examples:\n * \n *    (def p (for-all [a gen/pos-int] (> (* a a) a)))\n * \n *    (quick-check 100 p)\n *    (quick-check 200 p\n *                 :seed 42\n *                 :max-size 50\n *                 :reporter-fn (fn [m]\n *                                (when (= :failure (:type m))\n *                                  (println \"Uh oh...\"))))\n */\nclojure.test.check.quick_check = (function clojure$test$check$quick_check(var_args){\nvar args__4534__auto__ = [];\nvar len__4531__auto___19236 = arguments.length;\nvar i__4532__auto___19237 = (0);\nwhile(true){\nif((i__4532__auto___19237 < len__4531__auto___19236)){\nargs__4534__auto__.push((arguments[i__4532__auto___19237]));\n\nvar G__19238 = (i__4532__auto___19237 + (1));\ni__4532__auto___19237 = G__19238;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4535__auto__ = ((((2) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((2)),(0),null)):null);\nreturn clojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4535__auto__);\n});\n\nclojure.test.check.quick_check.cljs$core$IFn$_invoke$arity$variadic = (function (num_tests,property,p__19221){\nvar map__19222 = p__19221;\nvar map__19222__$1 = ((((!((map__19222 == null)))?(((((map__19222.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__19222.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__19222):map__19222);\nvar seed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19222__$1,new cljs.core.Keyword(null,\"seed\",\"seed\",68613327));\nvar max_size = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__19222__$1,new cljs.core.Keyword(null,\"max-size\",\"max-size\",-874966132),(200));\nvar reporter_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__19222__$1,new cljs.core.Keyword(null,\"reporter-fn\",\"reporter-fn\",1280520247),cljs.core.constantly(null));\nvar vec__19224 = clojure.test.check.make_rng(seed);\nvar created_seed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19224,(0),null);\nvar rng = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19224,(1),null);\nvar size_seq = clojure.test.check.generators.make_size_range_seq(max_size);\nvar so_far = (0);\nvar size_seq__$1 = size_seq;\nvar rstate = rng;\nwhile(true){\nif((so_far === num_tests)){\nreturn clojure.test.check.complete(property,num_tests,created_seed,reporter_fn);\n} else {\nvar vec__19227 = size_seq__$1;\nvar seq__19228 = cljs.core.seq(vec__19227);\nvar first__19229 = cljs.core.first(seq__19228);\nvar seq__19228__$1 = cljs.core.next(seq__19228);\nvar size = first__19229;\nvar rest_size_seq = seq__19228__$1;\nvar vec__19230 = clojure.test.check.random.split(rstate);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19230,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__19230,(1),null);\nvar result_map_rose = clojure.test.check.generators.call_gen(property,r1,size);\nvar result_map = clojure.test.check.rose_tree.root(result_map_rose);\nvar result = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(result_map);\nvar args = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(result_map);\nvar so_far__$1 = (so_far + (1));\nif(cljs.core.truth_(clojure.test.check.results.passing_QMARK_(result))){\nvar G__19234_19239 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"trial\",\"trial\",-677458347),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"so-far\",\"so-far\",-1973642241),so_far__$1,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),num_tests], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19234_19239) : reporter_fn.call(null,G__19234_19239));\n\nvar G__19240 = so_far__$1;\nvar G__19241 = rest_size_seq;\nvar G__19242 = r2;\nso_far = G__19240;\nsize_seq__$1 = G__19241;\nrstate = G__19242;\ncontinue;\n} else {\nreturn (clojure.test.check.failure.cljs$core$IFn$_invoke$arity$6 ? clojure.test.check.failure.cljs$core$IFn$_invoke$arity$6(property,result_map_rose,so_far__$1,size,created_seed,reporter_fn) : clojure.test.check.failure.call(null,property,result_map_rose,so_far__$1,size,created_seed,reporter_fn));\n}\n}\nbreak;\n}\n});\n\nclojure.test.check.quick_check.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nclojure.test.check.quick_check.cljs$lang$applyTo = (function (seq19213){\nvar G__19214 = cljs.core.first(seq19213);\nvar seq19213__$1 = cljs.core.next(seq19213);\nvar G__19215 = cljs.core.first(seq19213__$1);\nvar seq19213__$2 = cljs.core.next(seq19213__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__19214,G__19215,seq19213__$2);\n});\n\nclojure.test.check.smallest_shrink = (function clojure$test$check$smallest_shrink(total_nodes_visited,depth,smallest){\nvar map__19243 = smallest;\nvar map__19243__$1 = ((((!((map__19243 == null)))?(((((map__19243.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__19243.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__19243):map__19243);\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__19243__$1,new cljs.core.Keyword(null,\"result\",\"result\",1415092211));\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"total-nodes-visited\",\"total-nodes-visited\",-620132443),total_nodes_visited,new cljs.core.Keyword(null,\"depth\",\"depth\",1768663640),depth,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),clojure.test.check.results.passing_QMARK_(result),new cljs.core.Keyword(null,\"result-data\",\"result-data\",-1724248844),clojure.test.check.results.result_data(result),new cljs.core.Keyword(null,\"smallest\",\"smallest\",-152623883),new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(smallest)], null);\n});\n/**\n * Shrinking a value produces a sequence of smaller values of the same type.\n *   Each of these values can then be shrunk. Think of this as a tree. We do a\n *   modified depth-first search of the tree:\n * \n *   Do a non-exhaustive search for a deeper (than the root) failing example.\n *   Additional rules added to depth-first search:\n *   * If a node passes the property, you may continue searching at this depth,\n *   but not backtrack\n *   * If a node fails the property, search its children\n *   The value returned is the left-most failing example at the depth where a\n *   passing example was found.\n * \n *   Calls reporter-fn on every shrink step.\n */\nclojure.test.check.shrink_loop = (function clojure$test$check$shrink_loop(rose_tree,reporter_fn){\nvar shrinks_this_depth = clojure.test.check.rose_tree.children(rose_tree);\nvar nodes = shrinks_this_depth;\nvar current_smallest = clojure.test.check.rose_tree.root(rose_tree);\nvar total_nodes_visited = (0);\nvar depth = (0);\nwhile(true){\nif(cljs.core.empty_QMARK_(nodes)){\nreturn clojure.test.check.smallest_shrink(total_nodes_visited,depth,current_smallest);\n} else {\nvar head = cljs.core.first(nodes);\nvar tail = cljs.core.rest(nodes);\nvar result = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(clojure.test.check.rose_tree.root(head));\nvar args = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(clojure.test.check.rose_tree.root(head));\nvar shrink_step_map = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"shrink-step\",\"shrink-step\",-541828120),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result,new cljs.core.Keyword(null,\"args\",\"args\",1315556576),args], null);\nif(cljs.core.truth_(clojure.test.check.results.passing_QMARK_(result))){\nvar G__19246_19248 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([shrink_step_map,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pass?\",\"pass?\",-424635753),true,new cljs.core.Keyword(null,\"current-smallest\",\"current-smallest\",1840631643),current_smallest], null)], 0));\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19246_19248) : reporter_fn.call(null,G__19246_19248));\n\nvar G__19249 = tail;\nvar G__19250 = current_smallest;\nvar G__19251 = (total_nodes_visited + (1));\nvar G__19252 = depth;\nnodes = G__19249;\ncurrent_smallest = G__19250;\ntotal_nodes_visited = G__19251;\ndepth = G__19252;\ncontinue;\n} else {\nvar new_smallest = clojure.test.check.rose_tree.root(head);\nvar G__19247_19253 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([shrink_step_map,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"pass?\",\"pass?\",-424635753),false,new cljs.core.Keyword(null,\"current-smallest\",\"current-smallest\",1840631643),new_smallest], null)], 0));\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19247_19253) : reporter_fn.call(null,G__19247_19253));\n\nvar temp__5455__auto__ = cljs.core.seq(clojure.test.check.rose_tree.children(head));\nif(temp__5455__auto__){\nvar children = temp__5455__auto__;\nvar G__19254 = children;\nvar G__19255 = new_smallest;\nvar G__19256 = (total_nodes_visited + (1));\nvar G__19257 = (depth + (1));\nnodes = G__19254;\ncurrent_smallest = G__19255;\ntotal_nodes_visited = G__19256;\ndepth = G__19257;\ncontinue;\n} else {\nvar G__19258 = tail;\nvar G__19259 = new_smallest;\nvar G__19260 = (total_nodes_visited + (1));\nvar G__19261 = depth;\nnodes = G__19258;\ncurrent_smallest = G__19259;\ntotal_nodes_visited = G__19260;\ndepth = G__19261;\ncontinue;\n}\n}\n}\nbreak;\n}\n});\nclojure.test.check.failure = (function clojure$test$check$failure(property,failing_rose_tree,trial_number,size,seed,reporter_fn){\nvar root = clojure.test.check.rose_tree.root(failing_rose_tree);\nvar result = new cljs.core.Keyword(null,\"result\",\"result\",1415092211).cljs$core$IFn$_invoke$arity$1(root);\nvar failing_args = new cljs.core.Keyword(null,\"args\",\"args\",1315556576).cljs$core$IFn$_invoke$arity$1(root);\nvar G__19263_19266 = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"failure\",\"failure\",720415879),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"result\",\"result\",1415092211),clojure.test.check.results.passing_QMARK_(result),new cljs.core.Keyword(null,\"result-data\",\"result-data\",-1724248844),clojure.test.check.results.result_data(result),new cljs.core.Keyword(null,\"trial-number\",\"trial-number\",1762056689),trial_number,new cljs.core.Keyword(null,\"failing-args\",\"failing-args\",-890623811),failing_args], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19263_19266) : reporter_fn.call(null,G__19263_19266));\n\nvar shrunk = clojure.test.check.shrink_loop(failing_rose_tree,((function (root,result,failing_args){\nreturn (function (p1__19262_SHARP_){\nvar G__19264 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__19262_SHARP_,new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property);\nreturn (reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19264) : reporter_fn.call(null,G__19264));\n});})(root,result,failing_args))\n);\nvar G__19265_19267 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412),new cljs.core.Keyword(null,\"property\",\"property\",-1114278232),property,new cljs.core.Keyword(null,\"trial-number\",\"trial-number\",1762056689),trial_number,new cljs.core.Keyword(null,\"failing-args\",\"failing-args\",-890623811),failing_args,new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412),shrunk], null);\n(reporter_fn.cljs$core$IFn$_invoke$arity$1 ? reporter_fn.cljs$core$IFn$_invoke$arity$1(G__19265_19267) : reporter_fn.call(null,G__19265_19267));\n\nreturn new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"result\",\"result\",1415092211),clojure.test.check.results.passing_QMARK_(result),new cljs.core.Keyword(null,\"result-data\",\"result-data\",-1724248844),clojure.test.check.results.result_data(result),new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed,new cljs.core.Keyword(null,\"failing-size\",\"failing-size\",-429562538),size,new cljs.core.Keyword(null,\"num-tests\",\"num-tests\",2050041354),trial_number,new cljs.core.Keyword(null,\"fail\",\"fail\",1706214930),cljs.core.vec(failing_args),new cljs.core.Keyword(null,\"shrunk\",\"shrunk\",-2041664412),shrunk], null);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",23],"~:ns-aliases",["^ ","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.results","^K","~$rose","~$clojure.test.check.rose-tree","~$results","^K","~$clojure.test.check.impl","^O","^M","^M","~$cljs.core","^P","~$clojure.test.check.generators","^Q","~$goog","^R","~$gen","^Q","~$clojure.test.check.random","^T","~$random","^T"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$get-current-time-millis","^O","~$exception-like?","^O"],"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^F",["^11",["^W",["^Q","~:as","^S"],["^T","^13","^U"],["^K","^13","^N"],["^M","^13","^L"],["^O","~:refer",["^Y","^Z"]]]]]],"~:flags",["^ ","^W",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^R","^P","^Q","^T","^K","^M","^O"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check.cljc"],"~:compiled-at",1537320656030,"~:resource-name","clojure/test/check.cljc","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.results :as results]\n            [clojure.test.check.rose-tree :as rose]\n            [clojure.test.check.impl :refer [get-current-time-millis\n                                             exception-like?]]))\n\n(declare shrink-loop failure)\n\n(defn- make-rng\n  [seed]\n  (if seed\n    [seed (random/make-random seed)]\n    (let [non-nil-seed (get-current-time-millis)]\n      [non-nil-seed (random/make-random non-nil-seed)])))\n\n(defn- complete\n  [property num-trials seed reporter-fn]\n  (reporter-fn {:type :complete\n                :property property\n                :result true\n                :num-tests num-trials\n                :seed seed})\n\n  {:result true :num-tests num-trials :seed seed})\n\n(defn quick-check\n  \"Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \\\"Uh oh...\\\"))))\"\n  [num-tests property & {:keys [seed max-size reporter-fn]\n                         :or {max-size 200, reporter-fn (constantly nil)}}]\n  (let [[created-seed rng] (make-rng seed)\n        size-seq (gen/make-size-range-seq max-size)]\n    (loop [so-far 0\n           size-seq size-seq\n           rstate rng]\n      (if (== so-far num-tests)\n        (complete property num-tests created-seed reporter-fn)\n        (let [[size & rest-size-seq] size-seq\n              [r1 r2] (random/split rstate)\n              result-map-rose (gen/call-gen property r1 size)\n              result-map (rose/root result-map-rose)\n              result (:result result-map)\n              args (:args result-map)\n              so-far (inc so-far)]\n          (if (results/passing? result)\n            (do\n              (reporter-fn {:type :trial\n                            :property property\n                            :so-far so-far\n                            :num-tests num-tests})\n              (recur so-far rest-size-seq r2))\n            (failure property result-map-rose so-far size created-seed reporter-fn)))))))\n\n(defn- smallest-shrink\n  [total-nodes-visited depth smallest]\n  (let [{:keys [result]} smallest]\n    {:total-nodes-visited total-nodes-visited\n     :depth depth\n     :result (results/passing? result)\n     :result-data (results/result-data result)\n     :smallest (:args smallest)}))\n\n(defn- shrink-loop\n  \"Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step.\"\n  [rose-tree reporter-fn]\n  (let [shrinks-this-depth (rose/children rose-tree)]\n    (loop [nodes shrinks-this-depth\n           current-smallest (rose/root rose-tree)\n           total-nodes-visited 0\n           depth 0]\n      (if (empty? nodes)\n        (smallest-shrink total-nodes-visited depth current-smallest)\n        (let [;; can't destructure here because that could force\n              ;; evaluation of (second nodes)\n              head (first nodes)\n              tail (rest nodes)\n              result (:result (rose/root head))\n              args (:args (rose/root head))\n              shrink-step-map {:type :shrink-step\n                               :result result\n                               :args args}]\n          (if (results/passing? result)\n            ;; this node passed the test, so now try testing its right-siblings\n            (do\n              (reporter-fn (merge shrink-step-map {:pass? true\n                                                   :current-smallest current-smallest}))\n              (recur tail current-smallest (inc total-nodes-visited) depth))\n            ;; this node failed the test, so check if it has children,\n            ;; if so, traverse down them. If not, save this as the best example\n            ;; seen now and then look at the right-siblings\n            ;; children\n            (let [new-smallest (rose/root head)]\n              (reporter-fn (merge shrink-step-map {:pass? false\n                                                   :current-smallest new-smallest}))\n              (if-let [children (seq (rose/children head))]\n                (recur children new-smallest (inc total-nodes-visited) (inc depth))\n                (recur tail new-smallest (inc total-nodes-visited) depth)))))))))\n\n(defn- failure\n  [property failing-rose-tree trial-number size seed reporter-fn]\n  (let [root (rose/root failing-rose-tree)\n        result (:result root)\n        failing-args (:args root)]\n\n    (reporter-fn {:type :failure\n                  :property property\n                  :result (results/passing? result)\n                  :result-data (results/result-data result)\n                  :trial-number trial-number\n                  :failing-args failing-args})\n\n    (let [shrunk (shrink-loop failing-rose-tree\n                              #(reporter-fn (assoc % :property property)))]\n      (reporter-fn {:type :shrunk\n                    :property property\n                    :trial-number trial-number\n                    :failing-args failing-args\n                    :shrunk shrunk})\n      {:result (results/passing? result)\n       :result-data (results/result-data result)\n       :seed seed\n       :failing-size size\n       :num-tests trial-number\n       :fail (vec failing-args)\n       :shrunk shrunk})))\n","~:reader-features",["^D",["~:cljs"]],"~:source-map",["^ ","~i17",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",7],["^ ","^1B",0,"^1C",7],["^ ","^1B",0,"^1C",8]]],"~i19",["^ ","~i0",[["^ ","^1B",0,"^1C",8],["^ ","^1B",30,"^1C",8],["^ ","^1B",0,"^1C",9]],"~i7",[["^ ","^1B",0,"^1C",8,"^E","clojure.test.check/make-rng"]]],"~i20",["^ ","~i3",[["^ ","^1B",68,"^1C",8,"^E","seed"]]],"~i21",["^ ","~i2",[["^ ","^1B",0,"^1C",9],["^ ","^1B",0,"^1C",10]],"~i6",[["^ ","^1B",20,"^1C",9,"^E","seed"]]],"~i22",["^ ","~i5",[["^ ","^1B",90,"^1C",10,"^E","seed"]],"~i10",[["^ ","^1B",95,"^1C",10]],"~i11",[["^ ","^1B",95,"^1C",10,"^E","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1"]],"~i30",[["^ ","^1B",163,"^1C",10,"^E","seed"]]],"~i23",["^ ","~i4",[["^ ","^1B",0,"^1C",12],["^ ","^1B",0,"^1C",13],["^ ","^1B",0,"^1C",13]],"^1H",[["^ ","^1B",4,"^1C",12,"^E","non-nil-seed"]],"^1K",[["^ ","^1B",19,"^1C",12]],"~i24",[["^ ","^1B",19,"^1C",12,"^E","clojure.test.check.impl/get-current-time-millis"]]],"^1L",["^ ","~i7",[["^ ","^1B",90,"^1C",13,"^E","non-nil-seed"]],"^1E",[["^ ","^1B",103,"^1C",13]],"^1F",[["^ ","^1B",103,"^1C",13,"^E","clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1"]],"~i40",[["^ ","^1B",171,"^1C",13,"^E","non-nil-seed"]]],"~i26",["^ ","~i0",[["^ ","^1B",0,"^1C",16],["^ ","^1B",30,"^1C",16],["^ ","^1B",0,"^1C",17],["^ ","^1B",0,"^1C",20],["^ ","^1B",50,"^1C",20],["^ ","^1B",107,"^1C",20],["^ ","^1B",112,"^1C",20],["^ ","^1B",186,"^1C",20]],"~i7",[["^ ","^1B",0,"^1C",16,"^E","clojure.test.check/complete"]]],"~i27",["^ ","~i3",[["^ ","^1B",68,"^1C",16,"^E","property"]],"~i12",[["^ ","^1B",77,"^1C",16,"^E","num-trials"]],"^1K",[["^ ","^1B",88,"^1C",16,"^E","seed"]],"~i28",[["^ ","^1B",93,"^1C",16,"^E","reporter-fn"]]],"^1Q",["^ ","~i2",[["^ ","^1B",0,"^1C",17],["^ ","^1B",4,"^1C",17,"^E","G__19210"],["^ ","^1B",21,"^1C",17],["^ ","^1B",64,"^1C",17],["^ ","^1B",117,"^1C",17],["^ ","^1B",178,"^1C",17],["^ ","^1B",249,"^1C",17],["^ ","^1B",306,"^1C",17],["^ ","^1B",311,"^1C",17],["^ ","^1B",385,"^1C",17],["^ ","^1B",0,"^1C",18],["^ ","^1B",0,"^1C",18],["^ ","^1B",87,"^1C",18,"^E","G__19210"],["^ ","^1B",127,"^1C",18,"^E","G__19210"]],"~i3",[["^ ","^1B",1,"^1C",18,"^E","reporter-fn"],["^ ","^1B",45,"^1C",18,"^E","reporter-fn"],["^ ","^1B",105,"^1C",18,"^E","reporter-fn"]]],"~i29",["^ ","^1N",[["^ ","^1B",240,"^1C",17,"^E","property"]]],"~i31",["^ ","^1O",[["^ ","^1B",374,"^1C",17,"^E","num-trials"]]],"~i32",["^ ","^1G",[["^ ","^1B",436,"^1C",17,"^E","seed"]]],"~i34",["^ ","^1O",[["^ ","^1B",175,"^1C",20,"^E","num-trials"]],"~i44",[["^ ","^1B",237,"^1C",20,"^E","seed"]]],"~i36",["^ ","~i0",[["^ ","^1B",0,"^1C",22],["^ ","^1B",0,"^1C",22],["^ ","^1B",33,"^1C",69],["^ ","^1B",74,"^1C",69,"^E","var_args"],["^ ","^1B",0,"^1C",70],["^ ","^1B",0,"^1C",70],["^ ","^1B",4,"^1C",70,"^E","args__4534__auto__"],["^ ","^1B",25,"^1C",70],["^ ","^1B",0,"^1C",71],["^ ","^1B",0,"^1C",71],["^ ","^1B",4,"^1C",71,"^E","len__4531__auto__"],["^ ","^1B",30,"^1C",71],["^ ","^1B",30,"^1C",71],["^ ","^1B",0,"^1C",72],["^ ","^1B",0,"^1C",72],["^ ","^1B",4,"^1C",72,"^E","i__4532__auto__"],["^ ","^1B",28,"^1C",72],["^ ","^1B",0,"^1C",74],["^ ","^1B",0,"^1C",74],["^ ","^1B",3,"^1C",74],["^ ","^1B",4,"^1C",74,"^E","i__4532__auto__"],["^ ","^1B",28,"^1C",74,"^E","len__4531__auto__"],["^ ","^1B",0,"^1C",75],["^ ","^1B",0,"^1C",75],["^ ","^1B",0,"^1C",75,"^E","args__4534__auto__"],["^ ","^1B",24,"^1C",75],["^ ","^1B",25,"^1C",75],["^ ","^1B",35,"^1C",75,"^E","i__4532__auto__"],["^ ","^1B",0,"^1C",77],["^ ","^1B",15,"^1C",77],["^ ","^1B",16,"^1C",77,"^E","i__4532__auto__"],["^ ","^1B",40,"^1C",77],["^ ","^1B",0,"^1C",81],["^ ","^1B",0,"^1C",85],["^ ","^1B",4,"^1C",85,"^E","argseq__4535__auto__"],["^ ","^1B",27,"^1C",85],["^ ","^1B",29,"^1C",85],["^ ","^1B",30,"^1C",85],["^ ","^1B",36,"^1C",85],["^ ","^1B",36,"^1C",85,"^E","args__4534__auto__"],["^ ","^1B",64,"^1C",85],["^ ","^1B",64,"^1C",85],["^ ","^1B",69,"^1C",85,"^E","cljs.core/IndexedSeq"],["^ ","^1B",90,"^1C",85],["^ ","^1B",90,"^1C",85,"^E","args__4534__auto__"],["^ ","^1B",115,"^1C",85],["^ ","^1B",120,"^1C",85],["^ ","^1B",124,"^1C",85],["^ ","^1B",131,"^1C",85],["^ ","^1B",0,"^1C",86],["^ ","^1B",0,"^1C",86],["^ ","^1B",7,"^1C",86,"^E","clojure.test.check/quick-check"],["^ ","^1B",75,"^1C",86],["^ ","^1B",76,"^1C",86],["^ ","^1B",86,"^1C",86],["^ ","^1B",92,"^1C",86],["^ ","^1B",93,"^1C",86],["^ ","^1B",103,"^1C",86],["^ ","^1B",109,"^1C",86,"^E","argseq__4535__auto__"],["^ ","^1B",0,"^1C",89],["^ ","^1B",0,"^1C",89],["^ ","^1B",0,"^1C",89],["^ ","^1B",0,"^1C",89,"^E","clojure.test.check/quick-check"],["^ ","^1B",70,"^1C",89],["^ ","^1B",100,"^1C",89,"^E","p__19221"],["^ ","^1B",0,"^1C",90],["^ ","^1B",0,"^1C",90],["^ ","^1B",4,"^1C",90,"^E","map__19222"],["^ ","^1B",17,"^1C",90,"^E","p__19221"],["^ ","^1B",4,"^1C",91,"^E","map__19222"],["^ ","^1B",21,"^1C",91],["^ ","^1B",23,"^1C",91],["^ ","^1B",25,"^1C",91],["^ ","^1B",27,"^1C",91],["^ ","^1B",28,"^1C",91,"^E","map__19222"],["^ ","^1B",42,"^1C",91],["^ ","^1B",50,"^1C",91],["^ ","^1B",52,"^1C",91],["^ ","^1B",54,"^1C",91],["^ ","^1B",55,"^1C",91],["^ ","^1B",55,"^1C",91,"^E","map__19222"],["^ ","^1B",104,"^1C",91],["^ ","^1B",115,"^1C",91],["^ ","^1B",116,"^1C",91,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1B",148,"^1C",91],["^ ","^1B",148,"^1C",91,"^E","map__19222"],["^ ","^1B",179,"^1C",91],["^ ","^1B",184,"^1C",91],["^ ","^1B",191,"^1C",91],["^ ","^1B",199,"^1C",91],["^ ","^1B",199,"^1C",91,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",245,"^1C",91,"^E","cljs.core/hash-map"],["^ ","^1B",264,"^1C",91,"^E","map__19222"],["^ ","^1B",276,"^1C",91,"^E","map__19222"],["^ ","^1B",11,"^1C",92],["^ ","^1B",11,"^1C",92,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",55,"^1C",92,"^E","map__19222"],["^ ","^1B",70,"^1C",92],["^ ","^1B",15,"^1C",93],["^ ","^1B",15,"^1C",93,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1B",59,"^1C",93,"^E","map__19222"],["^ ","^1B",74,"^1C",93],["^ ","^1B",135,"^1C",93],["^ ","^1B",18,"^1C",94],["^ ","^1B",18,"^1C",94,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$3"],["^ ","^1B",62,"^1C",94,"^E","map__19222"],["^ ","^1B",77,"^1C",94],["^ ","^1B",0,"^1C",95],["^ ","^1B",0,"^1C",139],["^ ","^1B",0,"^1C",139],["^ ","^1B",0,"^1C",139,"^E","clojure.test.check/quick-check"],["^ ","^1B",57,"^1C",139],["^ ","^1B",0,"^1C",141],["^ ","^1B",0,"^1C",142],["^ ","^1B",0,"^1C",142],["^ ","^1B",0,"^1C",142,"^E","clojure.test.check/quick-check"],["^ ","^1B",51,"^1C",142],["^ ","^1B",62,"^1C",142,"^E","seq19213"],["^ ","^1B",0,"^1C",143],["^ ","^1B",0,"^1C",143],["^ ","^1B",4,"^1C",143,"^E","G__19214"],["^ ","^1B",15,"^1C",143],["^ ","^1B",15,"^1C",143,"^E","cljs.core/first"],["^ ","^1B",31,"^1C",143,"^E","seq19213"],["^ ","^1B",4,"^1C",144,"^E","seq19213"],["^ ","^1B",19,"^1C",144],["^ ","^1B",19,"^1C",144,"^E","cljs.core/next"],["^ ","^1B",34,"^1C",144,"^E","seq19213"],["^ ","^1B",4,"^1C",145,"^E","G__19215"],["^ ","^1B",15,"^1C",145],["^ ","^1B",15,"^1C",145,"^E","cljs.core/first"],["^ ","^1B",31,"^1C",145,"^E","seq19213"],["^ ","^1B",4,"^1C",146,"^E","seq19213"],["^ ","^1B",19,"^1C",146],["^ ","^1B",19,"^1C",146,"^E","cljs.core/next"],["^ ","^1B",34,"^1C",146,"^E","seq19213"],["^ ","^1B",0,"^1C",147],["^ ","^1B",0,"^1C",147],["^ ","^1B",4,"^1C",147,"^E","self__4518__auto__"],["^ ","^1B",25,"^1C",147],["^ ","^1B",0,"^1C",148],["^ ","^1B",0,"^1C",148],["^ ","^1B",7,"^1C",148,"^E","self__4518__auto__"],["^ ","^1B",63,"^1C",148,"^E","G__19214"],["^ ","^1B",72,"^1C",148,"^E","G__19215"],["^ ","^1B",81,"^1C",148,"^E","seq19213"],["^ ","^1B",0,"^1C",151]],"~i6",[["^ ","^1B",0,"^1C",69,"^E","clojure.test.check/quick-check"]]],"~i82",["^ ","~i3",[["^ ","^1B",81,"^1C",89,"^E","num-tests"]],"~i13",[["^ ","^1B",91,"^1C",89,"^E","property"]],"^1T",[["^ ","^1B",4,"^1C",92,"^E","seed"]],"~i37",[["^ ","^1B",4,"^1C",93,"^E","max-size"]],"~i46",[["^ ","^1B",4,"^1C",94,"^E","reporter-fn"]]],"~i83",["^ ","~i56",[["^ ","^1B",144,"^1C",94],["^ ","^1B",165,"^1C",94]],"~i57",[["^ ","^1B",144,"^1C",94,"^E","cljs.core/constantly"]]],"~i84",["^ ","~i2",[["^ ","^1B",0,"^1C",95],["^ ","^1B",4,"^1C",95,"^E","vec__19224"],["^ ","^1B",19,"^1C",96],["^ ","^1B",19,"^1C",96,"^E","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1B",63,"^1C",96,"^E","vec__19224"],["^ ","^1B",74,"^1C",96],["^ ","^1B",78,"^1C",96],["^ ","^1B",10,"^1C",97],["^ ","^1B",10,"^1C",97,"^E","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1B",54,"^1C",97,"^E","vec__19224"],["^ ","^1B",65,"^1C",97],["^ ","^1B",69,"^1C",97],["^ ","^1B",0,"^1C",99]],"~i9",[["^ ","^1B",4,"^1C",96,"^E","created-seed"]],"^1G",[["^ ","^1B",4,"^1C",97,"^E","rng"]],"^1O",[["^ ","^1B",17,"^1C",95]],"^1Q",[["^ ","^1B",17,"^1C",95,"^E","clojure.test.check/make-rng"]],"^1Z",[["^ ","^1B",45,"^1C",95,"^E","seed"]]],"~i85",["^ ","~i8",[["^ ","^1B",4,"^1C",98,"^E","size-seq"]],"^1A",[["^ ","^1B",15,"^1C",98]],"~i18",[["^ ","^1B",15,"^1C",98,"^E","clojure.test.check.generators/make-size-range-seq"]],"~i42",[["^ ","^1B",65,"^1C",98,"^E","max-size"]]],"~i86",["^ ","~i4",[["^ ","^1B",0,"^1C",99],["^ ","^1B",13,"^1C",99],["^ ","^1B",0,"^1C",103]],"^1I",[["^ ","^1B",4,"^1C",99,"^E","so-far"]]],"~i87",["^ ","^1I",[["^ ","^1B",4,"^1C",100,"^E","size-seq"]],"^1E",[["^ ","^1B",19,"^1C",100,"^E","size-seq"]]],"~i88",["^ ","^1I",[["^ ","^1B",4,"^1C",101,"^E","rstate"]],"^25",[["^ ","^1B",13,"^1C",101,"^E","rng"]]],"~i89",["^ ","~i6",[["^ ","^1B",0,"^1C",103]],"^1H",[["^ ","^1B",3,"^1C",103]],"~i14",[["^ ","^1B",4,"^1C",103,"^E","so-far"]],"^1F",[["^ ","^1B",15,"^1C",103,"^E","num-tests"]]],"~i90",["^ ","~i8",[["^ ","^1B",0,"^1C",104]],"~i9",[["^ ","^1B",7,"^1C",104,"^E","clojure.test.check/complete"]],"^25",[["^ ","^1B",35,"^1C",104,"^E","property"]],"^1O",[["^ ","^1B",44,"^1C",104,"^E","num-tests"]],"^1Z",[["^ ","^1B",54,"^1C",104,"^E","created-seed"]],"~i50",[["^ ","^1B",67,"^1C",104,"^E","reporter-fn"]]],"~i91",["^ ","~i8",[["^ ","^1B",0,"^1C",106],["^ ","^1B",4,"^1C",106,"^E","vec__19227"],["^ ","^1B",4,"^1C",107,"^E","seq__19228"],["^ ","^1B",17,"^1C",107],["^ ","^1B",17,"^1C",107,"^E","cljs.core/seq"],["^ ","^1B",31,"^1C",107,"^E","vec__19227"],["^ ","^1B",4,"^1C",108,"^E","first__19229"],["^ ","^1B",19,"^1C",108],["^ ","^1B",19,"^1C",108,"^E","cljs.core/first"],["^ ","^1B",35,"^1C",108,"^E","seq__19228"],["^ ","^1B",4,"^1C",109,"^E","seq__19228"],["^ ","^1B",21,"^1C",109],["^ ","^1B",21,"^1C",109,"^E","cljs.core/next"],["^ ","^1B",36,"^1C",109,"^E","seq__19228"],["^ ","^1B",11,"^1C",110,"^E","first__19229"],["^ ","^1B",20,"^1C",111,"^E","seq__19228"],["^ ","^1B",4,"^1C",112,"^E","vec__19230"],["^ ","^1B",9,"^1C",113],["^ ","^1B",9,"^1C",113,"^E","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1B",53,"^1C",113,"^E","vec__19230"],["^ ","^1B",64,"^1C",113],["^ ","^1B",68,"^1C",113],["^ ","^1B",9,"^1C",114],["^ ","^1B",9,"^1C",114,"^E","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1B",53,"^1C",114,"^E","vec__19230"],["^ ","^1B",64,"^1C",114],["^ ","^1B",68,"^1C",114],["^ ","^1B",0,"^1C",120]],"~i15",[["^ ","^1B",4,"^1C",110,"^E","size"]],"^1G",[["^ ","^1B",4,"^1C",111,"^E","rest-size-seq"]],"^1Z",[["^ ","^1B",17,"^1C",106,"^E","size-seq"]]],"~i92",["^ ","^2?",[["^ ","^1B",4,"^1C",113,"^E","r1"]],"^25",[["^ ","^1B",4,"^1C",114,"^E","r2"]],"^1G",[["^ ","^1B",17,"^1C",112]],"^1K",[["^ ","^1B",17,"^1C",112,"^E","clojure.test.check.random/split"]],"^1W",[["^ ","^1B",49,"^1C",112,"^E","rstate"]]],"~i93",["^ ","^2;",[["^ ","^1B",4,"^1C",115,"^E","result-map-rose"]],"^1J",[["^ ","^1B",22,"^1C",115]],"^1S",[["^ ","^1B",22,"^1C",115,"^E","clojure.test.check.generators/call-gen"]],"^1V",[["^ ","^1B",61,"^1C",115,"^E","property"]],"~i53",[["^ ","^1B",70,"^1C",115,"^E","r1"]],"^21",[["^ ","^1B",73,"^1C",115,"^E","size"]]],"~i94",["^ ","^2;",[["^ ","^1B",4,"^1C",116,"^E","result-map"]],"~i25",[["^ ","^1B",17,"^1C",116]],"^1N",[["^ ","^1B",17,"^1C",116,"^E","clojure.test.check.rose-tree/root"]],"^1W",[["^ ","^1B",51,"^1C",116,"^E","result-map-rose"]]],"~i95",["^ ","^2;",[["^ ","^1B",4,"^1C",117,"^E","result"]],"^1F",[["^ ","^1B",13,"^1C",117],["^ ","^1B",13,"^1C",117]],"^1J",[["^ ","^1B",100,"^1C",117,"^E","result-map"]]],"~i96",["^ ","^2;",[["^ ","^1B",4,"^1C",118,"^E","args"]],"^1D",[["^ ","^1B",11,"^1C",118],["^ ","^1B",11,"^1C",118]],"^1N",[["^ ","^1B",94,"^1C",118,"^E","result-map"]]],"~i97",["^ ","^2;",[["^ ","^1B",4,"^1C",119,"^E","so-far"]],"^1F",[["^ ","^1B",17,"^1C",119],["^ ","^1B",27,"^1C",119]],"^1N",[["^ ","^1B",18,"^1C",119,"^E","so-far"]]],"~i98",["^ ","^1H",[["^ ","^1B",0,"^1C",120]],"^2;",[["^ ","^1B",20,"^1C",120]],"^2?",[["^ ","^1B",20,"^1C",120,"^E","clojure.test.check.results/passing?"]],"^1T",[["^ ","^1B",62,"^1C",120,"^E","result"]]],"~i99",["^ ","^1P",[["^ ","^1B",0,"^1C",121]]],"~i100",["^ ","^2;",[["^ ","^1B",0,"^1C",121],["^ ","^1B",4,"^1C",121,"^E","G__19234"],["^ ","^1B",21,"^1C",121],["^ ","^1B",64,"^1C",121],["^ ","^1B",117,"^1C",121],["^ ","^1B",172,"^1C",121],["^ ","^1B",243,"^1C",121],["^ ","^1B",312,"^1C",121],["^ ","^1B",0,"^1C",122],["^ ","^1B",0,"^1C",122],["^ ","^1B",87,"^1C",122,"^E","G__19234"],["^ ","^1B",127,"^1C",122,"^E","G__19234"]],"^2?",[["^ ","^1B",1,"^1C",122,"^E","reporter-fn"],["^ ","^1B",45,"^1C",122,"^E","reporter-fn"],["^ ","^1B",105,"^1C",122,"^E","reporter-fn"]]],"~i101",["^ ","~i38",[["^ ","^1B",234,"^1C",121,"^E","property"]]],"~i102",["^ ","^1W",[["^ ","^1B",301,"^1C",121,"^E","so-far"]]],"~i103",["^ ","~i39",[["^ ","^1B",375,"^1C",121,"^E","num-tests"]]],"~i104",["^ ","^2;",[["^ ","^1B",0,"^1C",124]],"^1F",[["^ ","^1B",15,"^1C",124,"^E","so-far"]],"^1Q",[["^ ","^1B",15,"^1C",125,"^E","rest-size-seq"]],"^26",[["^ ","^1B",15,"^1C",126,"^E","r2"]]],"~i105",["^ ","^1P",[["^ ","^1B",0,"^1C",132]],"^1Y",[["^ ","^1B",8,"^1C",132,"^E","clojure.test.check/failure"],["^ ","^1B",67,"^1C",132,"^E","clojure.test.check/failure"],["^ ","^1B",193,"^1C",132,"^E","clojure.test.check/failure"]],"^1F",[["^ ","^1B",124,"^1C",132,"^E","property"],["^ ","^1B",230,"^1C",132,"^E","property"]],"^1J",[["^ ","^1B",133,"^1C",132,"^E","result-map-rose"],["^ ","^1B",239,"^1C",132,"^E","result-map-rose"]],"^1[",[["^ ","^1B",149,"^1C",132,"^E","so-far"],["^ ","^1B",255,"^1C",132,"^E","so-far"]],"^2B",[["^ ","^1B",160,"^1C",132,"^E","size"],["^ ","^1B",266,"^1C",132,"^E","size"]],"~i58",[["^ ","^1B",165,"^1C",132,"^E","created-seed"],["^ ","^1B",271,"^1C",132,"^E","created-seed"]],"~i71",[["^ ","^1B",178,"^1C",132,"^E","reporter-fn"],["^ ","^1B",284,"^1C",132,"^E","reporter-fn"]]],"~i107",["^ ","~i0",[["^ ","^1B",0,"^1C",151],["^ ","^1B",37,"^1C",151],["^ ","^1B",0,"^1C",152]],"~i7",[["^ ","^1B",0,"^1C",151,"^E","clojure.test.check/smallest-shrink"]]],"~i108",["^ ","~i3",[["^ ","^1B",82,"^1C",151,"^E","total-nodes-visited"]],"^1K",[["^ ","^1B",102,"^1C",151,"^E","depth"]],"^1R",[["^ ","^1B",108,"^1C",151,"^E","smallest"]]],"~i109",["^ ","~i2",[["^ ","^1B",0,"^1C",152],["^ ","^1B",4,"^1C",152,"^E","map__19243"],["^ ","^1B",4,"^1C",153,"^E","map__19243"],["^ ","^1B",21,"^1C",153],["^ ","^1B",23,"^1C",153],["^ ","^1B",25,"^1C",153],["^ ","^1B",27,"^1C",153],["^ ","^1B",28,"^1C",153,"^E","map__19243"],["^ ","^1B",42,"^1C",153],["^ ","^1B",50,"^1C",153],["^ ","^1B",52,"^1C",153],["^ ","^1B",54,"^1C",153],["^ ","^1B",55,"^1C",153],["^ ","^1B",55,"^1C",153,"^E","map__19243"],["^ ","^1B",104,"^1C",153],["^ ","^1B",115,"^1C",153],["^ ","^1B",116,"^1C",153,"^E","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1B",148,"^1C",153],["^ ","^1B",148,"^1C",153,"^E","map__19243"],["^ ","^1B",179,"^1C",153],["^ ","^1B",184,"^1C",153],["^ ","^1B",191,"^1C",153],["^ ","^1B",199,"^1C",153],["^ ","^1B",199,"^1C",153,"^E","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",245,"^1C",153,"^E","cljs.core/hash-map"],["^ ","^1B",264,"^1C",153,"^E","map__19243"],["^ ","^1B",276,"^1C",153,"^E","map__19243"],["^ ","^1B",13,"^1C",154],["^ ","^1B",13,"^1C",154,"^E","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",57,"^1C",154,"^E","map__19243"],["^ ","^1B",72,"^1C",154],["^ ","^1B",0,"^1C",155],["^ ","^1B",0,"^1C",155],["^ ","^1B",50,"^1C",155],["^ ","^1B",153,"^1C",155],["^ ","^1B",214,"^1C",155],["^ ","^1B",321,"^1C",155],["^ ","^1B",436,"^1C",155]],"~i16",[["^ ","^1B",4,"^1C",154,"^E","result"]],"^2D",[["^ ","^1B",17,"^1C",152,"^E","smallest"]]],"~i110",["^ ","^1N",[["^ ","^1B",133,"^1C",155,"^E","total-nodes-visited"]]],"~i111",["^ ","^1P",[["^ ","^1B",208,"^1C",155,"^E","depth"]]],"~i112",["^ ","^1Y",[["^ ","^1B",271,"^1C",155]],"^2;",[["^ ","^1B",271,"^1C",155,"^E","clojure.test.check.results/passing?"]],"^1S",[["^ ","^1B",313,"^1C",155,"^E","result"]]],"~i113",["^ ","^25",[["^ ","^1B",389,"^1C",155]],"^1D",[["^ ","^1B",389,"^1C",155,"^E","clojure.test.check.results/result-data"]],"^2O",[["^ ","^1B",428,"^1C",155,"^E","result"]]],"~i114",["^ ","^2?",[["^ ","^1B",497,"^1C",155],["^ ","^1B",497,"^1C",155]],"^1G",[["^ ","^1B",580,"^1C",155,"^E","smallest"]]],"~i116",["^ ","~i0",[["^ ","^1B",0,"^1C",157],["^ ","^1B",33,"^1C",172],["^ ","^1B",0,"^1C",173]],"~i7",[["^ ","^1B",0,"^1C",172,"^E","clojure.test.check/shrink-loop"]]],"~i130",["^ ","~i3",[["^ ","^1B",74,"^1C",172,"^E","rose-tree"]],"^1Y",[["^ ","^1B",84,"^1C",172,"^E","reporter-fn"]]],"~i131",["^ ","~i2",[["^ ","^1B",0,"^1C",173],["^ ","^1B",0,"^1C",174]],"~i8",[["^ ","^1B",4,"^1C",173,"^E","shrinks-this-depth"]],"^1O",[["^ ","^1B",25,"^1C",173]],"^1Q",[["^ ","^1B",25,"^1C",173,"^E","clojure.test.check.rose-tree/children"]],"^26",[["^ ","^1B",63,"^1C",173,"^E","rose-tree"]]],"~i132",["^ ","~i4",[["^ ","^1B",0,"^1C",174],["^ ","^1B",26,"^1C",176],["^ ","^1B",12,"^1C",177],["^ ","^1B",0,"^1C",179]],"^1I",[["^ ","^1B",4,"^1C",174,"^E","nodes"]],"^1A",[["^ ","^1B",12,"^1C",174,"^E","shrinks-this-depth"]]],"~i133",["^ ","^1I",[["^ ","^1B",4,"^1C",175,"^E","current-smallest"]],"^1Q",[["^ ","^1B",23,"^1C",175]],"^1R",[["^ ","^1B",23,"^1C",175,"^E","clojure.test.check.rose-tree/root"]],"^2O",[["^ ","^1B",57,"^1C",175,"^E","rose-tree"]]],"~i134",["^ ","^1I",[["^ ","^1B",4,"^1C",176,"^E","total-nodes-visited"]]],"~i135",["^ ","^1I",[["^ ","^1B",4,"^1C",177,"^E","depth"]]],"~i136",["^ ","~i6",[["^ ","^1B",0,"^1C",179]],"^1H",[["^ ","^1B",3,"^1C",179]],"^1I",[["^ ","^1B",3,"^1C",179,"^E","cljs.core/empty?"]],"^25",[["^ ","^1B",26,"^1C",179,"^E","nodes"]]],"~i137",["^ ","~i8",[["^ ","^1B",0,"^1C",180]],"~i9",[["^ ","^1B",7,"^1C",180,"^E","clojure.test.check/smallest-shrink"]],"^2D",[["^ ","^1B",42,"^1C",180,"^E","total-nodes-visited"]],"~i45",[["^ ","^1B",62,"^1C",180,"^E","depth"]],"~i51",[["^ ","^1B",68,"^1C",180,"^E","current-smallest"]]],"~i138",["^ ","~i8",[["^ ","^1B",0,"^1C",182],["^ ","^1B",22,"^1C",186],["^ ","^1B",65,"^1C",186],["^ ","^1B",118,"^1C",186],["^ ","^1B",185,"^1C",186],["^ ","^1B",249,"^1C",186],["^ ","^1B",0,"^1C",187]]],"~i140",["^ ","^2;",[["^ ","^1B",4,"^1C",182,"^E","head"]],"^1D",[["^ ","^1B",11,"^1C",182]],"^1E",[["^ ","^1B",11,"^1C",182,"^E","cljs.core/first"]],"^1N",[["^ ","^1B",27,"^1C",182,"^E","nodes"]]],"~i141",["^ ","^2;",[["^ ","^1B",4,"^1C",183,"^E","tail"]],"^1D",[["^ ","^1B",11,"^1C",183]],"^1E",[["^ ","^1B",11,"^1C",183,"^E","cljs.core/rest"]],"^2D",[["^ ","^1B",26,"^1C",183,"^E","nodes"]]],"~i142",["^ ","^2;",[["^ ","^1B",4,"^1C",184,"^E","result"]],"^1F",[["^ ","^1B",13,"^1C",184],["^ ","^1B",13,"^1C",184]],"^1J",[["^ ","^1B",100,"^1C",184]],"^1S",[["^ ","^1B",100,"^1C",184,"^E","clojure.test.check.rose-tree/root"]],"~i41",[["^ ","^1B",134,"^1C",184,"^E","head"]]],"~i143",["^ ","^2;",[["^ ","^1B",4,"^1C",185,"^E","args"]],"^1D",[["^ ","^1B",11,"^1C",185],["^ ","^1B",11,"^1C",185]],"^1N",[["^ ","^1B",94,"^1C",185]],"^1O",[["^ ","^1B",94,"^1C",185,"^E","clojure.test.check.rose-tree/root"]],"^1Z",[["^ ","^1B",128,"^1C",185,"^E","head"]]],"~i144",["^ ","^2;",[["^ ","^1B",4,"^1C",186,"^E","shrink-step-map"]]],"~i145",["^ ","^2O",[["^ ","^1B",242,"^1C",186,"^E","result"]]],"~i146",["^ ","^1Z",[["^ ","^1B",302,"^1C",186,"^E","args"]]],"~i147",["^ ","^1H",[["^ ","^1B",0,"^1C",187]],"^2;",[["^ ","^1B",20,"^1C",187]],"^2?",[["^ ","^1B",20,"^1C",187,"^E","clojure.test.check.results/passing?"]],"^1T",[["^ ","^1B",62,"^1C",187,"^E","result"]]],"~i149",["^ ","^1P",[["^ ","^1B",0,"^1C",188]]],"~i150",["^ ","^2;",[["^ ","^1B",0,"^1C",188],["^ ","^1B",4,"^1C",188,"^E","G__19246"],["^ ","^1B",0,"^1C",189],["^ ","^1B",0,"^1C",189],["^ ","^1B",87,"^1C",189,"^E","G__19246"],["^ ","^1B",127,"^1C",189,"^E","G__19246"]],"^2?",[["^ ","^1B",1,"^1C",189,"^E","reporter-fn"],["^ ","^1B",45,"^1C",189,"^E","reporter-fn"],["^ ","^1B",105,"^1C",189,"^E","reporter-fn"]],"^1O",[["^ ","^1B",21,"^1C",188],["^ ","^1B",140,"^1C",188],["^ ","^1B",183,"^1C",188],["^ ","^1B",238,"^1C",188],["^ ","^1B",243,"^1C",188]],"^1Q",[["^ ","^1B",21,"^1C",188,"^E","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1U",[["^ ","^1B",124,"^1C",188,"^E","shrink-step-map"]]],"~i151",["^ ","~i69",[["^ ","^1B",320,"^1C",188,"^E","current-smallest"]]],"~i152",["^ ","^2;",[["^ ","^1B",0,"^1C",191]],"^1F",[["^ ","^1B",15,"^1C",191,"^E","tail"]],"^1N",[["^ ","^1B",15,"^1C",192,"^E","current-smallest"]],"~i43",[["^ ","^1B",15,"^1C",193],["^ ","^1B",38,"^1C",193]],"~i48",[["^ ","^1B",16,"^1C",193,"^E","total-nodes-visited"]],"^3I",[["^ ","^1B",15,"^1C",194,"^E","depth"]]],"~i157",["^ ","^1P",[["^ ","^1B",0,"^1C",201],["^ ","^1B",0,"^1C",202]],"^25",[["^ ","^1B",4,"^1C",201,"^E","new-smallest"]],"^1S",[["^ ","^1B",19,"^1C",201]],"^1T",[["^ ","^1B",19,"^1C",201,"^E","clojure.test.check.rose-tree/root"]],"^26",[["^ ","^1B",53,"^1C",201,"^E","head"]]],"~i158",["^ ","^2;",[["^ ","^1B",0,"^1C",202],["^ ","^1B",4,"^1C",202,"^E","G__19247"],["^ ","^1B",0,"^1C",203],["^ ","^1B",0,"^1C",203],["^ ","^1B",87,"^1C",203,"^E","G__19247"],["^ ","^1B",127,"^1C",203,"^E","G__19247"]],"^2?",[["^ ","^1B",1,"^1C",203,"^E","reporter-fn"],["^ ","^1B",45,"^1C",203,"^E","reporter-fn"],["^ ","^1B",105,"^1C",203,"^E","reporter-fn"]],"^1O",[["^ ","^1B",21,"^1C",202],["^ ","^1B",140,"^1C",202],["^ ","^1B",183,"^1C",202],["^ ","^1B",238,"^1C",202],["^ ","^1B",244,"^1C",202]],"^1Q",[["^ ","^1B",21,"^1C",202,"^E","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1U",[["^ ","^1B",124,"^1C",202,"^E","shrink-step-map"]]],"~i159",["^ ","^3I",[["^ ","^1B",321,"^1C",202,"^E","new-smallest"]]],"~i160",["^ ","^2;",[["^ ","^1B",0,"^1C",205],["^ ","^1B",4,"^1C",205,"^E","temp__5455__auto__"],["^ ","^1B",0,"^1C",206],["^ ","^1B",0,"^1C",206],["^ ","^1B",3,"^1C",206,"^E","temp__5455__auto__"],["^ ","^1B",0,"^1C",207],["^ ","^1B",15,"^1C",207,"^E","temp__5455__auto__"],["^ ","^1B",0,"^1C",208]],"^1K",[["^ ","^1B",4,"^1C",207,"^E","children"]],"^1T",[["^ ","^1B",25,"^1C",205]],"~i33",[["^ ","^1B",25,"^1C",205,"^E","cljs.core/seq"]],"^1Z",[["^ ","^1B",39,"^1C",205]],"^2L",[["^ ","^1B",39,"^1C",205,"^E","clojure.test.check.rose-tree/children"]],"~i52",[["^ ","^1B",77,"^1C",205,"^E","head"]]],"~i161",["^ ","^2W",[["^ ","^1B",0,"^1C",208]],"^1K",[["^ ","^1B",15,"^1C",208,"^E","children"]],"^1T",[["^ ","^1B",15,"^1C",209,"^E","new-smallest"]],"^3:",[["^ ","^1B",15,"^1C",210],["^ ","^1B",38,"^1C",210]],"^2=",[["^ ","^1B",16,"^1C",210,"^E","total-nodes-visited"]],"^2S",[["^ ","^1B",15,"^1C",211],["^ ","^1B",24,"^1C",211]],"~i76",[["^ ","^1B",16,"^1C",211,"^E","depth"]]],"~i162",["^ ","^2W",[["^ ","^1B",0,"^1C",218]],"^1K",[["^ ","^1B",15,"^1C",218,"^E","tail"]],"^1Q",[["^ ","^1B",15,"^1C",219,"^E","new-smallest"]],"^3@",[["^ ","^1B",15,"^1C",220],["^ ","^1B",38,"^1C",220]],"^1[",[["^ ","^1B",16,"^1C",220,"^E","total-nodes-visited"]],"~i67",[["^ ","^1B",15,"^1C",221,"^E","depth"]]],"~i164",["^ ","~i0",[["^ ","^1B",0,"^1C",233],["^ ","^1B",29,"^1C",233],["^ ","^1B",0,"^1C",234]],"~i7",[["^ ","^1B",0,"^1C",233,"^E","clojure.test.check/failure"]]],"~i165",["^ ","~i3",[["^ ","^1B",66,"^1C",233,"^E","property"]],"^1P",[["^ ","^1B",75,"^1C",233,"^E","failing-rose-tree"]],"^1J",[["^ ","^1B",93,"^1C",233,"^E","trial-number"]],"^3K",[["^ ","^1B",106,"^1C",233,"^E","size"]],"^3L",[["^ ","^1B",111,"^1C",233,"^E","seed"]],"^2B",[["^ ","^1B",116,"^1C",233,"^E","reporter-fn"]]],"~i166",["^ ","~i2",[["^ ","^1B",0,"^1C",234],["^ ","^1B",0,"^1C",237]],"~i8",[["^ ","^1B",4,"^1C",234,"^E","root"]],"^1Y",[["^ ","^1B",11,"^1C",234]],"^2;",[["^ ","^1B",11,"^1C",234,"^E","clojure.test.check.rose-tree/root"]],"^1L",[["^ ","^1B",45,"^1C",234,"^E","failing-rose-tree"]]],"~i167",["^ ","~i8",[["^ ","^1B",4,"^1C",235,"^E","result"]],"^2?",[["^ ","^1B",13,"^1C",235],["^ ","^1B",13,"^1C",235]],"^1L",[["^ ","^1B",100,"^1C",235,"^E","root"]]],"~i168",["^ ","~i8",[["^ ","^1B",4,"^1C",236,"^E","failing-args"]],"^1F",[["^ ","^1B",19,"^1C",236],["^ ","^1B",19,"^1C",236]],"^1Q",[["^ ","^1B",102,"^1C",236,"^E","root"]]],"~i170",["^ ","~i4",[["^ ","^1B",0,"^1C",237],["^ ","^1B",4,"^1C",237,"^E","G__19263"],["^ ","^1B",21,"^1C",237],["^ ","^1B",64,"^1C",237],["^ ","^1B",117,"^1C",237],["^ ","^1B",175,"^1C",237],["^ ","^1B",246,"^1C",237],["^ ","^1B",353,"^1C",237],["^ ","^1B",468,"^1C",237],["^ ","^1B",550,"^1C",237],["^ ","^1B",0,"^1C",238],["^ ","^1B",0,"^1C",238],["^ ","^1B",87,"^1C",238,"^E","G__19263"],["^ ","^1B",127,"^1C",238,"^E","G__19263"]],"~i5",[["^ ","^1B",1,"^1C",238,"^E","reporter-fn"],["^ ","^1B",45,"^1C",238,"^E","reporter-fn"],["^ ","^1B",105,"^1C",238,"^E","reporter-fn"]]],"~i171",["^ ","^1Q",[["^ ","^1B",237,"^1C",237,"^E","property"]]],"~i172",["^ ","^1N",[["^ ","^1B",303,"^1C",237]],"^1O",[["^ ","^1B",303,"^1C",237,"^E","clojure.test.check.results/passing?"]],"^1V",[["^ ","^1B",345,"^1C",237,"^E","result"]]],"~i173",["^ ","^1S",[["^ ","^1B",421,"^1C",237]],"^1T",[["^ ","^1B",421,"^1C",237,"^E","clojure.test.check.results/result-data"]],"^3R",[["^ ","^1B",460,"^1C",237,"^E","result"]]],"~i174",["^ ","^1T",[["^ ","^1B",537,"^1C",237,"^E","trial-number"]]],"~i175",["^ ","^1T",[["^ ","^1B",619,"^1C",237,"^E","failing-args"]]],"~i177",["^ ","~i4",[["^ ","^1B",0,"^1C",240],["^ ","^1B",0,"^1C",246],["^ ","^1B",0,"^1C",249],["^ ","^1B",50,"^1C",249],["^ ","^1B",157,"^1C",249],["^ ","^1B",272,"^1C",249],["^ ","^1B",328,"^1C",249],["^ ","^1B",402,"^1C",249],["^ ","^1B",478,"^1C",249],["^ ","^1B",559,"^1C",249]],"^1H",[["^ ","^1B",4,"^1C",240,"^E","shrunk"]],"^1A",[["^ ","^1B",13,"^1C",240],["^ ","^1B",62,"^1C",240],["^ ","^1B",18,"^1C",241,"^E","p1__19262#"],["^ ","^1B",0,"^1C",242]],"^25",[["^ ","^1B",13,"^1C",240,"^E","clojure.test.check/shrink-loop"]],"^1J",[["^ ","^1B",44,"^1C",240,"^E","failing-rose-tree"]]],"~i178",["^ ","^1S",[["^ ","^1B",0,"^1C",242],["^ ","^1B",4,"^1C",242,"^E","G__19264"],["^ ","^1B",0,"^1C",243],["^ ","^1B",0,"^1C",243],["^ ","^1B",94,"^1C",243,"^E","G__19264"],["^ ","^1B",128,"^1C",243,"^E","G__19264"]],"^1T",[["^ ","^1B",8,"^1C",243,"^E","reporter-fn"],["^ ","^1B",52,"^1C",243,"^E","reporter-fn"],["^ ","^1B",106,"^1C",243,"^E","reporter-fn"]],"^1V",[["^ ","^1B",15,"^1C",242],["^ ","^1B",61,"^1C",242,"^E","p1__19262#"],["^ ","^1B",78,"^1C",242]],"^3:",[["^ ","^1B",15,"^1C",242,"^E","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"~i63",[["^ ","^1B",140,"^1C",242,"^E","property"]]],"~i179",["^ ","~i6",[["^ ","^1B",0,"^1C",246],["^ ","^1B",4,"^1C",246,"^E","G__19265"],["^ ","^1B",21,"^1C",246],["^ ","^1B",64,"^1C",246],["^ ","^1B",117,"^1C",246],["^ ","^1B",175,"^1C",246],["^ ","^1B",246,"^1C",246],["^ ","^1B",328,"^1C",246],["^ ","^1B",410,"^1C",246],["^ ","^1B",0,"^1C",247],["^ ","^1B",0,"^1C",247],["^ ","^1B",87,"^1C",247,"^E","G__19265"],["^ ","^1B",127,"^1C",247,"^E","G__19265"]],"~i7",[["^ ","^1B",1,"^1C",247,"^E","reporter-fn"],["^ ","^1B",45,"^1C",247,"^E","reporter-fn"],["^ ","^1B",105,"^1C",247,"^E","reporter-fn"]]],"~i180",["^ ","^1J",[["^ ","^1B",237,"^1C",246,"^E","property"]]],"~i181",["^ ","^1U",[["^ ","^1B",315,"^1C",246,"^E","trial-number"]]],"~i182",["^ ","^1U",[["^ ","^1B",397,"^1C",246,"^E","failing-args"]]],"~i183",["^ ","^1Q",[["^ ","^1B",468,"^1C",246,"^E","shrunk"]]],"~i184",["^ ","^2?",[["^ ","^1B",107,"^1C",249]],"^2W",[["^ ","^1B",107,"^1C",249,"^E","clojure.test.check.results/passing?"]],"^3Q",[["^ ","^1B",149,"^1C",249,"^E","result"]]],"~i185",["^ ","^1E",[["^ ","^1B",225,"^1C",249]],"^1F",[["^ ","^1B",225,"^1C",249,"^E","clojure.test.check.results/result-data"]],"^3@",[["^ ","^1B",264,"^1C",249,"^E","result"]]],"~i186",["^ ","^1Y",[["^ ","^1B",323,"^1C",249,"^E","seed"]]],"~i187",["^ ","^1F",[["^ ","^1B",397,"^1C",249,"^E","size"]]],"~i188",["^ ","^25",[["^ ","^1B",465,"^1C",249,"^E","trial-number"]]],"~i189",["^ ","^1Y",[["^ ","^1B",531,"^1C",249]],"^2;",[["^ ","^1B",531,"^1C",249,"^E","cljs.core/vec"]],"^25",[["^ ","^1B",545,"^1C",249,"^E","failing-args"]]],"~i190",["^ ","^2?",[["^ ","^1B",617,"^1C",249,"^E","shrunk"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^P"],[1534380137000],["^19","goog/math/math.js"],[1530991559994,"^R","~$goog.array","~$goog.asserts"],["^19","goog/array/array.js"],[1530991559994,"^R","^4J"],["^19","clojure/test/check/generators.cljc"],[1535586405418,"^R","^P","^T","^M","~$goog.string","~$clojure.string"],["^19","goog/debug/error.js"],[1530991559994,"^R"],["^19","clojure/test/check/random/doubles.cljs"],[1535586405418,"^R","^P","~$clojure.test.check.random.longs"],["^19","goog/dom/nodetype.js"],[1530991559994,"^R"],["^19","clojure/test/check/rose_tree.cljc"],[1535586405418,"^R","^P"],["^19","clojure/test/check/impl.cljc"],[1535586405418,"^R","^P"],["^19","clojure/test/check/random.cljs"],[1535586405418,"^R","^P","~$clojure.test.check.random.doubles","^4M"],["^19","goog/object/object.js"],[1530991559994,"^R"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^19","goog/math/long.js"],[1530991559994,"^R","^4J","~$goog.reflect"],["^19","clojure/test/check.cljc"],[1535586405418,"^R","^P","^Q","^T","^K","^M","^O"],["^19","goog/functions/functions.js"],[1530991559994,"^R"],["^19","goog/structs/map.js"],[1530991559994,"^R","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^19","goog/asserts/asserts.js"],[1530991559994,"^R","~$goog.debug.Error","~$goog.dom.NodeType","^4K"],["^19","goog/uri/uri.js"],[1530991559994,"^R","^4I","^4J","^4K","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^19","goog/base.js"],[1530991559994],["^19","goog/structs/structs.js"],[1530991559994,"^R","^4I","^4S"],["^19","clojure/string.cljs"],[1534380137690,"^R","^P","^4K","~$goog.string.StringBuffer"],["^19","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^R","^P"],["^19","goog/string/string.js"],[1530991559994,"^R"],["^19","goog/reflect/reflect.js"],[1530991559994,"^R"],["^19","goog/string/stringbuffer.js"],[1530991559994,"^R"],["^19","goog/iter/iter.js"],[1530991559994,"^R","^4I","^4J","~$goog.functions","~$goog.math"],["^19","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^4K","^4S","^4I","~$goog.Uri","^4["],["^19","clojure/test/check/random/longs.cljs"],[1535586405418,"^R","^P","~$clojure.test.check.random.longs.bit-count-impl","^52"],["^19","goog/math/integer.js"],[1530991559994,"^R"],["^19","goog/uri/utils.js"],[1530991559994,"^R","^4I","^4J","^4K"],["^19","clojure/test/check/results.cljc"],[1535586405418,"^R","^P"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check.cljc","^7",10,"^8",5,"^9",10,"^:",23],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^M","^N","^K","^O","^O","^M","^M","^P","^P","^Q","^Q","^R","^R","^S","^Q","^T","^T","^U","^T"],"^V",["^D",["^W"]],"^X",["^ ","^Y","^O","^Z","^O"],"~:defs",["^ ","~$shrink-loop",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",117,"^8",8,"^9",117,"^:",19,"~:private",true,"~:arglists",["^11",["~$quote",["^11",[["~$rose-tree","~$reporter-fn"]]]]],"~:doc","Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step."],"^5:",true,"^E","~$clojure.test.check/shrink-loop","~:variadic",false,"^6","clojure/test/check.cljc","^:",19,"~:method-params",["^11",[["^5=","^5>"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^8",1,"^7",117,"^9",117,"~:max-fixed-arity",2,"~:fn-var",true,"^5;",["^11",["^5<",["^11",[["^5=","^5>"]]]]],"^5?","Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step."],"~$failure",["^ ","^59",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",165,"^8",8,"^9",165,"^:",15,"^5:",true,"^5;",["^11",["^5<",["^11",[["~$property","~$failing-rose-tree","~$trial-number","~$size","~$seed","^5>"]]]]]],"^5:",true,"^E","~$clojure.test.check/failure","^5A",false,"^6","clojure/test/check.cljc","^:",15,"^5B",["^11",[["^5H","^5I","^5J","^5K","^5L","^5>"]]],"^5C",null,"^5D",["^11",[null,null]],"^8",1,"^7",165,"^9",165,"^5E",6,"^5F",true,"^5;",["^11",["^5<",["^11",[["^5H","^5I","^5J","^5K","^5L","^5>"]]]]]],"~$make-rng",["^ ","^59",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",20,"^8",8,"^9",20,"^:",16,"^5:",true,"^5;",["^11",["^5<",["^11",[["^5L"]]]]]],"^5:",true,"^E","~$clojure.test.check/make-rng","^5A",false,"^6","clojure/test/check.cljc","^:",16,"^5B",["^11",[["^5L"]]],"^5C",null,"^5D",["^11",[null,null]],"^8",1,"^7",20,"^9",20,"^5E",1,"^5F",true,"^5;",["^11",["^5<",["^11",[["^5L"]]]]]],"~$complete",["^ ","^59",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",27,"^8",8,"^9",27,"^:",16,"^5:",true,"^5;",["^11",["^5<",["^11",[["^5H","~$num-trials","^5L","^5>"]]]]]],"^5:",true,"^E","~$clojure.test.check/complete","^5A",false,"^6","clojure/test/check.cljc","^:",16,"^5B",["^11",[["^5H","^5Q","^5L","^5>"]]],"^5C",null,"^5D",["^11",[null,null]],"^8",1,"^7",27,"^9",27,"^5E",4,"^5F",true,"^5;",["^11",["^5<",["^11",[["^5H","^5Q","^5L","^5>"]]]]]],"~$quick-check",["^ ","^59",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",37,"^8",7,"^9",37,"^:",18,"^5;",["^11",["^5<",["^11",[["~$num-tests","^5H","~$&",["^ ","~:keys",["^5L","~$max-size","^5>"],"~:or",["^ ","^5V",200,"^5>",["^11",["~$constantly",null]]]]]]]]],"^5?","Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \"Uh oh...\"))))","~:top-fn",["^ ","^5A",true,"^5E",2,"^5B",[["^11",["^5T","^5H",["^ ","^5U",["^5L","^5V","^5>"],"^5W",["^ ","^5V",200,"^5>",["^11",["^5X",null]]]]]]],"^5;",["^11",[["^5T","^5H","~$&",["^ ","^5U",["^5L","^5V","^5>"],"^5W",["^ ","^5V",200,"^5>",["^11",["^5X",null]]]]]]],"^5D",["^11",[null]]]],"^E","~$clojure.test.check/quick-check","^5A",true,"^6","clojure/test/check.cljc","^:",18,"^5Y",["^ ","^5A",true,"^5E",2,"^5B",[["^11",["^5T","^5H",["^ ","^5U",["^5L","^5V","^5>"],"^5W",["^ ","^5V",200,"^5>",["^11",["^5X",null]]]]]]],"^5;",["^11",[["^5T","^5H","~$&",["^ ","^5U",["^5L","^5V","^5>"],"^5W",["^ ","^5V",200,"^5>",["^11",["^5X",null]]]]]]],"^5D",["^11",[null]]],"^5B",[["^11",["^5T","^5H",["^ ","^5U",["^5L","^5V","^5>"],"^5W",["^ ","^5V",200,"^5>",["^11",["^5X",null]]]]]]],"^5C",null,"^5D",["^11",[null]],"^8",1,"^7",37,"^9",37,"^5E",2,"^5F",true,"^5;",["^11",[["^5T","^5H","~$&",["^ ","^5U",["^5L","^5V","^5>"],"^5W",["^ ","^5V",200,"^5>",["^11",["^5X",null]]]]]]],"^5?","Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type      :trial\n       :property  #<...>\n       :so-far    <number of tests run so far>\n       :num-tests <total number of tests>}\n\n      ;; called after each failing trial\n      {:type         :failure\n       :property     #<...>\n       :result       ...\n       :trial-number <tests ran before failure found>\n       :failing-args [...]}\n\n    It will also be called on :complete, :shrink-step and :shrunk.\n\n  Examples:\n\n      (def p (for-all [a gen/pos-int] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \"Uh oh...\"))))"],"~$smallest-shrink",["^ ","^59",null,"^5",["^ ","^6","clojure/test/check.cljc","^7",108,"^8",8,"^9",108,"^:",23,"^5:",true,"^5;",["^11",["^5<",["^11",[["~$total-nodes-visited","~$depth","~$smallest"]]]]]],"^5:",true,"^E","~$clojure.test.check/smallest-shrink","^5A",false,"^6","clojure/test/check.cljc","^:",23,"^5B",["^11",[["^60","^61","^62"]]],"^5C",null,"^5D",["^11",[null,null]],"^8",1,"^7",108,"^9",108,"^5E",3,"^5F",true,"^5;",["^11",["^5<",["^11",[["^60","^61","^62"]]]]]]],"^[",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^V",["^D",["~:args","~:shrunk","~:total-nodes-visited","~:failure","~:property","~:shrink-step","~:num-tests","~:type","~:max-size","~:seed","~:trial-number","~:fail","~:result","~:result-data","~:smallest","~:trial","~:failing-size","~:reporter-fn","~:pass?","~:depth","~:complete","~:current-smallest","~:failing-args","~:so-far"]],"~:order",["^6<","^69","^6A","^6;","^6>","^6I","^6=","^6F","^65","^6L","^6D","^67","^6H","^6B","^6C","^6:","^6G","^6J","^6?","^6K","^68","^66","^6E","^6@"]],"^15",["^ ","^W",["^D",[]]],"^16",["^ "],"^17",["^R","^P","^Q","^T","^K","^M","^O"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^4G",[["^6P","~:static-fns"],true,["^6P","~:elide-asserts"],false,["^6P","~:optimize-constants"],null,["^6P","~:external-config"],null,["^6P","~:tooling-config"],null,["^6P","~:emit-constants"],null,["^6P","~:infer-externs"],true,["^6P","^1>"],null,["~:js-options","~:js-provider"],"^W",["~:mode"],"~:dev",["^6P","~:fn-invoke-direct"],null,["^6P","^1@"],"/dev/null"]]]