["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs.bit_count_impl');\ngoog.require('cljs.core');\nclojure.test.check.random.longs.bit_count_impl.lookup = (function (){var arr = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];\n(arr[(0)] = (0));\n\nvar n__4408__auto___15871 = (256);\nvar i_15872 = (0);\nwhile(true){\nif((i_15872 < n__4408__auto___15871)){\n(arr[i_15872] = ((arr[(i_15872 >> (1))]) + (i_15872 & (1))));\n\nvar G__15873 = (i_15872 + (1));\ni_15872 = G__15873;\ncontinue;\n} else {\n}\nbreak;\n}\n\nreturn arr;\n})();\n/**\n * Returns a JS number (not a Long), the number of set bits in the\n *   given Long.\n */\nclojure.test.check.random.longs.bit_count_impl.bit_count = (function clojure$test$check$random$longs$bit_count_impl$bit_count(x){\nvar low = x.low_;\nvar high = x.high_;\nreturn ((((((((clojure.test.check.random.longs.bit_count_impl.lookup[(low & (255))]) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((low >> (24)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[(high & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (8)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (16)) & (255))])) + (clojure.test.check.random.longs.bit_count_impl.lookup[((high >> (24)) & (255))]));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs/bit_count_impl.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",48,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count"]],"~:name","~$clojure.test.check.random.longs.bit-count-impl","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^M","~$goog","^N"],"~:seen",["^E",[]],"~:uses",null,"~:require-macros",["^ ","^M","^M"],"~:form",["~#list",["~$ns","^H",["^S",["~:refer-clojure","~:exclude",["^F"]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^N","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs/bit_count_impl.cljs"],"~:compiled-at",1537320654409,"~:resource-name","clojure/test/check/random/longs/bit_count_impl.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.longs.bit-count-impl\n  (:refer-clojure :exclude [bit-count]))\n\n;; Had to put this in a separate namespace because the + doesn't get\n;; inlined if it's called as (core/+ ...). This might change in future\n;; CLJS versions?\n\n(def ^:private lookup\n  (let [arr (make-array 256)]\n    (aset arr 0 0)\n    (dotimes [i 256]\n      (aset arr i (+ (aget arr (bit-shift-right i 1))\n                     (bit-and i 1))))\n    arr))\n\n(defn bit-count\n  \"Returns a JS number (not a Long), the number of set bits in the\n  given Long.\"\n  [x]\n  (let [low (.-low_ x)\n        high (.-high_ x)]\n    (+ (aget lookup (-> low  (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> low  (bit-shift-right 24) (bit-and 255)))\n       (aget lookup (-> high (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 8) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 16) (bit-and 255)))\n       (aget lookup (-> high (bit-shift-right 24) (bit-and 255))))))\n","~:reader-features",["^E",["~:cljs"]],"~:source-map",["^ ","~i17",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2]],"~i15",[["^ ","^18",0,"^19",2,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]]],"~i18",["^ ","~i2",[["^ ","^18",56,"^19",2],["^ ","^18",0,"^19",3]],"~i8",[["^ ","^18",73,"^19",2,"^G","arr"]],"~i12",[["^ ","^18",79,"^19",2],["^ ","^18",80,"^19",2],["^ ","^18",85,"^19",2],["^ ","^18",90,"^19",2],["^ ","^18",95,"^19",2],["^ ","^18",100,"^19",2],["^ ","^18",105,"^19",2],["^ ","^18",110,"^19",2],["^ ","^18",115,"^19",2],["^ ","^18",120,"^19",2],["^ ","^18",125,"^19",2],["^ ","^18",130,"^19",2],["^ ","^18",135,"^19",2],["^ ","^18",140,"^19",2],["^ ","^18",145,"^19",2],["^ ","^18",150,"^19",2],["^ ","^18",155,"^19",2],["^ ","^18",160,"^19",2],["^ ","^18",165,"^19",2],["^ ","^18",170,"^19",2],["^ ","^18",175,"^19",2],["^ ","^18",180,"^19",2],["^ ","^18",185,"^19",2],["^ ","^18",190,"^19",2],["^ ","^18",195,"^19",2],["^ ","^18",200,"^19",2],["^ ","^18",205,"^19",2],["^ ","^18",210,"^19",2],["^ ","^18",215,"^19",2],["^ ","^18",220,"^19",2],["^ ","^18",225,"^19",2],["^ ","^18",230,"^19",2],["^ ","^18",235,"^19",2],["^ ","^18",240,"^19",2],["^ ","^18",245,"^19",2],["^ ","^18",250,"^19",2],["^ ","^18",255,"^19",2],["^ ","^18",260,"^19",2],["^ ","^18",265,"^19",2],["^ ","^18",270,"^19",2],["^ ","^18",275,"^19",2],["^ ","^18",280,"^19",2],["^ ","^18",285,"^19",2],["^ ","^18",290,"^19",2],["^ ","^18",295,"^19",2],["^ ","^18",300,"^19",2],["^ ","^18",305,"^19",2],["^ ","^18",310,"^19",2],["^ ","^18",315,"^19",2],["^ ","^18",320,"^19",2],["^ ","^18",325,"^19",2],["^ ","^18",330,"^19",2],["^ ","^18",335,"^19",2],["^ ","^18",340,"^19",2],["^ ","^18",345,"^19",2],["^ ","^18",350,"^19",2],["^ ","^18",355,"^19",2],["^ ","^18",360,"^19",2],["^ ","^18",365,"^19",2],["^ ","^18",370,"^19",2],["^ ","^18",375,"^19",2],["^ ","^18",380,"^19",2],["^ ","^18",385,"^19",2],["^ ","^18",390,"^19",2],["^ ","^18",395,"^19",2],["^ ","^18",400,"^19",2],["^ ","^18",405,"^19",2],["^ ","^18",410,"^19",2],["^ ","^18",415,"^19",2],["^ ","^18",420,"^19",2],["^ ","^18",425,"^19",2],["^ ","^18",430,"^19",2],["^ ","^18",435,"^19",2],["^ ","^18",440,"^19",2],["^ ","^18",445,"^19",2],["^ ","^18",450,"^19",2],["^ ","^18",455,"^19",2],["^ ","^18",460,"^19",2],["^ ","^18",465,"^19",2],["^ ","^18",470,"^19",2],["^ ","^18",475,"^19",2],["^ ","^18",480,"^19",2],["^ ","^18",485,"^19",2],["^ ","^18",490,"^19",2],["^ ","^18",495,"^19",2],["^ ","^18",500,"^19",2],["^ ","^18",505,"^19",2],["^ ","^18",510,"^19",2],["^ ","^18",515,"^19",2],["^ ","^18",520,"^19",2],["^ ","^18",525,"^19",2],["^ ","^18",530,"^19",2],["^ ","^18",535,"^19",2],["^ ","^18",540,"^19",2],["^ ","^18",545,"^19",2],["^ ","^18",550,"^19",2],["^ ","^18",555,"^19",2],["^ ","^18",560,"^19",2],["^ ","^18",565,"^19",2],["^ ","^18",570,"^19",2],["^ ","^18",575,"^19",2],["^ ","^18",580,"^19",2],["^ ","^18",585,"^19",2],["^ ","^18",590,"^19",2],["^ ","^18",595,"^19",2],["^ ","^18",600,"^19",2],["^ ","^18",605,"^19",2],["^ ","^18",610,"^19",2],["^ ","^18",615,"^19",2],["^ ","^18",620,"^19",2],["^ ","^18",625,"^19",2],["^ ","^18",630,"^19",2],["^ ","^18",635,"^19",2],["^ ","^18",640,"^19",2],["^ ","^18",645,"^19",2],["^ ","^18",650,"^19",2],["^ ","^18",655,"^19",2],["^ ","^18",660,"^19",2],["^ ","^18",665,"^19",2],["^ ","^18",670,"^19",2],["^ ","^18",675,"^19",2],["^ ","^18",680,"^19",2],["^ ","^18",685,"^19",2],["^ ","^18",690,"^19",2],["^ ","^18",695,"^19",2],["^ ","^18",700,"^19",2],["^ ","^18",705,"^19",2],["^ ","^18",710,"^19",2],["^ ","^18",715,"^19",2],["^ ","^18",720,"^19",2],["^ ","^18",725,"^19",2],["^ ","^18",730,"^19",2],["^ ","^18",735,"^19",2],["^ ","^18",740,"^19",2],["^ ","^18",745,"^19",2],["^ ","^18",750,"^19",2],["^ ","^18",755,"^19",2],["^ ","^18",760,"^19",2],["^ ","^18",765,"^19",2],["^ ","^18",770,"^19",2],["^ ","^18",775,"^19",2],["^ ","^18",780,"^19",2],["^ ","^18",785,"^19",2],["^ ","^18",790,"^19",2],["^ ","^18",795,"^19",2],["^ ","^18",800,"^19",2],["^ ","^18",805,"^19",2],["^ ","^18",810,"^19",2],["^ ","^18",815,"^19",2],["^ ","^18",820,"^19",2],["^ ","^18",825,"^19",2],["^ ","^18",830,"^19",2],["^ ","^18",835,"^19",2],["^ ","^18",840,"^19",2],["^ ","^18",845,"^19",2],["^ ","^18",850,"^19",2],["^ ","^18",855,"^19",2],["^ ","^18",860,"^19",2],["^ ","^18",865,"^19",2],["^ ","^18",870,"^19",2],["^ ","^18",875,"^19",2],["^ ","^18",880,"^19",2],["^ ","^18",885,"^19",2],["^ ","^18",890,"^19",2],["^ ","^18",895,"^19",2],["^ ","^18",900,"^19",2],["^ ","^18",905,"^19",2],["^ ","^18",910,"^19",2],["^ ","^18",915,"^19",2],["^ ","^18",920,"^19",2],["^ ","^18",925,"^19",2],["^ ","^18",930,"^19",2],["^ ","^18",935,"^19",2],["^ ","^18",940,"^19",2],["^ ","^18",945,"^19",2],["^ ","^18",950,"^19",2],["^ ","^18",955,"^19",2],["^ ","^18",960,"^19",2],["^ ","^18",965,"^19",2],["^ ","^18",970,"^19",2],["^ ","^18",975,"^19",2],["^ ","^18",980,"^19",2],["^ ","^18",985,"^19",2],["^ ","^18",990,"^19",2],["^ ","^18",995,"^19",2],["^ ","^18",1000,"^19",2],["^ ","^18",1005,"^19",2],["^ ","^18",1010,"^19",2],["^ ","^18",1015,"^19",2],["^ ","^18",1020,"^19",2],["^ ","^18",1025,"^19",2],["^ ","^18",1030,"^19",2],["^ ","^18",1035,"^19",2],["^ ","^18",1040,"^19",2],["^ ","^18",1045,"^19",2],["^ ","^18",1050,"^19",2],["^ ","^18",1055,"^19",2],["^ ","^18",1060,"^19",2],["^ ","^18",1065,"^19",2],["^ ","^18",1070,"^19",2],["^ ","^18",1075,"^19",2],["^ ","^18",1080,"^19",2],["^ ","^18",1085,"^19",2],["^ ","^18",1090,"^19",2],["^ ","^18",1095,"^19",2],["^ ","^18",1100,"^19",2],["^ ","^18",1105,"^19",2],["^ ","^18",1110,"^19",2],["^ ","^18",1115,"^19",2],["^ ","^18",1120,"^19",2],["^ ","^18",1125,"^19",2],["^ ","^18",1130,"^19",2],["^ ","^18",1135,"^19",2],["^ ","^18",1140,"^19",2],["^ ","^18",1145,"^19",2],["^ ","^18",1150,"^19",2],["^ ","^18",1155,"^19",2],["^ ","^18",1160,"^19",2],["^ ","^18",1165,"^19",2],["^ ","^18",1170,"^19",2],["^ ","^18",1175,"^19",2],["^ ","^18",1180,"^19",2],["^ ","^18",1185,"^19",2],["^ ","^18",1190,"^19",2],["^ ","^18",1195,"^19",2],["^ ","^18",1200,"^19",2],["^ ","^18",1205,"^19",2],["^ ","^18",1210,"^19",2],["^ ","^18",1215,"^19",2],["^ ","^18",1220,"^19",2],["^ ","^18",1225,"^19",2],["^ ","^18",1230,"^19",2],["^ ","^18",1235,"^19",2],["^ ","^18",1240,"^19",2],["^ ","^18",1245,"^19",2],["^ ","^18",1250,"^19",2],["^ ","^18",1255,"^19",2],["^ ","^18",1260,"^19",2],["^ ","^18",1265,"^19",2],["^ ","^18",1270,"^19",2],["^ ","^18",1275,"^19",2],["^ ","^18",1280,"^19",2],["^ ","^18",1285,"^19",2],["^ ","^18",1290,"^19",2],["^ ","^18",1295,"^19",2],["^ ","^18",1300,"^19",2],["^ ","^18",1305,"^19",2],["^ ","^18",1310,"^19",2],["^ ","^18",1315,"^19",2],["^ ","^18",1320,"^19",2],["^ ","^18",1325,"^19",2],["^ ","^18",1330,"^19",2],["^ ","^18",1335,"^19",2],["^ ","^18",1340,"^19",2],["^ ","^18",1345,"^19",2],["^ ","^18",1350,"^19",2],["^ ","^18",1355,"^19",2]]],"~i19",["^ ","~i4",[["^ ","^18",0,"^19",3],["^ ","^18",5,"^19",3],["^ ","^18",12,"^19",3]],"~i10",[["^ ","^18",1,"^19",3,"^G","arr"]]],"~i20",["^ ","~i4",[["^ ","^18",0,"^19",5],["^ ","^18",4,"^19",5,"^G","n__4408__auto__"],["^ ","^18",28,"^19",5],["^ ","^18",0,"^19",6],["^ ","^18",0,"^19",6],["^ ","^18",14,"^19",6],["^ ","^18",0,"^19",8],["^ ","^18",0,"^19",8],["^ ","^18",3,"^19",8],["^ ","^18",14,"^19",8,"^G","n__4408__auto__"],["^ ","^18",0,"^19",9],["^ ","^18",0,"^19",11],["^ ","^18",15,"^19",11],["^ ","^18",26,"^19",11],["^ ","^18",0,"^19",15]],"~i14",[["^ ","^18",4,"^19",6,"^G","i"],["^ ","^18",4,"^19",8,"^G","i"],["^ ","^18",16,"^19",11,"^G","i"]]],"~i21",["^ ","~i6",[["^ ","^18",0,"^19",9]],"^1<",[["^ ","^18",1,"^19",9,"^G","arr"]],"~i16",[["^ ","^18",5,"^19",9,"^G","i"]],"^1;",[["^ ","^18",16,"^19",9]],"^1A",[["^ ","^18",17,"^19",9]],"~i27",[["^ ","^18",18,"^19",9,"^G","arr"]],"~i31",[["^ ","^18",22,"^19",9],["^ ","^18",34,"^19",9]],"~i48",[["^ ","^18",23,"^19",9,"^G","i"]]],"~i22",["^ ","^1A",[["^ ","^18",43,"^19",9],["^ ","^18",54,"^19",9]],"~i30",[["^ ","^18",44,"^19",9,"^G","i"]]],"~i23",["^ ","~i4",[["^ ","^18",0,"^19",19,"^G","arr"]]],"~i25",["^ ","~i0",[["^ ","^18",0,"^19",21],["^ ","^18",59,"^19",25],["^ ","^18",0,"^19",26]],"~i6",[["^ ","^18",0,"^19",25,"^G","clojure.test.check.random.longs.bit-count-impl/bit-count"]]],"~i28",["^ ","~i3",[["^ ","^18",126,"^19",25,"^G","x"]]],"~i29",["^ ","~i2",[["^ ","^18",0,"^19",26],["^ ","^18",0,"^19",28]],"~i8",[["^ ","^18",4,"^19",26,"^G","low"]],"^1<",[["^ ","^18",10,"^19",26]],"^1?",[["^ ","^18",10,"^19",26,"^G","x"]]],"^1G",["^ ","~i8",[["^ ","^18",4,"^19",27,"^G","high"]],"~i13",[["^ ","^18",11,"^19",27]],"^1F",[["^ ","^18",11,"^19",27,"^G","x"]]],"^1D",["^ ","~i4",[["^ ","^18",0,"^19",28],["^ ","^18",8,"^19",28],["^ ","^18",9,"^19",28],["^ ","^18",10,"^19",28],["^ ","^18",11,"^19",28],["^ ","^18",12,"^19",28],["^ ","^18",13,"^19",28]],"~i7",[["^ ","^18",14,"^19",28]],"^1L",[["^ ","^18",15,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"~i24",[["^ ","^18",70,"^19",28,"^G","low"]],"^1K",[["^ ","^18",69,"^19",28],["^ ","^18",76,"^19",28]]],"~i32",["^ ","~i7",[["^ ","^18",87,"^19",28]],"^1L",[["^ ","^18",88,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",144,"^19",28,"^G","low"]],"^1K",[["^ ","^18",143,"^19",28],["^ ","^18",151,"^19",28]],"~i49",[["^ ","^18",142,"^19",28],["^ ","^18",158,"^19",28]]],"~i33",["^ ","~i7",[["^ ","^18",170,"^19",28]],"^1L",[["^ ","^18",171,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",227,"^19",28,"^G","low"]],"^1K",[["^ ","^18",226,"^19",28],["^ ","^18",234,"^19",28]],"~i50",[["^ ","^18",225,"^19",28],["^ ","^18",242,"^19",28]]],"~i34",["^ ","~i7",[["^ ","^18",254,"^19",28]],"^1L",[["^ ","^18",255,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",311,"^19",28,"^G","low"]],"^1K",[["^ ","^18",310,"^19",28],["^ ","^18",318,"^19",28]],"^1Q",[["^ ","^18",309,"^19",28],["^ ","^18",326,"^19",28]]],"~i35",["^ ","~i7",[["^ ","^18",338,"^19",28]],"^1L",[["^ ","^18",339,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",394,"^19",28,"^G","high"]],"^1K",[["^ ","^18",393,"^19",28],["^ ","^18",401,"^19",28]]],"~i36",["^ ","~i7",[["^ ","^18",413,"^19",28]],"^1L",[["^ ","^18",414,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",470,"^19",28,"^G","high"]],"^1K",[["^ ","^18",469,"^19",28],["^ ","^18",478,"^19",28]],"^1O",[["^ ","^18",468,"^19",28],["^ ","^18",485,"^19",28]]],"~i37",["^ ","~i7",[["^ ","^18",497,"^19",28]],"^1L",[["^ ","^18",498,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",554,"^19",28,"^G","high"]],"^1K",[["^ ","^18",553,"^19",28],["^ ","^18",562,"^19",28]],"^1Q",[["^ ","^18",552,"^19",28],["^ ","^18",570,"^19",28]]],"~i38",["^ ","~i7",[["^ ","^18",582,"^19",28]],"^1L",[["^ ","^18",583,"^19",28,"^G","clojure.test.check.random.longs.bit-count-impl/lookup"]],"^1M",[["^ ","^18",639,"^19",28,"^G","high"]],"^1K",[["^ ","^18",638,"^19",28],["^ ","^18",647,"^19",28]],"^1Q",[["^ ","^18",637,"^19",28],["^ ","^18",655,"^19",28]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^M"],[1534380137000],["^[","goog/math/math.js"],[1530991559994,"^N","~$goog.array","~$goog.asserts"],["^[","goog/array/array.js"],[1530991559994,"^N","^20"],["^[","goog/debug/error.js"],[1530991559994,"^N"],["^[","goog/dom/nodetype.js"],[1530991559994,"^N"],["^[","goog/object/object.js"],[1530991559994,"^N"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^[","goog/math/long.js"],[1530991559994,"^N","^20","~$goog.reflect"],["^[","goog/functions/functions.js"],[1530991559994,"^N"],["^[","goog/structs/map.js"],[1530991559994,"^N","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^[","goog/asserts/asserts.js"],[1530991559994,"^N","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^[","goog/uri/uri.js"],[1530991559994,"^N","^1[","^20","^28","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^[","goog/base.js"],[1530991559994],["^[","goog/structs/structs.js"],[1530991559994,"^N","^1[","^25"],["^[","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^N","^M"],["^[","goog/string/string.js"],[1530991559994,"^N"],["^[","goog/reflect/reflect.js"],[1530991559994,"^N"],["^[","goog/string/stringbuffer.js"],[1530991559994,"^N"],["^[","goog/iter/iter.js"],[1530991559994,"^N","^1[","^20","~$goog.functions","~$goog.math"],["^[","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^28","^25","^1[","~$goog.Uri","~$goog.string.StringBuffer"],["^[","goog/math/integer.js"],[1530991559994,"^N"],["^[","goog/uri/utils.js"],[1530991559994,"^N","^1[","^20","^28"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",11,"^8",2,"^9",11,"^:",48,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",["^F"]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N"],"^O",["^E",[]],"^P",null,"~:defs",["^ ","~$lookup",["^ ","^G","~$clojure.test.check.random.longs.bit-count-impl/lookup","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",1,"^9",18,"^:",22,"~:private",true,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",18,"^8",16,"^9",18,"^:",22,"^2H",true],"~:tag","~$array"],"^F",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs/bit_count_impl.cljs","^7",26,"^8",7,"^9",26,"^:",16,"~:arglists",["^S",["~$quote",["^S",[["~$x"]]]]],"~:doc","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"^G","~$clojure.test.check.random.longs.bit-count-impl/bit-count","~:variadic",false,"^6","clojure/test/check/random/longs/bit_count_impl.cljs","^:",16,"~:method-params",["^S",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^8",1,"^7",26,"^9",26,"~:max-fixed-arity",1,"~:fn-var",true,"^2L",["^S",["^2M",["^S",[["~$x"]]]]],"^2N","Returns a JS number (not a Long), the number of set bits in the\n  given Long."]],"^Q",["^ ","^M","^M"],"^W",["^ "],"^X",["^ "],"^Y",["^N","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1Y",[["^2X","~:static-fns"],true,["^2X","~:elide-asserts"],false,["^2X","~:optimize-constants"],null,["^2X","~:external-config"],null,["^2X","~:tooling-config"],null,["^2X","~:emit-constants"],null,["^2X","~:infer-externs"],true,["^2X","^14"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^2X","~:fn-invoke-direct"],null,["^2X","^16"],"/dev/null"]]]