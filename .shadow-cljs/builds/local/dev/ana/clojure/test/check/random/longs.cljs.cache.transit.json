["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.longs');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.longs.bit_count_impl');\ngoog.require('goog.math.Long');\nclojure.test.check.random.longs.unsigned_bit_shift_right = (function clojure$test$check$random$longs$unsigned_bit_shift_right(x,n){\nreturn x.shiftRightUnsigned(n);\n});\nclojure.test.check.random.longs._PLUS_ = (function clojure$test$check$random$longs$_PLUS_(x,y){\nreturn x.add(y);\n});\nclojure.test.check.random.longs._STAR_ = (function clojure$test$check$random$longs$_STAR_(x,y){\nreturn x.multiply(y);\n});\nclojure.test.check.random.longs.bit_xor = (function clojure$test$check$random$longs$bit_xor(x,y){\nreturn x.xor(y);\n});\nclojure.test.check.random.longs.bit_or = (function clojure$test$check$random$longs$bit_or(x,y){\nreturn x.or(y);\n});\nclojure.test.check.random.longs.from_string = (function clojure$test$check$random$longs$from_string(s,radix){\nreturn goog.math.Long.fromString(s,radix);\n});\nclojure.test.check.random.longs.from_number = (function clojure$test$check$random$longs$from_number(x){\nreturn goog.math.Long.fromNumber(x);\n});\n/**\n * Coerces to long, or returns nil if not possible.\n */\nclojure.test.check.random.longs.__GT_long = (function clojure$test$check$random$longs$__GT_long(x){\nif(typeof x === 'number'){\nreturn goog.math.Long.fromNumber(x);\n} else {\nif((x instanceof goog.math.Long)){\nreturn x;\n} else {\nreturn null;\n}\n}\n});\nclojure.test.check.random.longs.ONE = goog.math.Long.getOne();\nclojure.test.check.random.longs.bit_count = clojure.test.check.random.longs.bit_count_impl.bit_count;\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/longs.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",33,"~:author","Gary Fredericks","~:doc","Internal namespace, wrapping some goog.math.Long functionality."],"~:ns-aliases",["^ ","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random.longs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.longs.bit-count-impl","^Q","^G","^Q","~$goog.math.Long","^R","~$long","^R","~$cljs.core","^T","~$goog","^U"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^L",["^[",["~:refer-clojure","~:exclude",["~$+","~$*","^H","^J","^G","^I"]]],["^[",["^W",["^Q","~:as","^G"],["^R","^13","^S"]]]]],"~:flags",["^ ","^W",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^Q","^R"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/longs.cljs"],"~:compiled-at",1537320655131,"~:resource-name","clojure/test/check/random/longs.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Internal namespace, wrapping some goog.math.Long functionality.\"}\n clojure.test.check.random.longs\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.longs.bit-count-impl :as bit-count]\n            [goog.math.Long :as long]))\n\n(defn unsigned-bit-shift-right\n  [x n]\n  (.shiftRightUnsigned x n))\n\n(defn +\n  [x y]\n  (.add x y))\n\n(defn *\n  [x y]\n  (.multiply x y))\n\n(defn bit-xor\n  [x y]\n  (.xor x y))\n\n(defn bit-or\n  [x y]\n  (.or x y))\n\n(defn from-string\n  [s radix]\n  (long/fromString s radix))\n\n(defn from-number\n  [x]\n  (long/fromNumber x))\n\n(defn ->long\n  \"Coerces to long, or returns nil if not possible.\"\n  [x]\n  (cond (number? x)\n        (long/fromNumber x)\n\n        (instance? goog.math.Long x)\n        x))\n\n(def ONE (long/getOne))\n\n(def bit-count bit-count/bit-count)\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i17",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",4],["^ ","^1A",59,"^1B",4],["^ ","^1A",0,"^1B",5]],"~i6",[["^ ","^1A",0,"^1B",4,"^K","clojure.test.check.random.longs/unsigned-bit-shift-right"]]],"~i18",["^ ","~i3",[["^ ","^1A",126,"^1B",4,"^K","x"]],"~i5",[["^ ","^1A",128,"^1B",4,"^K","n"]]],"~i19",["^ ","~i2",[["^ ","^1A",0,"^1B",5]],"~i23",[["^ ","^1A",7,"^1B",5,"^K","x"]],"~i25",[["^ ","^1A",28,"^1B",5,"^K","n"]]],"~i21",["^ ","~i0",[["^ ","^1A",0,"^1B",7],["^ ","^1A",41,"^1B",7],["^ ","^1A",0,"^1B",8]],"~i6",[["^ ","^1A",0,"^1B",7,"^K","clojure.test.check.random.longs/+"]]],"~i22",["^ ","~i3",[["^ ","^1A",90,"^1B",7,"^K","x"]],"~i5",[["^ ","^1A",92,"^1B",7,"^K","y"]]],"^1E",["^ ","~i2",[["^ ","^1A",0,"^1B",8]],"~i8",[["^ ","^1A",7,"^1B",8,"^K","x"]],"~i10",[["^ ","^1A",13,"^1B",8,"^K","y"]]],"^1F",["^ ","~i0",[["^ ","^1A",0,"^1B",10],["^ ","^1A",41,"^1B",10],["^ ","^1A",0,"^1B",11]],"~i6",[["^ ","^1A",0,"^1B",10,"^K","clojure.test.check.random.longs/*"]]],"~i26",["^ ","~i3",[["^ ","^1A",90,"^1B",10,"^K","x"]],"~i5",[["^ ","^1A",92,"^1B",10,"^K","y"]]],"~i27",["^ ","~i2",[["^ ","^1A",0,"^1B",11]],"~i13",[["^ ","^1A",7,"^1B",11,"^K","x"]],"~i15",[["^ ","^1A",18,"^1B",11,"^K","y"]]],"~i29",["^ ","~i0",[["^ ","^1A",0,"^1B",13],["^ ","^1A",42,"^1B",13],["^ ","^1A",0,"^1B",14]],"~i6",[["^ ","^1A",0,"^1B",13,"^K","clojure.test.check.random.longs/bit-xor"]]],"~i30",["^ ","~i3",[["^ ","^1A",92,"^1B",13,"^K","x"]],"~i5",[["^ ","^1A",94,"^1B",13,"^K","y"]]],"~i31",["^ ","~i2",[["^ ","^1A",0,"^1B",14]],"~i8",[["^ ","^1A",7,"^1B",14,"^K","x"]],"^1I",[["^ ","^1A",13,"^1B",14,"^K","y"]]],"~i33",["^ ","~i0",[["^ ","^1A",0,"^1B",16],["^ ","^1A",41,"^1B",16],["^ ","^1A",0,"^1B",17]],"~i6",[["^ ","^1A",0,"^1B",16,"^K","clojure.test.check.random.longs/bit-or"]]],"~i34",["^ ","~i3",[["^ ","^1A",90,"^1B",16,"^K","x"]],"~i5",[["^ ","^1A",92,"^1B",16,"^K","y"]]],"~i35",["^ ","~i2",[["^ ","^1A",0,"^1B",17]],"~i7",[["^ ","^1A",7,"^1B",17,"^K","x"]],"~i9",[["^ ","^1A",12,"^1B",17,"^K","y"]]],"~i37",["^ ","~i0",[["^ ","^1A",0,"^1B",19],["^ ","^1A",46,"^1B",19],["^ ","^1A",0,"^1B",20]],"~i6",[["^ ","^1A",0,"^1B",19,"^K","clojure.test.check.random.longs/from-string"]]],"~i38",["^ ","~i3",[["^ ","^1A",100,"^1B",19,"^K","s"]],"~i5",[["^ ","^1A",102,"^1B",19,"^K","radix"]]],"~i39",["^ ","~i2",[["^ ","^1A",0,"^1B",20]],"~i3",[["^ ","^1A",7,"^1B",20,"^K","goog.math.Long/fromString"]],"^1D",[["^ ","^1A",33,"^1B",20,"^K","s"]],"^1G",[["^ ","^1A",35,"^1B",20,"^K","radix"]]],"~i41",["^ ","~i0",[["^ ","^1A",0,"^1B",22],["^ ","^1A",46,"^1B",22],["^ ","^1A",0,"^1B",23]],"~i6",[["^ ","^1A",0,"^1B",22,"^K","clojure.test.check.random.longs/from-number"]]],"~i42",["^ ","~i3",[["^ ","^1A",100,"^1B",22,"^K","x"]]],"~i43",["^ ","~i2",[["^ ","^1A",0,"^1B",23]],"~i3",[["^ ","^1A",7,"^1B",23,"^K","goog.math.Long/fromNumber"]],"^1D",[["^ ","^1A",33,"^1B",23,"^K","x"]]],"~i45",["^ ","~i0",[["^ ","^1A",0,"^1B",25],["^ ","^1A",44,"^1B",28],["^ ","^1A",0,"^1B",29]],"~i6",[["^ ","^1A",0,"^1B",28,"^K","clojure.test.check.random.longs/->long"]]],"~i47",["^ ","~i3",[["^ ","^1A",96,"^1B",28,"^K","x"]]],"~i48",["^ ","~i2",[["^ ","^1A",0,"^1B",29],["^ ","^1A",0,"^1B",32],["^ ","^1A",0,"^1B",35]],"~i8",[["^ ","^1A",3,"^1B",29]],"^1@",[["^ ","^1A",10,"^1B",29,"^K","x"]]],"~i49",["^ ","~i8",[["^ ","^1A",0,"^1B",30]],"~i9",[["^ ","^1A",7,"^1B",30,"^K","goog.math.Long/fromNumber"]],"^1F",[["^ ","^1A",33,"^1B",30,"^K","x"]]],"~i51",["^ ","~i8",[["^ ","^1A",3,"^1B",32]],"^1D",[["^ ","^1A",17,"^1B",32,"^K","goog/math.Long"]],"^1R",[["^ ","^1A",4,"^1B",32,"^K","x"]]],"~i52",["^ ","~i8",[["^ ","^1A",0,"^1B",33,"^K","x"]]],"~i54",["^ ","~i0",[["^ ","^1A",0,"^1B",39]],"~i5",[["^ ","^1A",0,"^1B",39,"^K","clojure.test.check.random.longs/ONE"]],"~i9",[["^ ","^1A",38,"^1B",39]],"^1I",[["^ ","^1A",38,"^1B",39,"^K","goog.math.Long/getOne"]]],"~i56",["^ ","~i0",[["^ ","^1A",0,"^1B",40]],"~i5",[["^ ","^1A",0,"^1B",40,"^K","clojure.test.check.random.longs/bit-count"]],"^1M",[["^ ","^1A",44,"^1B",40,"^K","clojure.test.check.random.longs.bit-count-impl/bit-count"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^T"],[1534380137000],["^18","goog/math/math.js"],[1530991559994,"^U","~$goog.array","~$goog.asserts"],["^18","goog/array/array.js"],[1530991559994,"^U","^2;"],["^18","goog/debug/error.js"],[1530991559994,"^U"],["^18","goog/dom/nodetype.js"],[1530991559994,"^U"],["^18","goog/object/object.js"],[1530991559994,"^U"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^18","goog/math/long.js"],[1530991559994,"^U","^2;","~$goog.reflect"],["^18","goog/functions/functions.js"],[1530991559994,"^U"],["^18","goog/structs/map.js"],[1530991559994,"^U","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^18","goog/asserts/asserts.js"],[1530991559994,"^U","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^18","goog/uri/uri.js"],[1530991559994,"^U","^2:","^2;","^2C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^18","goog/base.js"],[1530991559994],["^18","goog/structs/structs.js"],[1530991559994,"^U","^2:","^2@"],["^18","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^U","^T"],["^18","goog/string/string.js"],[1530991559994,"^U"],["^18","goog/reflect/reflect.js"],[1530991559994,"^U"],["^18","goog/string/stringbuffer.js"],[1530991559994,"^U"],["^18","goog/iter/iter.js"],[1530991559994,"^U","^2:","^2;","~$goog.functions","~$goog.math"],["^18","cljs/core.cljs"],[1534380137690,"^R","~$goog.math.Integer","^2C","^2@","^2:","~$goog.Uri","~$goog.string.StringBuffer"],["^18","clojure/test/check/random/longs.cljs"],[1535586405418,"^U","^T","^Q","^R"],["^18","goog/math/integer.js"],[1530991559994,"^U"],["^18","goog/uri/utils.js"],[1530991559994,"^U","^2:","^2;","^2C"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",12,"^8",2,"^9",12,"^:",33,"^;","Gary Fredericks","^<","Internal namespace, wrapping some goog.math.Long functionality."],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",["^G","^H","^I","~$*","^J","~$+"]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^G","^Q","^R","^R","^S","^R","^T","^T","^U","^U"],"^V",["^F",["^W"]],"^X",null,"~:defs",["^ ","~$from-number",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",42,"^8",7,"^9",42,"^:",18,"~:arglists",["^[",["~$quote",["^[",[["~$x"]]]]]],"^K","~$clojure.test.check.random.longs/from-number","~:variadic",false,"^6","clojure/test/check/random/longs.cljs","^:",18,"~:method-params",["^[",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^8",1,"^7",42,"^9",42,"~:max-fixed-arity",1,"~:fn-var",true,"^2R",["^[",["^2S",["^[",[["~$x"]]]]]],"^G",["^ ","^K","~$clojure.test.check.random.longs/bit-count","^6","clojure/test/check/random/longs.cljs","^7",57,"^8",1,"^9",57,"^:",15,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",57,"^8",6,"^9",57,"^:",15]],"^H",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",30,"^8",7,"^9",30,"^:",14,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"^K","~$clojure.test.check.random.longs/bit-xor","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",14,"^2V",["^[",[["~$x","~$y"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",30,"^9",30,"^2Y",2,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"^I",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",18,"^8",7,"^9",18,"^:",31,"^2R",["^[",["^2S",["^[",[["~$x","~$n"]]]]]],"^K","~$clojure.test.check.random.longs/unsigned-bit-shift-right","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",31,"^2V",["^[",[["~$x","~$n"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",18,"^9",18,"^2Y",2,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$x","~$n"]]]]]],"~$*",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",26,"^8",7,"^9",26,"^:",8,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"^K","~$clojure.test.check.random.longs/*","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",8,"^2V",["^[",[["~$x","~$y"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",26,"^9",26,"^2Y",2,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"~$from-string",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",38,"^8",7,"^9",38,"^:",18,"^2R",["^[",["^2S",["^[",[["~$s","~$radix"]]]]]],"^K","~$clojure.test.check.random.longs/from-string","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",18,"^2V",["^[",[["~$s","^34"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",38,"^9",38,"^2Y",2,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$s","^34"]]]]]],"~$->long",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",46,"^8",7,"^9",46,"^:",13,"^2R",["^[",["^2S",["^[",[["~$x"]]]]],"^<","Coerces to long, or returns nil if not possible."],"^K","~$clojure.test.check.random.longs/->long","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",13,"^2V",["^[",[["~$x"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",46,"^9",46,"^2Y",1,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$x"]]]]],"^<","Coerces to long, or returns nil if not possible."],"^J",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",34,"^8",7,"^9",34,"^:",13,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"^K","~$clojure.test.check.random.longs/bit-or","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",13,"^2V",["^[",[["~$x","~$y"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",34,"^9",34,"^2Y",2,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"~$ONE",["^ ","^K","~$clojure.test.check.random.longs/ONE","^6","clojure/test/check/random/longs.cljs","^7",55,"^8",1,"^9",55,"^:",9,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",55,"^8",6,"^9",55,"^:",9],"~:tag","~$any"],"~$+",["^ ","^2Q",null,"^5",["^ ","^6","clojure/test/check/random/longs.cljs","^7",22,"^8",7,"^9",22,"^:",8,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]],"^K","~$clojure.test.check.random.longs/+","^2U",false,"^6","clojure/test/check/random/longs.cljs","^:",8,"^2V",["^[",[["~$x","~$y"]]],"^2W",null,"^2X",["^[",[null,null]],"^8",1,"^7",22,"^9",22,"^2Y",2,"^2Z",true,"^2R",["^[",["^2S",["^[",[["~$x","~$y"]]]]]]],"^Y",["^ ","^T","^T"],"^14",["^ ","^W",["^F",[]]],"^15",["^ "],"^16",["^U","^T","^Q","^R"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^28",[["^3@","~:static-fns"],true,["^3@","~:elide-asserts"],false,["^3@","~:optimize-constants"],null,["^3@","~:external-config"],null,["^3@","~:tooling-config"],null,["^3@","~:emit-constants"],null,["^3@","~:infer-externs"],true,["^3@","^1="],null,["~:js-options","~:js-provider"],"^W",["~:mode"],"~:dev",["^3@","~:fn-invoke-direct"],null,["^3@","^1?"],"/dev/null"]]]