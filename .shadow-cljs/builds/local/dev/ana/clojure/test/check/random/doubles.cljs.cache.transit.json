["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random.doubles');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.longs');\nclojure.test.check.random.doubles.double_unit = (function (){var i = (53);\nvar x = (1);\nwhile(true){\nif((i === (0))){\nreturn x;\n} else {\nvar G__18718 = (i - (1));\nvar G__18719 = (x / (2));\ni = G__18718;\nx = G__18719;\ncontinue;\n}\nbreak;\n}\n})();\nclojure.test.check.random.doubles.big_double_unit = (clojure.test.check.random.doubles.double_unit * (4294967296));\n/**\n * Given a uniformly distributed random long, returns a uniformly\n *   distributed double between 0.0 (inclusive) and 1.0 (exclusive).\n */\nclojure.test.check.random.doubles.rand_long__GT_rand_double = (function clojure$test$check$random$doubles$rand_long__GT_rand_double(long$){\nvar x = clojure.test.check.random.longs.unsigned_bit_shift_right(long$,(11));\nvar low_bits = x.getLowBitsUnsigned();\nvar high_bits = x.getHighBits();\nreturn ((clojure.test.check.random.doubles.double_unit * low_bits) + (clojure.test.check.random.doubles.big_double_unit * high_bits));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random/doubles.cljs","~:line",11,"~:column",2,"~:end-line",11,"~:end-column",35,"~:author","Gary Fredericks"],"~:ns-aliases",["^ ","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.test.check.random.doubles","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.longs","^L","~$longs","^L","~$cljs.core","^N","~$goog","^O"],"~:seen",["^E",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^G",["^U",["^Q",["^L","~:as","^M"]]]]],"~:flags",["^ ","^Q",["^E",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^L"]],"^I","^G","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random/doubles.cljs"],"~:compiled-at",1537320655440,"~:resource-name","clojure/test/check/random/doubles.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"}\n clojure.test.check.random.doubles\n  (:require [clojure.test.check.random.longs :as longs]))\n\n(def ^:private double-unit\n  (loop [i 53 x 1]\n    (if (zero? i)\n      x\n      (recur (dec i) (/ x 2)))))\n\n(def ^:private big-double-unit\n  ;; (* double-unit 0x100000000)\n  (* double-unit 4294967296))\n\n(defn rand-long->rand-double\n  \"Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive).\"\n  [long]\n  (let [x (longs/unsigned-bit-shift-right long 11)\n        low-bits (.getLowBitsUnsigned x)\n        high-bits (.getHighBits x)]\n    (+ (* double-unit low-bits)\n       (* big-double-unit high-bits))))\n","~:reader-features",["^E",["~:cljs"]],"~:source-map",["^ ","~i13",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",3]],"~i15",[["^ ","^19",0,"^1:",3,"^F","clojure.test.check.random.doubles/double-unit"]]],"~i14",["^ ","~i2",[["^ ","^19",48,"^1:",3],["^ ","^19",69,"^1:",3],["^ ","^19",8,"^1:",4],["^ ","^19",0,"^1:",6]],"~i9",[["^ ","^19",65,"^1:",3,"^F","i"]],"^1<",[["^ ","^19",4,"^1:",4,"^F","x"]]],"^1;",["^ ","~i4",[["^ ","^19",0,"^1:",6]],"~i8",[["^ ","^19",3,"^1:",6],["^ ","^19",10,"^1:",6]],"^1;",[["^ ","^19",4,"^1:",6,"^F","i"]]],"~i16",["^ ","~i6",[["^ ","^19",0,"^1:",7,"^F","x"]]],"~i17",["^ ","~i6",[["^ ","^19",0,"^1:",9]],"^18",[["^ ","^19",15,"^1:",9],["^ ","^19",20,"^1:",9]],"~i18",[["^ ","^19",16,"^1:",9,"^F","i"]],"~i21",[["^ ","^19",15,"^1:",10],["^ ","^19",20,"^1:",10]],"~i24",[["^ ","^19",16,"^1:",10,"^F","x"]]],"~i19",["^ ","~i0",[["^ ","^19",0,"^1:",18]],"^1;",[["^ ","^19",0,"^1:",18,"^F","clojure.test.check.random.doubles/big-double-unit"]]],"^1@",["^ ","~i2",[["^ ","^19",52,"^1:",18],["^ ","^19",101,"^1:",18]],"~i5",[["^ ","^19",53,"^1:",18,"^F","clojure.test.check.random.doubles/double-unit"]]],"~i23",["^ ","~i0",[["^ ","^19",0,"^1:",19],["^ ","^19",62,"^1:",23],["^ ","^19",0,"^1:",24]],"~i6",[["^ ","^19",0,"^1:",23,"^F","clojure.test.check.random.doubles/rand-long->rand-double"]]],"~i26",["^ ","~i3",[["^ ","^19",132,"^1:",23,"^F","long"]]],"~i27",["^ ","~i2",[["^ ","^19",0,"^1:",24],["^ ","^19",0,"^1:",27]],"~i8",[["^ ","^19",4,"^1:",24,"^F","x"]],"~i10",[["^ ","^19",8,"^1:",24],["^ ","^19",71,"^1:",24]],"~i11",[["^ ","^19",8,"^1:",24,"^F","clojure.test.check.random.longs/unsigned-bit-shift-right"]],"~i42",[["^ ","^19",65,"^1:",24,"^F","long"]]],"~i28",["^ ","~i8",[["^ ","^19",4,"^1:",25,"^F","low-bits"]],"^1>",[["^ ","^19",15,"^1:",25]],"~i38",[["^ ","^19",15,"^1:",25,"^F","x"]]],"~i29",["^ ","~i8",[["^ ","^19",4,"^1:",26,"^F","high-bits"]],"^1?",[["^ ","^19",16,"^1:",26]],"~i32",[["^ ","^19",16,"^1:",26,"^F","x"]]],"~i30",["^ ","~i4",[["^ ","^19",0,"^1:",27]],"~i7",[["^ ","^19",8,"^1:",27]],"^1F",[["^ ","^19",9,"^1:",27,"^F","clojure.test.check.random.doubles/double-unit"]],"~i22",[["^ ","^19",57,"^1:",27,"^F","low-bits"]]],"~i31",["^ ","~i7",[["^ ","^19",69,"^1:",27]],"^1F",[["^ ","^19",70,"^1:",27,"^F","clojure.test.check.random.doubles/big-double-unit"]],"^1D",[["^ ","^19",122,"^1:",27,"^F","high-bits"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1534380137000],["^10","goog/math/math.js"],[1530991559994,"^O","~$goog.array","~$goog.asserts"],["^10","goog/array/array.js"],[1530991559994,"^O","^1U"],["^10","goog/debug/error.js"],[1530991559994,"^O"],["^10","clojure/test/check/random/doubles.cljs"],[1535586405418,"^O","^N","^L"],["^10","goog/dom/nodetype.js"],[1530991559994,"^O"],["^10","goog/object/object.js"],[1530991559994,"^O"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^10","goog/math/long.js"],[1530991559994,"^O","^1U","~$goog.reflect"],["^10","goog/functions/functions.js"],[1530991559994,"^O"],["^10","goog/structs/map.js"],[1530991559994,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^10","goog/asserts/asserts.js"],[1530991559994,"^O","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^10","goog/uri/uri.js"],[1530991559994,"^O","^1T","^1U","^21","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^10","goog/base.js"],[1530991559994],["^10","goog/structs/structs.js"],[1530991559994,"^O","^1T","^1Z"],["^10","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^O","^N"],["^10","goog/string/string.js"],[1530991559994,"^O"],["^10","goog/reflect/reflect.js"],[1530991559994,"^O"],["^10","goog/string/stringbuffer.js"],[1530991559994,"^O"],["^10","goog/iter/iter.js"],[1530991559994,"^O","^1T","^1U","~$goog.functions","~$goog.math"],["^10","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^21","^1Z","^1T","~$goog.Uri","~$goog.string.StringBuffer"],["^10","clojure/test/check/random/longs.cljs"],[1535586405418,"^O","^N","~$clojure.test.check.random.longs.bit-count-impl","^29"],["^10","goog/math/integer.js"],[1530991559994,"^O"],["^10","goog/uri/utils.js"],[1530991559994,"^O","^1T","^1U","^21"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",11,"^8",2,"^9",11,"^:",35,"^;","Gary Fredericks"],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^J",null,"^K",["^ ","^L","^L","^M","^L","^N","^N","^O","^O"],"^P",["^E",["^Q"]],"^R",null,"~:defs",["^ ","~$double-unit",["^ ","^F","~$clojure.test.check.random.doubles/double-unit","^6","clojure/test/check/random/doubles.cljs","^7",14,"^8",1,"^9",14,"^:",27,"~:private",true,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",14,"^8",16,"^9",14,"^:",27,"^2B",true],"~:tag","~$number"],"~$big-double-unit",["^ ","^F","~$clojure.test.check.random.doubles/big-double-unit","^6","clojure/test/check/random/doubles.cljs","^7",20,"^8",1,"^9",20,"^:",31,"^2B",true,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",20,"^8",16,"^9",20,"^:",31,"^2B",true],"^2C","^2D"],"~$rand-long->rand-double",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random/doubles.cljs","^7",24,"^8",7,"^9",24,"^:",29,"~:arglists",["^U",["~$quote",["^U",[["~$long"]]]]],"~:doc","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."],"^F","~$clojure.test.check.random.doubles/rand-long->rand-double","~:variadic",false,"^6","clojure/test/check/random/doubles.cljs","^:",29,"~:method-params",["^U",[["^2K"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^8",1,"^7",24,"^9",24,"~:max-fixed-arity",1,"~:fn-var",true,"^2I",["^U",["^2J",["^U",[["^2K"]]]]],"^2L","Given a uniformly distributed random long, returns a uniformly\n  distributed double between 0.0 (inclusive) and 1.0 (exclusive)."]],"^S",["^ ","^N","^N"],"^X",["^ ","^Q",["^E",[]]],"^Y",["^ "],"^Z",["^O","^N","^L"]],"^I","^G","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1R",[["^2V","~:static-fns"],true,["^2V","~:elide-asserts"],false,["^2V","~:optimize-constants"],null,["^2V","~:external-config"],null,["^2V","~:tooling-config"],null,["^2V","~:emit-constants"],null,["^2V","~:infer-externs"],true,["^2V","^15"],null,["~:js-options","~:js-provider"],"^Q",["~:mode"],"~:dev",["^2V","~:fn-invoke-direct"],null,["^2V","^17"],"/dev/null"]]]