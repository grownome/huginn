["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random');\ngoog.require('cljs.core');\ngoog.require('clojure.test.check.random.doubles');\ngoog.require('clojure.test.check.random.longs');\n\n/**\n * @interface\n */\nclojure.test.check.random.IRandom = function(){};\n\n/**\n * Returns a random goog.math.Long based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_long = (function clojure$test$check$random$rand_long(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$rand_long$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$rand_long$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.rand_long[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.rand_long[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-long\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n *   based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_double = (function clojure$test$check$random$rand_double(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$rand_double$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$rand_double$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.rand_double[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.rand_double[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-double\",rng);\n}\n}\n}\n});\n\n/**\n * Returns two new RNGs [rng1 rng2], which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split = (function clojure$test$check$random$split(rng){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$split$arity$1 == null))))){\nreturn rng.clojure$test$check$random$IRandom$split$arity$1(rng);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.split[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto__.call(null,rng));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.split[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$1(rng) : m__4244__auto____$1.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split\",rng);\n}\n}\n}\n});\n\n/**\n * Returns a collection of `n` RNGs, which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split_n = (function clojure$test$check$random$split_n(rng,n){\nif(((!((rng == null))) && (!((rng.clojure$test$check$random$IRandom$split_n$arity$2 == null))))){\nreturn rng.clojure$test$check$random$IRandom$split_n$arity$2(rng,n);\n} else {\nvar x__4243__auto__ = (((rng == null))?null:rng);\nvar m__4244__auto__ = (clojure.test.check.random.split_n[goog.typeOf(x__4243__auto__)]);\nif(!((m__4244__auto__ == null))){\nreturn (m__4244__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4244__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4244__auto__.call(null,rng,n));\n} else {\nvar m__4244__auto____$1 = (clojure.test.check.random.split_n[\"_\"]);\nif(!((m__4244__auto____$1 == null))){\nreturn (m__4244__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__4244__auto____$1.cljs$core$IFn$_invoke$arity$2(rng,n) : m__4244__auto____$1.call(null,rng,n));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split-n\",rng);\n}\n}\n}\n});\n\n/**\n * Helper for defining constants.\n */\nclojure.test.check.random.hex_long = (function clojure$test$check$random$hex_long(s){\nreturn clojure.test.check.random.longs.from_string(s,(16));\n});\n/**\n * Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\n */\nclojure.test.check.random.bxoubsr = (function clojure$test$check$random$bxoubsr(x,n){\nreturn clojure.test.check.random.longs.bit_xor(clojure.test.check.random.longs.unsigned_bit_shift_right(x,n),x);\n});\nclojure.test.check.random.mix_64_const_1 = clojure.test.check.random.hex_long(\"bf58476d1ce4e5b9\");\nclojure.test.check.random.mix_64_const_2 = clojure.test.check.random.hex_long(\"94d049bb133111eb\");\nclojure.test.check.random.mix_64 = (function clojure$test$check$random$mix_64(n){\nreturn clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(30)),clojure.test.check.random.mix_64_const_1),(27)),clojure.test.check.random.mix_64_const_2),(31));\n});\nclojure.test.check.random.mix_gamma_const_1 = clojure.test.check.random.hex_long(\"ff51afd7ed558ccd\");\nclojure.test.check.random.mix_gamma_const_2 = clojure.test.check.random.hex_long(\"c4ceb9fe1a85ec53\");\nclojure.test.check.random.mix_gamma_const_3 = clojure.test.check.random.hex_long(\"aaaaaaaaaaaaaaaa\");\nclojure.test.check.random.mix_gamma = (function clojure$test$check$random$mix_gamma(n){\nvar z = clojure.test.check.random.longs.bit_or(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(33)),clojure.test.check.random.mix_gamma_const_1),(33)),clojure.test.check.random.mix_gamma_const_2),(33)),clojure.test.check.random.longs.ONE);\nvar G__18745 = z;\nif(((24) > (function (){var G__18746 = clojure.test.check.random.bxoubsr(z,(1));\nreturn (clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1(G__18746) : clojure.test.check.random.longs.bit_count.call(null,G__18746));\n})())){\nreturn clojure.test.check.random.longs.bit_xor(G__18745,clojure.test.check.random.mix_gamma_const_3);\n} else {\nreturn G__18745;\n}\n});\n\n/**\n* @constructor\n * @implements {clojure.test.check.random.IRandom}\n*/\nclojure.test.check.random.JavaUtilSplittableRandom = (function (gamma,state){\nthis.gamma = gamma;\nthis.state = state;\n});\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$ = cljs.core.PROTOCOL_SENTINEL;\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_long$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn clojure.test.check.random.mix_64(clojure.test.check.random.longs._PLUS_(self__.state,self__.gamma));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_double$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn clojure.test.check.random.doubles.rand_long__GT_rand_double(this$__$1.clojure$test$check$random$IRandom$rand_long$arity$1(null));\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,self__.state);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state_SINGLEQUOTE__SINGLEQUOTE_)),(new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)))], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split_n$arity$2 = (function (this$,n){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__18762 = n;\nswitch (G__18762) {\ncase (0):\nreturn cljs.core.PersistentVector.EMPTY;\n\nbreak;\ncase (1):\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1], null);\n\nbreak;\ndefault:\nvar n_dec = (n - (1));\nvar state__$1 = self__.state;\nvar ret = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n_dec,cljs.core.count(ret))){\nreturn cljs.core.persistent_BANG_(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state__$1))));\n} else {\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state__$1);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nvar new_rng = (new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)));\nvar G__18768 = state_SINGLEQUOTE__SINGLEQUOTE_;\nvar G__18769 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,new_rng);\nstate__$1 = G__18768;\nret = G__18769;\ncontinue;\n}\nbreak;\n}\n\n}\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"gamma\",\"gamma\",-770466082,null),new cljs.core.Symbol(null,\"state\",\"state\",-348086572,null)], null);\n});\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$type = true;\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorStr = \"clojure.test.check.random/JavaUtilSplittableRandom\";\n\nclojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorPrWriter = (function (this__4192__auto__,writer__4193__auto__,opt__4194__auto__){\nreturn cljs.core._write(writer__4193__auto__,\"clojure.test.check.random/JavaUtilSplittableRandom\");\n});\n\n/**\n * Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom.\n */\nclojure.test.check.random.__GT_JavaUtilSplittableRandom = (function clojure$test$check$random$__GT_JavaUtilSplittableRandom(gamma,state){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(gamma,state));\n});\n\nclojure.test.check.random.golden_gamma = clojure.test.check.random.hex_long(\"9e3779b97f4a7c15\");\nclojure.test.check.random.make_java_util_splittable_random = (function clojure$test$check$random$make_java_util_splittable_random(seed){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(clojure.test.check.random.golden_gamma,(function (){var or__3949__auto__ = clojure.test.check.random.longs.__GT_long(seed);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Bad random seed!\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null));\n}\n})()));\n});\nclojure.test.check.random.next_rng = (function (){var a = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),clojure.test.check.random.make_java_util_splittable_random((new Date()).valueOf())], null));\nreturn ((function (a){\nreturn (function (){\nreturn new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,((function (a){\nreturn (function (p__18770){\nvar map__18771 = p__18770;\nvar map__18771__$1 = ((((!((map__18771 == null)))?(((((map__18771.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__18771.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__18771):map__18771);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__18771__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar vec__18773 = clojure.test.check.random.split(state);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18773,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__18773,(1),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),r1,new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163),r2], null);\n});})(a))\n));\n});\n;})(a))\n})();\n/**\n * Given an optional integer (or goog.math.Long) seed, returns an\n *   implementation of the IRandom protocol.\n */\nclojure.test.check.random.make_random = (function clojure$test$check$random$make_random(var_args){\nvar G__18777 = arguments.length;\nswitch (G__18777) {\ncase 0:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn (clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0 ? clojure.test.check.random.next_rng.cljs$core$IFn$_invoke$arity$0() : clojure.test.check.random.next_rng.call(null));\n});\n\nclojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1 = (function (seed){\nreturn clojure.test.check.random.make_java_util_splittable_random(seed);\n});\n\nclojure.test.check.random.make_random.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",27,"~:author","Gary Fredericks","~:doc","Purely functional and splittable pseudo-random number generators."],"~:ns-aliases",["^ ","~$systeminformation","~$shadow.js.shim.module$systeminformation","~$clojure.core.async","~$cljs.core.async","~$raspicam","~$shadow.js.shim.module$raspicam"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.doubles","^Q","~$doubles","^Q","~$clojure.test.check.random.longs","^S","~$longs","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$+","^S","~$*","^S","^H","^S","^J","^S","^G","^S","^I","^S"],"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^L",["^10",["~:refer-clojure","~:exclude",["~$+","~$*","^H","^J","^G","^I"]]],["^10",["^X",["^Q","~:as","^R"],["^S","^14","^T","~:refer",["~$+","~$*","^H","^J","^G","^I"]]]]]],"~:flags",["^ ","^X",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^Q","^S"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random.cljs"],"~:compiled-at",1537320655511,"~:resource-name","clojure/test/check/random.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i18",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",4],["^ ","^1C",0,"^1D",4],["^ ","^1C",0,"^1D",5],["^ ","^1C",36,"^1D",8],["^ ","^1C",0,"^1D",10],["^ ","^1C",38,"^1D",16],["^ ","^1C",0,"^1D",17],["^ ","^1C",0,"^1D",17],["^ ","^1C",3,"^1D",17],["^ ","^1C",5,"^1D",17],["^ ","^1C",7,"^1D",17],["^ ","^1C",15,"^1D",17],["^ ","^1C",27,"^1D",17],["^ ","^1C",29,"^1D",17],["^ ","^1C",30,"^1D",17],["^ ","^1C",89,"^1D",17],["^ ","^1C",0,"^1D",18],["^ ","^1C",0,"^1D",20],["^ ","^1C",4,"^1D",20,"^K","x__4243__auto__"],["^ ","^1C",22,"^1D",20],["^ ","^1C",24,"^1D",20],["^ ","^1C",32,"^1D",20],["^ ","^1C",39,"^1D",20],["^ ","^1C",4,"^1D",21,"^K","m__4244__auto__"],["^ ","^1C",22,"^1D",21],["^ ","^1C",23,"^1D",21,"^K","clojure/test.check.random.rand-long"],["^ ","^1C",59,"^1D",21],["^ ","^1C",59,"^1D",21,"^K","goog/typeOf"],["^ ","^1C",71,"^1D",21,"^K","x__4243__auto__"],["^ ","^1C",0,"^1D",22],["^ ","^1C",0,"^1D",22],["^ ","^1C",3,"^1D",22],["^ ","^1C",5,"^1D",22],["^ ","^1C",6,"^1D",22,"^K","m__4244__auto__"],["^ ","^1C",25,"^1D",22],["^ ","^1C",0,"^1D",23],["^ ","^1C",8,"^1D",23,"^K","m__4244__auto__"],["^ ","^1C",56,"^1D",23,"^K","m__4244__auto__"],["^ ","^1C",109,"^1D",23,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",25],["^ ","^1C",4,"^1D",25,"^K","m__4244__auto__"],["^ ","^1C",26,"^1D",25],["^ ","^1C",27,"^1D",25,"^K","clojure/test.check.random.rand-long"],["^ ","^1C",63,"^1D",25],["^ ","^1C",0,"^1D",26],["^ ","^1C",0,"^1D",26],["^ ","^1C",3,"^1D",26],["^ ","^1C",5,"^1D",26],["^ ","^1C",6,"^1D",26,"^K","m__4244__auto__"],["^ ","^1C",29,"^1D",26],["^ ","^1C",0,"^1D",27],["^ ","^1C",8,"^1D",27,"^K","m__4244__auto__"],["^ ","^1C",60,"^1D",27,"^K","m__4244__auto__"],["^ ","^1C",117,"^1D",27,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",29],["^ ","^1C",6,"^1D",29],["^ ","^1C",6,"^1D",29,"^K","cljs.core/missing-protocol"],["^ ","^1C",33,"^1D",29],["^ ","^1C",0,"^1D",35],["^ ","^1C",40,"^1D",42],["^ ","^1C",0,"^1D",43],["^ ","^1C",0,"^1D",43],["^ ","^1C",3,"^1D",43],["^ ","^1C",5,"^1D",43],["^ ","^1C",7,"^1D",43],["^ ","^1C",15,"^1D",43],["^ ","^1C",27,"^1D",43],["^ ","^1C",29,"^1D",43],["^ ","^1C",30,"^1D",43],["^ ","^1C",91,"^1D",43],["^ ","^1C",0,"^1D",44],["^ ","^1C",0,"^1D",46],["^ ","^1C",4,"^1D",46,"^K","x__4243__auto__"],["^ ","^1C",22,"^1D",46],["^ ","^1C",24,"^1D",46],["^ ","^1C",32,"^1D",46],["^ ","^1C",39,"^1D",46],["^ ","^1C",4,"^1D",47,"^K","m__4244__auto__"],["^ ","^1C",22,"^1D",47],["^ ","^1C",23,"^1D",47,"^K","clojure/test.check.random.rand-double"],["^ ","^1C",61,"^1D",47],["^ ","^1C",61,"^1D",47,"^K","goog/typeOf"],["^ ","^1C",73,"^1D",47,"^K","x__4243__auto__"],["^ ","^1C",0,"^1D",48],["^ ","^1C",0,"^1D",48],["^ ","^1C",3,"^1D",48],["^ ","^1C",5,"^1D",48],["^ ","^1C",6,"^1D",48,"^K","m__4244__auto__"],["^ ","^1C",25,"^1D",48],["^ ","^1C",0,"^1D",49],["^ ","^1C",8,"^1D",49,"^K","m__4244__auto__"],["^ ","^1C",56,"^1D",49,"^K","m__4244__auto__"],["^ ","^1C",109,"^1D",49,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",51],["^ ","^1C",4,"^1D",51,"^K","m__4244__auto__"],["^ ","^1C",26,"^1D",51],["^ ","^1C",27,"^1D",51,"^K","clojure/test.check.random.rand-double"],["^ ","^1C",65,"^1D",51],["^ ","^1C",0,"^1D",52],["^ ","^1C",0,"^1D",52],["^ ","^1C",3,"^1D",52],["^ ","^1C",5,"^1D",52],["^ ","^1C",6,"^1D",52,"^K","m__4244__auto__"],["^ ","^1C",29,"^1D",52],["^ ","^1C",0,"^1D",53],["^ ","^1C",8,"^1D",53,"^K","m__4244__auto__"],["^ ","^1C",60,"^1D",53,"^K","m__4244__auto__"],["^ ","^1C",117,"^1D",53,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",55],["^ ","^1C",6,"^1D",55],["^ ","^1C",6,"^1D",55,"^K","cljs.core/missing-protocol"],["^ ","^1C",33,"^1D",55],["^ ","^1C",0,"^1D",61],["^ ","^1C",34,"^1D",68],["^ ","^1C",0,"^1D",69],["^ ","^1C",0,"^1D",69],["^ ","^1C",3,"^1D",69],["^ ","^1C",5,"^1D",69],["^ ","^1C",7,"^1D",69],["^ ","^1C",15,"^1D",69],["^ ","^1C",27,"^1D",69],["^ ","^1C",29,"^1D",69],["^ ","^1C",30,"^1D",69],["^ ","^1C",85,"^1D",69],["^ ","^1C",0,"^1D",70],["^ ","^1C",0,"^1D",72],["^ ","^1C",4,"^1D",72,"^K","x__4243__auto__"],["^ ","^1C",22,"^1D",72],["^ ","^1C",24,"^1D",72],["^ ","^1C",32,"^1D",72],["^ ","^1C",39,"^1D",72],["^ ","^1C",4,"^1D",73,"^K","m__4244__auto__"],["^ ","^1C",22,"^1D",73],["^ ","^1C",23,"^1D",73,"^K","clojure/test.check.random.split"],["^ ","^1C",55,"^1D",73],["^ ","^1C",55,"^1D",73,"^K","goog/typeOf"],["^ ","^1C",67,"^1D",73,"^K","x__4243__auto__"],["^ ","^1C",0,"^1D",74],["^ ","^1C",0,"^1D",74],["^ ","^1C",3,"^1D",74],["^ ","^1C",5,"^1D",74],["^ ","^1C",6,"^1D",74,"^K","m__4244__auto__"],["^ ","^1C",25,"^1D",74],["^ ","^1C",0,"^1D",75],["^ ","^1C",8,"^1D",75,"^K","m__4244__auto__"],["^ ","^1C",56,"^1D",75,"^K","m__4244__auto__"],["^ ","^1C",109,"^1D",75,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",77],["^ ","^1C",4,"^1D",77,"^K","m__4244__auto__"],["^ ","^1C",26,"^1D",77],["^ ","^1C",27,"^1D",77,"^K","clojure/test.check.random.split"],["^ ","^1C",59,"^1D",77],["^ ","^1C",0,"^1D",78],["^ ","^1C",0,"^1D",78],["^ ","^1C",3,"^1D",78],["^ ","^1C",5,"^1D",78],["^ ","^1C",6,"^1D",78,"^K","m__4244__auto__"],["^ ","^1C",29,"^1D",78],["^ ","^1C",0,"^1D",79],["^ ","^1C",8,"^1D",79,"^K","m__4244__auto__"],["^ ","^1C",60,"^1D",79,"^K","m__4244__auto__"],["^ ","^1C",117,"^1D",79,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",81],["^ ","^1C",6,"^1D",81],["^ ","^1C",6,"^1D",81,"^K","cljs.core/missing-protocol"],["^ ","^1C",33,"^1D",81],["^ ","^1C",0,"^1D",87],["^ ","^1C",36,"^1D",94],["^ ","^1C",0,"^1D",95],["^ ","^1C",0,"^1D",95],["^ ","^1C",3,"^1D",95],["^ ","^1C",5,"^1D",95],["^ ","^1C",7,"^1D",95],["^ ","^1C",15,"^1D",95],["^ ","^1C",27,"^1D",95],["^ ","^1C",29,"^1D",95],["^ ","^1C",30,"^1D",95],["^ ","^1C",87,"^1D",95],["^ ","^1C",0,"^1D",96],["^ ","^1C",0,"^1D",98],["^ ","^1C",4,"^1D",98,"^K","x__4243__auto__"],["^ ","^1C",22,"^1D",98],["^ ","^1C",24,"^1D",98],["^ ","^1C",32,"^1D",98],["^ ","^1C",39,"^1D",98],["^ ","^1C",4,"^1D",99,"^K","m__4244__auto__"],["^ ","^1C",22,"^1D",99],["^ ","^1C",23,"^1D",99,"^K","clojure/test.check.random.split-n"],["^ ","^1C",57,"^1D",99],["^ ","^1C",57,"^1D",99,"^K","goog/typeOf"],["^ ","^1C",69,"^1D",99,"^K","x__4243__auto__"],["^ ","^1C",0,"^1D",100],["^ ","^1C",0,"^1D",100],["^ ","^1C",3,"^1D",100],["^ ","^1C",5,"^1D",100],["^ ","^1C",6,"^1D",100,"^K","m__4244__auto__"],["^ ","^1C",25,"^1D",100],["^ ","^1C",0,"^1D",101],["^ ","^1C",8,"^1D",101,"^K","m__4244__auto__"],["^ ","^1C",56,"^1D",101,"^K","m__4244__auto__"],["^ ","^1C",111,"^1D",101,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",103],["^ ","^1C",4,"^1D",103,"^K","m__4244__auto__"],["^ ","^1C",26,"^1D",103],["^ ","^1C",27,"^1D",103,"^K","clojure/test.check.random.split-n"],["^ ","^1C",61,"^1D",103],["^ ","^1C",0,"^1D",104],["^ ","^1C",0,"^1D",104],["^ ","^1C",3,"^1D",104],["^ ","^1C",5,"^1D",104],["^ ","^1C",6,"^1D",104,"^K","m__4244__auto__"],["^ ","^1C",29,"^1D",104],["^ ","^1C",0,"^1D",105],["^ ","^1C",8,"^1D",105,"^K","m__4244__auto__"],["^ ","^1C",60,"^1D",105,"^K","m__4244__auto__"],["^ ","^1C",119,"^1D",105,"^K","m__4244__auto__"],["^ ","^1C",0,"^1D",107],["^ ","^1C",6,"^1D",107],["^ ","^1C",6,"^1D",107,"^K","cljs.core/missing-protocol"],["^ ","^1C",33,"^1D",107],["^ ","^1C",0,"^1D",113]],"~i13",[["^ ","^1C",0,"^1D",8,"^K","clojure.test.check.random/IRandom"]]],"~i19",["^ ","~i3",[["^ ","^1C",0,"^1D",16,"^K","clojure.test.check.random/rand-long"]],"~i14",[["^ ","^1C",84,"^1D",16,"^K","rng"],["^ ","^1C",8,"^1D",17,"^K","rng"],["^ ","^1C",30,"^1D",17,"^K","rng"],["^ ","^1C",7,"^1D",18,"^K","rng"],["^ ","^1C",63,"^1D",18,"^K","rng"],["^ ","^1C",25,"^1D",20,"^K","rng"],["^ ","^1C",44,"^1D",20,"^K","rng"],["^ ","^1C",102,"^1D",23,"^K","rng"],["^ ","^1C",135,"^1D",23,"^K","rng"],["^ ","^1C",110,"^1D",27,"^K","rng"],["^ ","^1C",147,"^1D",27,"^K","rng"],["^ ","^1C",53,"^1D",29,"^K","rng"]]],"~i24",["^ ","~i3",[["^ ","^1C",0,"^1D",42,"^K","clojure.test.check.random/rand-double"]],"~i16",[["^ ","^1C",88,"^1D",42,"^K","rng"],["^ ","^1C",8,"^1D",43,"^K","rng"],["^ ","^1C",30,"^1D",43,"^K","rng"],["^ ","^1C",7,"^1D",44,"^K","rng"],["^ ","^1C",65,"^1D",44,"^K","rng"],["^ ","^1C",25,"^1D",46,"^K","rng"],["^ ","^1C",44,"^1D",46,"^K","rng"],["^ ","^1C",102,"^1D",49,"^K","rng"],["^ ","^1C",135,"^1D",49,"^K","rng"],["^ ","^1C",110,"^1D",53,"^K","rng"],["^ ","^1C",147,"^1D",53,"^K","rng"],["^ ","^1C",55,"^1D",55,"^K","rng"]]],"~i30",["^ ","~i3",[["^ ","^1C",0,"^1D",68,"^K","clojure.test.check.random/split"]],"~i10",[["^ ","^1C",76,"^1D",68,"^K","rng"],["^ ","^1C",8,"^1D",69,"^K","rng"],["^ ","^1C",30,"^1D",69,"^K","rng"],["^ ","^1C",7,"^1D",70,"^K","rng"],["^ ","^1C",59,"^1D",70,"^K","rng"],["^ ","^1C",25,"^1D",72,"^K","rng"],["^ ","^1C",44,"^1D",72,"^K","rng"],["^ ","^1C",102,"^1D",75,"^K","rng"],["^ ","^1C",135,"^1D",75,"^K","rng"],["^ ","^1C",110,"^1D",79,"^K","rng"],["^ ","^1C",147,"^1D",79,"^K","rng"],["^ ","^1C",49,"^1D",81,"^K","rng"]]],"~i36",["^ ","~i3",[["^ ","^1C",0,"^1D",94,"^K","clojure.test.check.random/split-n"]],"~i12",[["^ ","^1C",80,"^1D",94,"^K","rng"],["^ ","^1C",8,"^1D",95,"^K","rng"],["^ ","^1C",30,"^1D",95,"^K","rng"],["^ ","^1C",7,"^1D",96,"^K","rng"],["^ ","^1C",61,"^1D",96,"^K","rng"],["^ ","^1C",25,"^1D",98,"^K","rng"],["^ ","^1C",44,"^1D",98,"^K","rng"],["^ ","^1C",102,"^1D",101,"^K","rng"],["^ ","^1C",137,"^1D",101,"^K","rng"],["^ ","^1C",110,"^1D",105,"^K","rng"],["^ ","^1C",149,"^1D",105,"^K","rng"],["^ ","^1C",51,"^1D",107,"^K","rng"]],"^1I",[["^ ","^1C",84,"^1D",94,"^K","n"],["^ ","^1C",65,"^1D",96,"^K","n"],["^ ","^1C",106,"^1D",101,"^K","n"],["^ ","^1C",141,"^1D",101,"^K","n"],["^ ","^1C",114,"^1D",105,"^K","n"],["^ ","^1C",153,"^1D",105,"^K","n"]]],"~i48",["^ ","~i0",[["^ ","^1C",0,"^1D",113],["^ ","^1C",37,"^1D",116],["^ ","^1C",0,"^1D",117]],"^1I",[["^ ","^1C",0,"^1D",116,"^K","clojure.test.check.random/hex-long"]]],"~i50",["^ ","~i3",[["^ ","^1C",82,"^1D",116,"^K","s"]]],"~i51",["^ ","~i2",[["^ ","^1C",0,"^1D",117],["^ ","^1C",53,"^1D",117]],"~i3",[["^ ","^1C",7,"^1D",117,"^K","clojure.test.check.random.longs/from-string"]],"~i21",[["^ ","^1C",51,"^1D",117,"^K","s"]]],"~i53",["^ ","~i0",[["^ ","^1C",0,"^1D",119],["^ ","^1C",36,"^1D",122],["^ ","^1C",0,"^1D",123]],"^1I",[["^ ","^1C",0,"^1D",122,"^K","clojure.test.check.random/bxoubsr"]]],"~i55",["^ ","~i3",[["^ ","^1C",80,"^1D",122,"^K","x"]],"~i5",[["^ ","^1C",82,"^1D",122,"^K","n"]]],"~i56",["^ ","~i6",[["^ ","^1C",104,"^1D",123,"^K","x"]],"~i8",[["^ ","^1C",47,"^1D",123]],"~i9",[["^ ","^1C",47,"^1D",123,"^K","clojure.test.check.random.longs/unsigned-bit-shift-right"]],"~i34",[["^ ","^1C",106,"^1D",123,"^K","n"]],"~i37",[["^ ","^1C",0,"^1D",123]],"~i38",[["^ ","^1C",7,"^1D",123,"^K","clojure.test.check.random.longs/bit-xor"]],"~i46",[["^ ","^1C",109,"^1D",123,"^K","x"]]],"~i58",["^ ","~i0",[["^ ","^1C",0,"^1D",125]],"~i15",[["^ ","^1C",0,"^1D",125,"^K","clojure.test.check.random/mix-64-const-1"]],"^1J",[["^ ","^1C",43,"^1D",125],["^ ","^1C",78,"^1D",125]],"~i31",[["^ ","^1C",43,"^1D",125,"^K","clojure.test.check.random/hex-long"]]],"~i59",["^ ","~i0",[["^ ","^1C",0,"^1D",126]],"^1Z",[["^ ","^1C",0,"^1D",126,"^K","clojure.test.check.random/mix-64-const-2"]],"^1J",[["^ ","^1C",43,"^1D",126],["^ ","^1C",78,"^1D",126]],"^1[",[["^ ","^1C",43,"^1D",126,"^K","clojure.test.check.random/hex-long"]]],"~i61",["^ ","~i0",[["^ ","^1C",0,"^1D",127],["^ ","^1C",35,"^1D",127],["^ ","^1C",0,"^1D",128]],"^1I",[["^ ","^1C",0,"^1D",127,"^K","clojure.test.check.random/mix-64"]]],"~i62",["^ ","~i3",[["^ ","^1C",78,"^1D",127,"^K","n"]]],"~i63",["^ ","~i6",[["^ ","^1C",187,"^1D",128,"^K","n"]]],"~i64",["^ ","~i6",[["^ ","^1C",153,"^1D",128],["^ ","^1C",189,"^1D",128]],"~i7",[["^ ","^1C",153,"^1D",128,"^K","clojure.test.check.random/bxoubsr"]]],"~i65",["^ ","~i6",[["^ ","^1C",114,"^1D",128]],"~i7",[["^ ","^1C",114,"^1D",128,"^K","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1C",195,"^1D",128,"^K","clojure.test.check.random/mix-64-const-1"]]],"~i66",["^ ","~i6",[["^ ","^1C",80,"^1D",128],["^ ","^1C",237,"^1D",128]],"~i7",[["^ ","^1C",80,"^1D",128,"^K","clojure.test.check.random/bxoubsr"]]],"~i67",["^ ","~i6",[["^ ","^1C",41,"^1D",128]],"~i7",[["^ ","^1C",41,"^1D",128,"^K","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1C",243,"^1D",128,"^K","clojure.test.check.random/mix-64-const-2"]]],"~i68",["^ ","~i6",[["^ ","^1C",0,"^1D",128],["^ ","^1C",285,"^1D",128]],"~i7",[["^ ","^1C",7,"^1D",128,"^K","clojure.test.check.random/bxoubsr"]]],"~i70",["^ ","~i0",[["^ ","^1C",0,"^1D",130]],"^1Z",[["^ ","^1C",0,"^1D",130,"^K","clojure.test.check.random/mix-gamma-const-1"]],"~i33",[["^ ","^1C",46,"^1D",130],["^ ","^1C",81,"^1D",130]],"^1U",[["^ ","^1C",46,"^1D",130,"^K","clojure.test.check.random/hex-long"]]],"~i71",["^ ","~i0",[["^ ","^1C",0,"^1D",131]],"^1Z",[["^ ","^1C",0,"^1D",131,"^K","clojure.test.check.random/mix-gamma-const-2"]],"^2:",[["^ ","^1C",46,"^1D",131],["^ ","^1C",81,"^1D",131]],"^1U",[["^ ","^1C",46,"^1D",131,"^K","clojure.test.check.random/hex-long"]]],"~i72",["^ ","~i0",[["^ ","^1C",0,"^1D",132]],"^1Z",[["^ ","^1C",0,"^1D",132,"^K","clojure.test.check.random/mix-gamma-const-3"]],"^2:",[["^ ","^1C",46,"^1D",132],["^ ","^1C",81,"^1D",132]],"^1U",[["^ ","^1C",46,"^1D",132,"^K","clojure.test.check.random/hex-long"]]],"~i74",["^ ","~i0",[["^ ","^1C",0,"^1D",133],["^ ","^1C",38,"^1D",133],["^ ","^1C",0,"^1D",134]],"^1I",[["^ ","^1C",0,"^1D",133,"^K","clojure.test.check.random/mix-gamma"]]],"~i75",["^ ","~i3",[["^ ","^1C",84,"^1D",133,"^K","n"]]],"~i76",["^ ","~i6",[["^ ","^1C",227,"^1D",134,"^K","n"]]],"~i77",["^ ","~i6",[["^ ","^1C",193,"^1D",134],["^ ","^1C",229,"^1D",134]],"~i7",[["^ ","^1C",193,"^1D",134,"^K","clojure.test.check.random/bxoubsr"]]],"~i78",["^ ","~i6",[["^ ","^1C",154,"^1D",134]],"~i7",[["^ ","^1C",154,"^1D",134,"^K","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1C",235,"^1D",134,"^K","clojure.test.check.random/mix-gamma-const-1"]]],"~i79",["^ ","~i6",[["^ ","^1C",120,"^1D",134],["^ ","^1C",280,"^1D",134]],"~i7",[["^ ","^1C",120,"^1D",134,"^K","clojure.test.check.random/bxoubsr"]]],"~i80",["^ ","~i6",[["^ ","^1C",81,"^1D",134]],"~i7",[["^ ","^1C",81,"^1D",134,"^K","clojure.test.check.random.longs/*"]],"~i9",[["^ ","^1C",286,"^1D",134,"^K","clojure.test.check.random/mix-gamma-const-2"]]],"~i81",["^ ","~i6",[["^ ","^1C",47,"^1D",134],["^ ","^1C",331,"^1D",134]],"~i7",[["^ ","^1C",47,"^1D",134,"^K","clojure.test.check.random/bxoubsr"]]],"~i82",["^ ","~i6",[["^ ","^1C",8,"^1D",134]],"~i7",[["^ ","^1C",8,"^1D",134,"^K","clojure.test.check.random.longs/bit-or"]],"^1G",[["^ ","^1C",337,"^1D",134,"^K","clojure.test.check.random.longs/ONE"]]],"~i83",["^ ","~i6",[["^ ","^1C",0,"^1D",134],["^ ","^1C",0,"^1D",135]],"^1M",[["^ ","^1C",4,"^1D",134,"^K","z"]]],"~i84",["^ ","^1M",[["^ ","^1C",0,"^1D",135],["^ ","^1C",4,"^1D",135,"^K","G__18745"],["^ ","^1C",0,"^1D",136],["^ ","^1C",0,"^1D",136],["^ ","^1C",0,"^1D",141,"^K","G__18745"]],"~i20",[["^ ","^1C",15,"^1D",135,"^K","z"]]],"~i85",["^ ","^1G",[["^ ","^1C",3,"^1D",136],["^ ","^1C",4,"^1D",136]],"^1H",[["^ ","^1C",73,"^1D",136,"^K","z"]]],"~i86",["^ ","^1H",[["^ ","^1C",39,"^1D",136],["^ ","^1C",75,"^1D",136]],"~i25",[["^ ","^1C",39,"^1D",136,"^K","clojure.test.check.random/bxoubsr"]]],"~i87",["^ ","^1H",[["^ ","^1C",11,"^1D",136],["^ ","^1C",28,"^1D",136,"^K","G__18746"],["^ ","^1C",0,"^1D",137],["^ ","^1C",0,"^1D",137],["^ ","^1C",154,"^1D",137,"^K","G__18746"],["^ ","^1C",218,"^1D",137,"^K","G__18746"]],"^2K",[["^ ","^1C",8,"^1D",137,"^K","clojure.test.check.random.longs/bit-count"],["^ ","^1C",82,"^1D",137,"^K","clojure.test.check.random.longs/bit-count"],["^ ","^1C",166,"^1D",137,"^K","clojure.test.check.random.longs/bit-count"]]],"~i88",["^ ","^1G",[["^ ","^1C",0,"^1D",139],["^ ","^1C",47,"^1D",139,"^K","G__18745"]],"^1Z",[["^ ","^1C",7,"^1D",139,"^K","clojure.test.check.random.longs/bit-xor"]],"~i23",[["^ ","^1C",56,"^1D",139,"^K","clojure.test.check.random/mix-gamma-const-3"]]],"~i90",["^ ","~i0",[["^ ","^1C",0,"^1D",144],["^ ","^1C",0,"^1D",144],["^ ","^1C",0,"^1D",153],["^ ","^1C",0,"^1D",153],["^ ","^1C",0,"^1D",153],["^ ","^1C",0,"^1D",153],["^ ","^1C",98,"^1D",153,"^K","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1C",0,"^1D",155],["^ ","^1C",0,"^1D",155],["^ ","^1C",0,"^1D",155],["^ ","^1C",115,"^1D",155],["^ ","^1C",0,"^1D",157],["^ ","^1C",0,"^1D",157],["^ ","^1C",12,"^1D",157],["^ ","^1C",0,"^1D",158],["^ ","^1C",0,"^1D",161],["^ ","^1C",0,"^1D",161],["^ ","^1C",0,"^1D",161],["^ ","^1C",117,"^1D",161],["^ ","^1C",0,"^1D",163],["^ ","^1C",0,"^1D",163],["^ ","^1C",16,"^1D",163],["^ ","^1C",0,"^1D",164],["^ ","^1C",0,"^1D",167],["^ ","^1C",0,"^1D",167],["^ ","^1C",0,"^1D",167],["^ ","^1C",111,"^1D",167],["^ ","^1C",0,"^1D",169],["^ ","^1C",0,"^1D",169],["^ ","^1C",16,"^1D",169],["^ ","^1C",0,"^1D",170],["^ ","^1C",0,"^1D",176],["^ ","^1C",0,"^1D",176],["^ ","^1C",0,"^1D",176],["^ ","^1C",113,"^1D",176],["^ ","^1C",0,"^1D",178],["^ ","^1C",0,"^1D",178],["^ ","^1C",16,"^1D",178],["^ ","^1C",0,"^1D",179],["^ ","^1C",0,"^1D",213],["^ ","^1C",0,"^1D",213],["^ ","^1C",62,"^1D",213],["^ ","^1C",0,"^1D",214],["^ ","^1C",0,"^1D",214],["^ ","^1C",90,"^1D",214],["^ ","^1C",149,"^1D",214],["^ ","^1C",0,"^1D",217],["^ ","^1C",0,"^1D",217],["^ ","^1C",68,"^1D",217],["^ ","^1C",0,"^1D",219],["^ ","^1C",0,"^1D",219],["^ ","^1C",71,"^1D",219],["^ ","^1C",0,"^1D",221],["^ ","^1C",0,"^1D",221],["^ ","^1C",76,"^1D",221],["^ ","^1C",87,"^1D",221,"^K","this__4192__auto__"],["^ ","^1C",106,"^1D",221,"^K","writer__4193__auto__"],["^ ","^1C",127,"^1D",221,"^K","opt__4194__auto__"],["^ ","^1C",0,"^1D",222],["^ ","^1C",0,"^1D",222],["^ ","^1C",7,"^1D",222,"^K","cljs.core/-write"],["^ ","^1C",24,"^1D",222,"^K","writer__4193__auto__"],["^ ","^1C",45,"^1D",222],["^ ","^1C",0,"^1D",225],["^ ","^1C",58,"^1D",228],["^ ","^1C",0,"^1D",229],["^ ","^1C",0,"^1D",229],["^ ","^1C",12,"^1D",229,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"~i9",[["^ ","^1C",0,"^1D",153,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",155,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",161,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",167,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",176,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",213,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",217,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",219,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",221,"^K","clojure.test.check.random/JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",228,"^K","clojure.test.check.random/->JavaUtilSplittableRandom"],["^ ","^1C",0,"^1D",232,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"~i35",[["^ ","^1C",124,"^1D",228,"^K","gamma"],["^ ","^1C",63,"^1D",229,"^K","gamma"]],"~i41",[["^ ","^1C",130,"^1D",228,"^K","state"],["^ ","^1C",69,"^1D",229,"^K","state"]]],"~i92",["^ ","^1G",[["^ ","^1C",126,"^1D",155,"^K","_"],["^ ","^1C",4,"^1D",157,"^K","_"]]],"~i93",["^ ","~i8",[["^ ","^1C",79,"^1D",158,"^K","state"]],"^1G",[["^ ","^1C",40,"^1D",158]],"^1Z",[["^ ","^1C",40,"^1D",158,"^K","clojure.test.check.random.longs/+"]],"~i17",[["^ ","^1C",92,"^1D",158,"^K","gamma"]],"^1H",[["^ ","^1C",0,"^1D",158]],"^2K",[["^ ","^1C",7,"^1D",158,"^K","clojure.test.check.random/mix-64"]]],"~i94",["^ ","^1I",[["^ ","^1C",128,"^1D",161,"^K","this"],["^ ","^1C",4,"^1D",163,"^K","this"]]],"~i95",["^ ","~i4",[["^ ","^1C",0,"^1D",164],["^ ","^1C",67,"^1D",164]],"~i8",[["^ ","^1C",67,"^1D",164,"^K","this"]],"^2N",[["^ ","^1C",7,"^1D",164,"^K","clojure.test.check.random.doubles/rand-long->rand-double"]]],"~i96",["^ ","^1K",[["^ ","^1C",122,"^1D",167,"^K","this"],["^ ","^1C",4,"^1D",169,"^K","this"]]],"~i97",["^ ","~i4",[["^ ","^1C",0,"^1D",170],["^ ","^1C",0,"^1D",173],["^ ","^1C",0,"^1D",173]],"^1K",[["^ ","^1C",4,"^1D",170,"^K","state'"]],"^2T",[["^ ","^1C",25,"^1D",170]],"^1B",[["^ ","^1C",25,"^1D",170,"^K","clojure.test.check.random.longs/+"]],"^2H",[["^ ","^1C",64,"^1D",170,"^K","gamma"]],"~i26",[["^ ","^1C",77,"^1D",170,"^K","state"]]],"~i98",["^ ","^1K",[["^ ","^1C",4,"^1D",171,"^K","state''"]],"^1B",[["^ ","^1C",38,"^1D",171]],"^1F",[["^ ","^1C",38,"^1D",171,"^K","clojure.test.check.random.longs/+"]],"^1Q",[["^ ","^1C",77,"^1D",171,"^K","gamma"]],"~i27",[["^ ","^1C",90,"^1D",171,"^K","state'"]]],"~i99",["^ ","^1K",[["^ ","^1C",4,"^1D",172,"^K","gamma'"]],"^2T",[["^ ","^1C",25,"^1D",172]],"^1B",[["^ ","^1C",25,"^1D",172,"^K","clojure.test.check.random/mix-gamma"]],"~i28",[["^ ","^1C",61,"^1D",172,"^K","state''"]]],"~i100",["^ ","~i7",[["^ ","^1C",90,"^1D",173],["^ ","^1C",95,"^1D",173,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1U",[["^ ","^1C",146,"^1D",173,"^K","gamma"]],"~i40",[["^ ","^1C",159,"^1D",173,"^K","state''"]]],"~i101",["^ ","~i7",[["^ ","^1C",193,"^1D",173],["^ ","^1C",198,"^1D",173,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1U",[["^ ","^1C",249,"^1D",173,"^K","gamma'"]],"^2Q",[["^ ","^1C",268,"^1D",173]],"~i42",[["^ ","^1C",268,"^1D",173,"^K","clojure.test.check.random/mix-64"]],"~i49",[["^ ","^1C",301,"^1D",173,"^K","state'"]]],"~i102",["^ ","^1M",[["^ ","^1C",124,"^1D",176,"^K","this"],["^ ","^1C",4,"^1D",178,"^K","this"]],"^2T",[["^ ","^1C",130,"^1D",176,"^K","n"]]],"~i103",["^ ","~i4",[["^ ","^1C",0,"^1D",179],["^ ","^1C",4,"^1D",179,"^K","G__18762"],["^ ","^1C",0,"^1D",180],["^ ","^1C",0,"^1D",180],["^ ","^1C",8,"^1D",180,"^K","G__18762"],["^ ","^1C",5,"^1D",181],["^ ","^1C",0,"^1D",182],["^ ","^1C",5,"^1D",185],["^ ","^1C",0,"^1D",186]],"^1K",[["^ ","^1C",15,"^1D",179,"^K","n"]]],"~i105",["^ ","~i9",[["^ ","^1C",90,"^1D",186,"^K","this"]]],"~i106",["^ ","~i6",[["^ ","^1C",0,"^1D",190],["^ ","^1C",0,"^1D",191]],"^1M",[["^ ","^1C",4,"^1D",190,"^K","n-dec"]],"^1B",[["^ ","^1C",12,"^1D",190],["^ ","^1C",17,"^1D",190]],"^2N",[["^ ","^1C",13,"^1D",190,"^K","n"]]],"~i107",["^ ","~i8",[["^ ","^1C",0,"^1D",191],["^ ","^1C",0,"^1D",194]],"^1Z",[["^ ","^1C",4,"^1D",191,"^K","state"]],"^1Q",[["^ ","^1C",16,"^1D",191,"^K","state"]]],"~i108",["^ ","^1Z",[["^ ","^1C",4,"^1D",192,"^K","ret"]],"^1F",[["^ ","^1C",10,"^1D",192],["^ ","^1C",31,"^1D",192]],"^2H",[["^ ","^1C",10,"^1D",192,"^K","cljs.core/transient"]]],"~i109",["^ ","^1K",[["^ ","^1C",0,"^1D",194]],"^1G",[["^ ","^1C",3,"^1D",194]],"^1Z",[["^ ","^1C",3,"^1D",194,"^K","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^2T",[["^ ","^1C",48,"^1D",194,"^K","n-dec"]],"^2N",[["^ ","^1C",54,"^1D",194]],"^1H",[["^ ","^1C",54,"^1D",194,"^K","cljs.core/count"]],"^1J",[["^ ","^1C",70,"^1D",194,"^K","ret"]]],"~i110",["^ ","^1I",[["^ ","^1C",85,"^1D",195,"^K","ret"]]],"~i111",["^ ","^1I",[["^ ","^1C",34,"^1D",195]],"^2T",[["^ ","^1C",34,"^1D",195,"^K","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^2N",[["^ ","^1C",89,"^1D",195],["^ ","^1C",94,"^1D",195,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1O",[["^ ","^1C",145,"^1D",195,"^K","gamma"]],"^1T",[["^ ","^1C",158,"^1D",195,"^K","state"]]],"~i112",["^ ","^1I",[["^ ","^1C",0,"^1D",195]],"^2T",[["^ ","^1C",7,"^1D",195,"^K","cljs.core/persistent!"]]],"~i113",["^ ","^1M",[["^ ","^1C",0,"^1D",197],["^ ","^1C",0,"^1D",201]],"^1B",[["^ ","^1C",4,"^1D",197,"^K","state'"]],"^2K",[["^ ","^1C",25,"^1D",197]],"^2Y",[["^ ","^1C",25,"^1D",197,"^K","clojure.test.check.random.longs/+"]],"^31",[["^ ","^1C",64,"^1D",197,"^K","gamma"]],"^1U",[["^ ","^1C",77,"^1D",197,"^K","state"]]],"~i114",["^ ","^1B",[["^ ","^1C",4,"^1D",198,"^K","state''"]],"^2Y",[["^ ","^1C",38,"^1D",198]],"^2[",[["^ ","^1C",38,"^1D",198,"^K","clojure.test.check.random.longs/+"]],"~i29",[["^ ","^1C",77,"^1D",198,"^K","gamma"]],"^2P",[["^ ","^1C",90,"^1D",198,"^K","state'"]]],"~i115",["^ ","^1B",[["^ ","^1C",4,"^1D",199,"^K","gamma'"]],"^2K",[["^ ","^1C",25,"^1D",199]],"^2Y",[["^ ","^1C",25,"^1D",199,"^K","clojure.test.check.random/mix-gamma"]],"^1L",[["^ ","^1C",61,"^1D",199,"^K","state''"]]],"~i116",["^ ","^1B",[["^ ","^1C",4,"^1D",200,"^K","new-rng"]],"^2Y",[["^ ","^1C",14,"^1D",200],["^ ","^1C",19,"^1D",200,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"^1R",[["^ ","^1C",70,"^1D",200,"^K","gamma'"]],"~i60",[["^ ","^1C",89,"^1D",200]],"^21",[["^ ","^1C",89,"^1D",200,"^K","clojure.test.check.random/mix-64"]],"^28",[["^ ","^1C",122,"^1D",200,"^K","state'"]]],"~i117",["^ ","^1G",[["^ ","^1C",0,"^1D",201]],"^1Q",[["^ ","^1C",15,"^1D",201,"^K","state''"]],"^3C",[["^ ","^1C",15,"^1D",202]],"^1J",[["^ ","^1C",15,"^1D",202,"^K","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1L",[["^ ","^1C",66,"^1D",202,"^K","ret"]],"^33",[["^ ","^1C",70,"^1D",202,"^K","new-rng"]]],"~i119",["^ ","~i0",[["^ ","^1C",0,"^1D",232]],"^1Z",[["^ ","^1C",0,"^1D",232,"^K","clojure.test.check.random/golden-gamma"]]],"~i120",["^ ","~i2",[["^ ","^1C",41,"^1D",232],["^ ","^1C",76,"^1D",232]],"~i3",[["^ ","^1C",41,"^1D",232,"^K","clojure.test.check.random/hex-long"]]],"~i122",["^ ","~i0",[["^ ","^1C",0,"^1D",233],["^ ","^1C",61,"^1D",233],["^ ","^1C",0,"^1D",234]],"~i6",[["^ ","^1C",0,"^1D",233,"^K","clojure.test.check.random/make-java-util-splittable-random"]]],"~i123",["^ ","~i3",[["^ ","^1C",130,"^1D",233,"^K","seed"]]],"~i124",["^ ","~i2",[["^ ","^1C",0,"^1D",234],["^ ","^1C",12,"^1D",234,"^K","clojure.test.check.random/JavaUtilSplittableRandom"]],"^3C",[["^ ","^1C",63,"^1D",234,"^K","clojure.test.check.random/golden-gamma"]]],"~i125",["^ ","^3C",[["^ ","^1C",102,"^1D",234],["^ ","^1C",119,"^1D",234,"^K","or__3949__auto__"],["^ ","^1C",0,"^1D",235],["^ ","^1C",0,"^1D",235],["^ ","^1C",20,"^1D",235,"^K","or__3949__auto__"],["^ ","^1C",0,"^1D",236,"^K","or__3949__auto__"]],"^2:",[["^ ","^1C",138,"^1D",234]],"^1U",[["^ ","^1C",138,"^1D",234,"^K","clojure.test.check.random.longs/->long"]],"~i47",[["^ ","^1C",180,"^1D",234,"^K","seed"]]],"~i126",["^ ","^2:",[["^ ","^1C",0,"^1D",238]],"^33",[["^ ","^1C",6,"^1D",238],["^ ","^1C",54,"^1D",238],["^ ","^1C",73,"^1D",238],["^ ","^1C",116,"^1D",238]],"^2Q",[["^ ","^1C",6,"^1D",238,"^K","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2"]]],"~i127",["^ ","^1T",[["^ ","^1C",167,"^1D",238,"^K","seed"]]],"~i129",["^ ","~i0",[["^ ","^1C",0,"^1D",242]],"^1Z",[["^ ","^1C",0,"^1D",242,"^K","clojure.test.check.random/next-rng"]]],"~i130",["^ ","~i2",[["^ ","^1C",37,"^1D",242],["^ ","^1C",0,"^1D",243]],"~i8",[["^ ","^1C",54,"^1D",242,"^K","a"]],"^1K",[["^ ","^1C",58,"^1D",242],["^ ","^1C",103,"^1D",242],["^ ","^1C",146,"^1D",242]],"~i11",[["^ ","^1C",58,"^1D",242,"^K","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]]],"~i131",["^ ","^2T",[["^ ","^1C",202,"^1D",242]],"^1B",[["^ ","^1C",202,"^1D",242,"^K","clojure.test.check.random/make-java-util-splittable-random"]],"^1P",[["^ ","^1C",261,"^1D",242]],"^21",[["^ ","^1C",261,"^1D",242],["^ ","^1C",266,"^1D",242,"^K","js/Date"]]],"~i132",["^ ","~i4",[["^ ","^1C",0,"^1D",243],["^ ","^1C",0,"^1D",245]]],"~i133",["^ ","~i6",[["^ ","^1C",0,"^1D",245],["^ ","^1C",7,"^1D",245]]],"~i134",["^ ","~i7",[["^ ","^1C",99,"^1D",245]],"~i8",[["^ ","^1C",99,"^1D",245,"^K","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2"]],"^1G",[["^ ","^1C",150,"^1D",245,"^K","a"]],"^1I",[["^ ","^1C",152,"^1D",245],["^ ","^1C",18,"^1D",246,"^K","p__18770"],["^ ","^1C",0,"^1D",247],["^ ","^1C",0,"^1D",247],["^ ","^1C",4,"^1D",247,"^K","map__18771"],["^ ","^1C",17,"^1D",247,"^K","p__18770"],["^ ","^1C",4,"^1D",248,"^K","map__18771"],["^ ","^1C",21,"^1D",248],["^ ","^1C",23,"^1D",248],["^ ","^1C",25,"^1D",248],["^ ","^1C",27,"^1D",248],["^ ","^1C",28,"^1D",248,"^K","map__18771"],["^ ","^1C",42,"^1D",248],["^ ","^1C",50,"^1D",248],["^ ","^1C",52,"^1D",248],["^ ","^1C",54,"^1D",248],["^ ","^1C",55,"^1D",248],["^ ","^1C",55,"^1D",248,"^K","map__18771"],["^ ","^1C",104,"^1D",248],["^ ","^1C",115,"^1D",248],["^ ","^1C",116,"^1D",248,"^K","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1C",148,"^1D",248],["^ ","^1C",148,"^1D",248,"^K","map__18771"],["^ ","^1C",179,"^1D",248],["^ ","^1C",184,"^1D",248],["^ ","^1C",191,"^1D",248],["^ ","^1C",199,"^1D",248],["^ ","^1C",199,"^1D",248,"^K","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1C",245,"^1D",248,"^K","cljs.core/hash-map"],["^ ","^1C",264,"^1D",248,"^K","map__18771"],["^ ","^1C",276,"^1D",248,"^K","map__18771"],["^ ","^1C",12,"^1D",249],["^ ","^1C",12,"^1D",249,"^K","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1C",56,"^1D",249,"^K","map__18771"],["^ ","^1C",71,"^1D",249],["^ ","^1C",0,"^1D",250]],"^3C",[["^ ","^1C",4,"^1D",249,"^K","state"]]],"~i135",["^ ","^1B",[["^ ","^1C",0,"^1D",250],["^ ","^1C",4,"^1D",250,"^K","vec__18773"],["^ ","^1C",9,"^1D",251],["^ ","^1C",9,"^1D",251,"^K","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1C",53,"^1D",251,"^K","vec__18773"],["^ ","^1C",64,"^1D",251],["^ ","^1C",68,"^1D",251],["^ ","^1C",9,"^1D",252],["^ ","^1C",9,"^1D",252,"^K","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^1C",53,"^1D",252,"^K","vec__18773"],["^ ","^1C",64,"^1D",252],["^ ","^1C",68,"^1D",252],["^ ","^1C",0,"^1D",253],["^ ","^1C",0,"^1D",253],["^ ","^1C",50,"^1D",253],["^ ","^1C",109,"^1D",253]],"^2K",[["^ ","^1C",4,"^1D",251,"^K","r1"]],"^31",[["^ ","^1C",4,"^1D",252,"^K","r2"]],"~i32",[["^ ","^1C",17,"^1D",250]],"^2:",[["^ ","^1C",17,"^1D",250,"^K","clojure.test.check.random/split"]],"~i39",[["^ ","^1C",49,"^1D",250,"^K","state"]]],"~i136",["^ ","^31",[["^ ","^1C",106,"^1D",253,"^K","r1"]],"^2Q",[["^ ","^1C",171,"^1D",253,"^K","r2"]]],"~i138",["^ ","~i0",[["^ ","^1C",0,"^1D",259],["^ ","^1C",0,"^1D",259],["^ ","^1C",40,"^1D",263],["^ ","^1C",88,"^1D",263,"^K","var_args"],["^ ","^1C",0,"^1D",264],["^ ","^1C",0,"^1D",264],["^ ","^1C",4,"^1D",264,"^K","G__18777"],["^ ","^1C",15,"^1D",264],["^ ","^1C",15,"^1D",264],["^ ","^1C",0,"^1D",265],["^ ","^1C",0,"^1D",265],["^ ","^1C",8,"^1D",265,"^K","G__18777"],["^ ","^1C",5,"^1D",266],["^ ","^1C",0,"^1D",267],["^ ","^1C",7,"^1D",267,"^K","clojure.test.check.random/make-random"],["^ ","^1C",5,"^1D",270],["^ ","^1C",0,"^1D",271],["^ ","^1C",7,"^1D",271,"^K","clojure.test.check.random/make-random"],["^ ","^1C",75,"^1D",271],["^ ","^1C",76,"^1D",271],["^ ","^1C",86,"^1D",271],["^ ","^1C",0,"^1D",275],["^ ","^1C",6,"^1D",275],["^ ","^1C",11,"^1D",275,"^K","js/Error"],["^ ","^1C",17,"^1D",275],["^ ","^1C",18,"^1D",275],["^ ","^1C",80,"^1D",275],["^ ","^1C",80,"^1D",275],["^ ","^1C",0,"^1D",280],["^ ","^1C",0,"^1D",280],["^ ","^1C",70,"^1D",280],["^ ","^1C",0,"^1D",281],["^ ","^1C",0,"^1D",284],["^ ","^1C",0,"^1D",284],["^ ","^1C",70,"^1D",284],["^ ","^1C",0,"^1D",285],["^ ","^1C",0,"^1D",288],["^ ","^1C",0,"^1D",288],["^ ","^1C",64,"^1D",288],["^ ","^1C",0,"^1D",290]],"~i6",[["^ ","^1C",0,"^1D",263,"^K","clojure.test.check.random/make-random"],["^ ","^1C",0,"^1D",280,"^K","clojure.test.check.random/make-random"],["^ ","^1C",0,"^1D",284,"^K","clojure.test.check.random/make-random"],["^ ","^1C",0,"^1D",288,"^K","clojure.test.check.random/make-random"]]],"~i141",["^ ","~i6",[["^ ","^1C",0,"^1D",281]],"~i7",[["^ ","^1C",8,"^1D",281,"^K","clojure.test.check.random/next-rng"],["^ ","^1C",75,"^1D",281,"^K","clojure.test.check.random/next-rng"],["^ ","^1C",144,"^1D",281,"^K","clojure.test.check.random/next-rng"]]],"~i142",["^ ","~i4",[["^ ","^1C",81,"^1D",284,"^K","seed"]]],"~i143",["^ ","~i3",[["^ ","^1C",0,"^1D",285]],"~i4",[["^ ","^1C",7,"^1D",285,"^K","clojure.test.check.random/make-java-util-splittable-random"]],"^1V",[["^ ","^1C",66,"^1D",285,"^K","seed"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^U"],[1534380137000],["^1:","goog/math/math.js"],[1530991559994,"^V","~$goog.array","~$goog.asserts"],["^1:","goog/array/array.js"],[1530991559994,"^V","^49"],["^1:","goog/debug/error.js"],[1530991559994,"^V"],["^1:","clojure/test/check/random/doubles.cljs"],[1535586405418,"^V","^U","^S"],["^1:","goog/dom/nodetype.js"],[1530991559994,"^V"],["^1:","clojure/test/check/random.cljs"],[1535586405418,"^V","^U","^Q","^S"],["^1:","goog/object/object.js"],[1530991559994,"^V"],"~:SHADOW-TIMESTAMP",[1535989513000,1534380137000],["^1:","goog/math/long.js"],[1530991559994,"^V","^49","~$goog.reflect"],["^1:","goog/functions/functions.js"],[1530991559994,"^V"],["^1:","goog/structs/map.js"],[1530991559994,"^V","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^1:","goog/asserts/asserts.js"],[1530991559994,"^V","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^1:","goog/uri/uri.js"],[1530991559994,"^V","^48","^49","^4A","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1:","goog/base.js"],[1530991559994],["^1:","goog/structs/structs.js"],[1530991559994,"^V","^48","^4>"],["^1:","clojure/test/check/random/longs/bit_count_impl.cljs"],[1535586405418,"^V","^U"],["^1:","goog/string/string.js"],[1530991559994,"^V"],["^1:","goog/reflect/reflect.js"],[1530991559994,"^V"],["^1:","goog/string/stringbuffer.js"],[1530991559994,"^V"],["^1:","goog/iter/iter.js"],[1530991559994,"^V","^48","^49","~$goog.functions","~$goog.math"],["^1:","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^4A","^4>","^48","~$goog.Uri","~$goog.string.StringBuffer"],["^1:","clojure/test/check/random/longs.cljs"],[1535586405418,"^V","^U","~$clojure.test.check.random.longs.bit-count-impl","^4I"],["^1:","goog/math/integer.js"],[1530991559994,"^V"],["^1:","goog/uri/utils.js"],[1530991559994,"^V","^48","^49","^4A"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random.cljs","^7",12,"^8",2,"^9",12,"^:",27,"^;","Gary Fredericks","^<","Purely functional and splittable pseudo-random number generators."],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"~:shadow/protocol-prefixes",["^F",["clojure$test$check$random$IRandom$"]],"^D",null,"^E",["^F",["^G","^H","^I","~$*","^J","~$+"]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^F",["^X"]],"~:shadow/js-access-global",["^F",["Date","Error"]],"^Y",["^ ","~$+","^S","~$*","^S","^H","^S","^J","^S","^G","^S","^I","^S"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^K","~$clojure.test.check.random/mix-gamma-const-1","^6","clojure/test/check/random.cljs","^7",71,"^8",1,"^9",71,"^:",33,"~:private",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",71,"^8",16,"^9",71,"^:",33,"^4T",true],"~:tag","~$any"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",123,"^8",7,"^9",123,"^:",39,"~:arglists",["^10",["~$quote",["^10",[["~$seed"]]]]]],"^K","~$clojure.test.check.random/make-java-util-splittable-random","~:variadic",false,"^6","clojure/test/check/random.cljs","^:",39,"~:method-params",["^10",[["^4["]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"^7",123,"^9",123,"~:max-fixed-arity",1,"~:fn-var",true,"^4Y",["^10",["^4Z",["^10",[["^4["]]]]]],"~$rand-long",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",20,"^8",4,"^9",20,"^:",13,"~:protocol","~$clojure.test.check.random/IRandom","^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4Y",["^10",["^4Z",["^10",[["~$rng"]]]]]],"^58","^59","^K","~$clojure.test.check.random/rand-long","^51",false,"^6","clojure/test/check/random.cljs","^:",13,"^52",["^10",[["^5:"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",19,"^9",20,"^55",1,"^56",true,"^4Y",["^10",["^4Z",["^10",[["^5:"]]]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",62,"^8",17,"^9",62,"^:",23,"^4T",true,"^4Y",["^10",["^4Z",["^10",[["~$n"]]]]]],"^4T",true,"^K","~$clojure.test.check.random/mix-64","^51",false,"^6","clojure/test/check/random.cljs","^:",23,"^52",["^10",[["~$n"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",62,"^9",62,"^55",1,"^56",true,"^4Y",["^10",["^4Z",["^10",[["~$n"]]]]]],"~$golden-gamma",["^ ","^K","~$clojure.test.check.random/golden-gamma","^6","clojure/test/check/random.cljs","^7",120,"^8",1,"^9",120,"^:",28,"^4T",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",120,"^8",16,"^9",120,"^:",28,"^4T",true],"^4U","^4V"],"~$mix-gamma-const-2",["^ ","^K","~$clojure.test.check.random/mix-gamma-const-2","^6","clojure/test/check/random.cljs","^7",72,"^8",1,"^9",72,"^:",33,"^4T",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",72,"^8",16,"^9",72,"^:",33,"^4T",true],"^4U","^4V"],"~$mix-64-const-2",["^ ","^K","~$clojure.test.check.random/mix-64-const-2","^6","clojure/test/check/random.cljs","^7",60,"^8",1,"^9",60,"^:",30,"^4T",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",60,"^8",16,"^9",60,"^:",30,"^4T",true],"^4U","^4V"],"~$bxoubsr",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",54,"^8",17,"^9",54,"^:",24,"^4T",true,"^4Y",["^10",["^4Z",["^10",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^4T",true,"^K","~$clojure.test.check.random/bxoubsr","^51",false,"^6","clojure/test/check/random.cljs","^:",24,"^52",["^10",[["~$x","~$n"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",54,"^9",54,"^55",2,"^56",true,"^4Y",["^10",["^4Z",["^10",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",139,"^8",7,"^9",139,"^:",18,"^4Y",["^10",["^4Z",["^10",[[],["^4["]]]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^51",false,"^55",1,"^52",["^10",[[],["^4["]]],"^4Y",["^10",[[],["^4["]]],"^54",["^10",[null,null]]]],"^K","~$clojure.test.check.random/make-random","^51",false,"^6","clojure/test/check/random.cljs","^:",18,"^5G",["^ ","^51",false,"^55",1,"^52",["^10",[[],["^4["]]],"^4Y",["^10",[[],["^4["]]],"^54",["^10",[null,null]]],"^52",["^10",[[],["^4["]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",139,"^9",139,"^55",1,"^56",true,"^4Y",["^10",[[],["^4["]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",75,"^8",17,"^9",75,"^:",26,"^4T",true,"^4Y",["^10",["^4Z",["^10",[["~$n"]]]]]],"^4T",true,"^K","~$clojure.test.check.random/mix-gamma","^51",false,"^6","clojure/test/check/random.cljs","^:",26,"^52",["^10",[["~$n"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",75,"^9",75,"^55",1,"^56",true,"^4Y",["^10",["^4Z",["^10",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^K","~$clojure.test.check.random/mix-gamma-const-3","^6","clojure/test/check/random.cljs","^7",73,"^8",1,"^9",73,"^:",33,"^4T",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",73,"^8",16,"^9",73,"^:",33,"^4T",true],"^4U","^4V"],"~$split-n",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",37,"^8",4,"^9",37,"^:",11,"^58","^59","^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4Y",["^10",["^4Z",["^10",[["^5:","~$n"]]]]]],"^58","^59","^K","~$clojure.test.check.random/split-n","^51",false,"^6","clojure/test/check/random.cljs","^:",11,"^52",["^10",[["^5:","~$n"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",19,"^9",37,"^55",2,"^56",true,"^4Y",["^10",["^4Z",["^10",[["^5:","~$n"]]]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^K","~$clojure.test.check.random/next-rng","^6","clojure/test/check/random.cljs","^7",130,"^8",1,"^9",130,"^:",24,"^4T",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",130,"^8",16,"^9",130,"^:",24,"^4T",true],"^4U","~$function"],"~$hex-long",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",49,"^8",17,"^9",49,"^:",25,"^4T",true,"^4Y",["^10",["^4Z",["^10",[["~$s"]]]]],"^<","Helper for defining constants."],"^4T",true,"^K","~$clojure.test.check.random/hex-long","^51",false,"^6","clojure/test/check/random.cljs","^:",25,"^52",["^10",[["~$s"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",49,"^9",49,"^55",1,"^56",true,"^4Y",["^10",["^4Z",["^10",[["~$s"]]]]],"^<","Helper for defining constants."],"~$rand-double",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",25,"^8",4,"^9",25,"^:",15,"^58","^59","^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4Y",["^10",["^4Z",["^10",[["^5:"]]]]]],"^58","^59","^K","~$clojure.test.check.random/rand-double","^51",false,"^6","clojure/test/check/random.cljs","^:",15,"^52",["^10",[["^5:"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",19,"^9",25,"^55",1,"^56",true,"^4Y",["^10",["^4Z",["^10",[["^5:"]]]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^K","~$clojure.test.check.random/mix-64-const-1","^6","clojure/test/check/random.cljs","^7",59,"^8",1,"^9",59,"^:",30,"^4T",true,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",59,"^8",16,"^9",59,"^:",30,"^4T",true],"^4U","^4V"],"~$split",["^ ","^4X",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",31,"^8",4,"^9",31,"^:",9,"^58","^59","^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4Y",["^10",["^4Z",["^10",[["^5:"]]]]]],"^58","^59","^K","~$clojure.test.check.random/split","^51",false,"^6","clojure/test/check/random.cljs","^:",9,"^52",["^10",[["^5:"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^7",19,"^9",31,"^55",1,"^56",true,"^4Y",["^10",["^4Z",["^10",[["^5:"]]]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^F",["^59"]],"^K","~$clojure.test.check.random/JavaUtilSplittableRandom","^6","clojure/test/check/random.cljs","^:",34,"~:type",true,"^8",10,"^7",91,"~:record",false,"^9",91,"^4U","^5Q","~:skip-protocol-flag",null],"~$IRandom",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",19,"^8",14,"^9",19,"^:",21,"^<",null,"~:protocol-symbol",true,"~:jsdoc",["^10",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","^57",[["^5:"]],"^5T",[["^5:"]],"^5X",[["^5:"]],"^5M",[["^5:","~$n"]]]]],"^66",true,"^K","^59","^6","clojure/test/check/random.cljs","^:",21,"^8",1,"^7",19,"^68",["^ ","^69",["^ ","^57",[["^5:"]],"^5T",[["^5:"]],"^5X",[["^5:"]],"^5M",[["^5:","~$n"]]]],"~:info",null,"^9",19,"^4U","^4V","~:impls",["^F",["^61"]],"^<",null,"^67",["^10",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^4X",null,"^5",["^ ","^60",["^F",["^59"]],"^6","clojure/test/check/random.cljs","^:",34,"^8",10,"~:factory","~:positional","^7",91,"^9",91,"^4Y",["^10",["^4Z",["^10",[["~$gamma","~$state"]]]]],"^64",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."],"^60",["^F",["^59"]],"^K","~$clojure.test.check.random/->JavaUtilSplittableRandom","^51",false,"^6","clojure/test/check/random.cljs","^:",34,"^52",["^10",[["^6?","^6@"]]],"^53",null,"^54",["^10",[null,null]],"^8",1,"^6=","^6>","^7",91,"^9",91,"^55",2,"^56",true,"^4Y",["^10",["^4Z",["^10",[["^6?","^6@"]]]]],"^64",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."]],"^Z",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^F",["~:returned","~:state","~:seed","^6@","^6?"]],"~:order",["^6?","^6@","^6E","^6D","^6C"]],"^16",["^ ","^X",["^F",[]]],"^17",["^ "],"^18",["^V","^U","^Q","^S"]],"^N","^L","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^46",[["^6I","~:static-fns"],true,["^6I","~:elide-asserts"],false,["^6I","~:optimize-constants"],null,["^6I","~:external-config"],null,["^6I","~:tooling-config"],null,["^6I","~:emit-constants"],null,["^6I","~:infer-externs"],true,["^6I","^1?"],null,["~:js-options","~:js-provider"],"^X",["~:mode"],"~:dev",["^6I","~:fn-invoke-direct"],null,["^6I","^1A"],"/dev/null"]]]