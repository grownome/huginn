{:rename-macros {}, :renames {}, :externs {process {env {DEVICE_ID {}, REGISTRY_ID {}, GCLOUD_PROJECT {}, PRIVATE_KEY_FILE {}}}, Date {now {}}}, :use-macros {}, :excludes #{}, :name huginn.core, :imports nil, :requires {p promesa.core, promesa.core promesa.core, mqtt mqtt, fs fs, si systeminformation, systeminformation systeminformation, jwt jsonwebtoken, jsonwebtoken jsonwebtoken}, :cljs.spec/speced-vars [], :uses nil, :defs {publish-async {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 115, :column 7, :end-line 115, :end-column 20, :arglists (quote ([{:keys [client iat-time], :as cconfig} {:keys [tokenExpMins delayMs], :as opts}]))}, :name huginn.core/publish-async, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 20, :method-params ([p__23028 p__23029]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [client iat-time], :as cconfig} {:keys [tokenExpMins delayMs], :as opts}]))}, build-client {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 77, :column 7, :end-line 77, :end-column 19, :arglists (quote ([opts]))}, :name huginn.core/build-client, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 19, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, connection-args {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 49, :column 7, :end-line 49, :end-column 22, :arglists (quote ([{:keys [mqttBridgeHostname mqttBridgePort projectId privateKeyFile algorithm], :as opts}]))}, :name huginn.core/connection-args, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 22, :method-params ([p__22992]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [mqttBridgeHostname mqttBridgePort projectId privateKeyFile algorithm], :as opts}]))}, default-options {:name huginn.core/default-options, :file "/home/fode/src/huginn/src/huginn/core.cljs", :line 10, :column 1, :end-line 10, :end-column 21, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 10, :column 6, :end-line 10, :end-column 21}, :tag cljs.core/IMap}, sleep-promise {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 101, :column 7, :end-line 101, :end-column 20, :arglists (quote ([wait]))}, :name huginn.core/sleep-promise, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 20, :method-params ([wait]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([wait]))}, client-id {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 24, :column 7, :end-line 24, :end-column 16, :arglists (quote ([{:keys [projectId registryId cloudRegion deviceId], :as opts}]))}, :name huginn.core/client-id, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 16, :method-params ([p__22986]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [projectId registryId cloudRegion deviceId], :as opts}]))}, init-client {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 85, :column 7, :end-line 85, :end-column 18, :arglists (quote ([opts]))}, :name huginn.core/init-client, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 18, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}, topic-root {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 91, :column 7, :end-line 91, :end-column 17, :arglists (quote ([{:keys [registryId deviceId], :as opts}]))}, :name huginn.core/topic-root, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 17, :method-params ([p__23019]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [registryId deviceId], :as opts}]))}, create-jwt {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 35, :column 7, :end-line 35, :end-column 17, :arglists (quote ([{:keys [projectId tokenExpMins privateKeyFile algorithm], :as opts}]))}, :name huginn.core/create-jwt, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 17, :method-params ([p__22989]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [projectId tokenExpMins privateKeyFile algorithm], :as opts}]))}, mqtt-topic {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 95, :column 7, :end-line 95, :end-column 17, :arglists (quote ([{:keys [deviceId], :as opts} msg-type])), :doc "msg-type can be 'state' for state updates\n   or 'events' to publish telemetry"}, :name huginn.core/mqtt-topic, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 17, :method-params ([p__23022 msg-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [deviceId], :as opts} msg-type])), :doc "msg-type can be 'state' for state updates\n   or 'events' to publish telemetry"}, round-now {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([]))}, :name huginn.core/round-now, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, client-handlers {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 61, :column 7, :end-line 61, :end-column 22, :arglists (quote ([main-loop]))}, :name huginn.core/client-handlers, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 22, :method-params ([main-loop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([main-loop]))}, c {:name huginn.core/c, :file "/home/fode/src/huginn/src/huginn/core.cljs", :line 137, :column 1, :end-line 137, :end-column 7, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 137, :column 6, :end-line 137, :end-column 7}, :tag any}, stop {:name huginn.core/stop, :file "/home/fode/src/huginn/src/huginn/core.cljs", :line 112, :column 1, :end-line 112, :end-column 10, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 112, :column 6, :end-line 112, :end-column 10}, :tag any}, publish-cpu-data {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 106, :column 7, :end-line 106, :end-column 23, :arglists (quote ([client topic qos data]))}, :name huginn.core/publish-cpu-data, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 23, :method-params ([client topic qos data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 4, :fn-var true, :arglists (quote ([client topic qos data]))}, add-handlers {:protocol-inline nil, :meta {:file "/home/fode/src/huginn/src/huginn/core.cljs", :line 72, :column 7, :end-line 72, :end-column 19, :arglists (quote ([client handlers]))}, :name huginn.core/add-handlers, :variadic false, :file "/home/fode/src/huginn/src/huginn/core.cljs", :end-column 19, :method-params ([client handlers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([client handlers]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:messageType :cloudRegion :algorithm :mqttBridgeHostname :iat-time :delayMs :deviceId :time :registryId :client :tokenExpMins :projectId :privateKeyFile :mqttBridgePort}, :order [:messageType :cloudRegion :algorithm :mqttBridgeHostname :delayMs :deviceId :registryId :tokenExpMins :projectId :privateKeyFile :mqttBridgePort :client :iat-time :time]}, :doc nil}