["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$require",["^ "],"~$Buffer",["^ ","~$prototype",["^ ","~$equals",["^ "],"~$cljs-node-io$protocols$IOFactory$",["^ "],"~$cljs-node-io$protocols$IOFactory$make-reader$arity$2",["^ "],"~$cljs-node-io$protocols$IOFactory$make-input-stream$arity$2",["^ "],"~$cljs-node-io$protocols$IOFactory$make-writer$arity$2",["^ "],"~$cljs-node-io$protocols$IOFactory$make-output-stream$arity$2",["^ "]],"~$isBuffer",["^ "]],"~$Error",["^ "],"~$String",["^ "],"~$TypeError",["^ "],"~$Object",["^ ","~$join",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros","~$alt!","^D","~$go-loop","^D"],"~:excludes",["~#set",[]],"~:name","~$cljs-node-io.core","~:imports",["^ ","~$Uri","~$goog.Uri","~$StringBuffer","~$goog.string.StringBuffer"],"~:requires",["^ ","~$async","~$cljs.core.async","^R","^R","~$cljs.core.async.impl.protocols","^S","~$cljs-node-io.file","^T","~$cljs-node-io.streams","^U","~$cljs-node-io.protocols","^V","^L","^M","^N","^O"],"~:uses",["^ ","~$make-output-stream","^V","~$<!","^R","~$make-writer","^V","~$chan","^R","~$as-file","^V","~$BufferReadStream","^U","~$make-reader","^V","~$Coercions","^V","~$pipe","^R","~$Channel","^S","~$IInputStream","^V","~$File","^T","~$make-input-stream","^V","~$FileOutputStream","^U","~$FileInputStream","^U","~$alts!","^R","~$IOFactory","^V","~$IFile","^V","~$as-url","^V","~$IOutputStream","^V","~$put!","^R","~$take!","^R"],"~:defs",["^ ","~$aslurp",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","~:line",170,"~:column",7,"~:end-line",170,"~:end-column",13,"~:arglists",["~#list",["~$quote",["^1L",[["~$p","~$&","~$opts"]]]]],"~:doc","@return {!Channel} a which will receive [?err ?data]","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^1L",["~$p","^1N"]]],"^1K",["^1L",[["~$p","~$&","^1N"]]],"~:arglists-meta",["^1L",[null]]]],"^I","~$cljs-node-io.core/aslurp","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",13,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$p","^1N"]]],"^1K",["^1L",[["~$p","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$p","^1N"]]],"~:protocol-impl",null,"^1T",["^1L",[null]],"^1H",1,"^1G",170,"^1I",170,"^1R",1,"~:fn-var",true,"^1K",["^1L",[["~$p","~$&","^1N"]]],"^1O","@return {!Channel} a which will receive [?err ?data]"],"~$rFile?",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",249,"^1H",7,"^1I",249,"^1J",13,"^1K",["^1L",["^1M",["^1L",[["~$o"]]]]],"^1O","@param {*} o\n   @return {!boolean}"],"^I","~$cljs-node-io.core/rFile?","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",13,"^1S",["^1L",[["~$o"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",249,"^1I",249,"^1R",1,"^1W",true,"^1K",["^1L",["^1M",["^1L",[["~$o"]]]]],"^1O","@param {*} o\n   @return {!boolean}"],"~$slurp",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",160,"^1H",7,"^1I",160,"^1J",12,"^1K",["^1L",["^1M",["^1L",[["~$p","~$&","^1N"]]]]],"^1O","Returns a string synchronously. Unlike JVM, does not use FileInputStream.\n   Only option at this time is :encoding\n   If :encoding \"\" (an explicit empty string), returns raw buffer instead of string.\n   @return {(string|buffer.Buffer)}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$p","^1N"]]],"^1K",["^1L",[["~$p","~$&","^1N"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/slurp","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",12,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$p","^1N"]]],"^1K",["^1L",[["~$p","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$p","^1N"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",160,"^1I",160,"^1R",1,"^1W",true,"^1K",["^1L",[["~$p","~$&","^1N"]]],"^1O","Returns a string synchronously. Unlike JVM, does not use FileInputStream.\n   Only option at this time is :encoding\n   If :encoding \"\" (an explicit empty string), returns raw buffer instead of string.\n   @return {(string|buffer.Buffer)}"],"~$make-parents",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",220,"^1H",7,"^1I",220,"^1J",19,"^1K",["^1L",["^1M",["^1L",[["~$f","~$&","~$more"]]]]],"^1O","Given the same arg(s) as for file, creates all parent directories of\n   the file they represent.\n   @return {!boolean}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$f","^21"]]],"^1K",["^1L",[["~$f","~$&","^21"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/make-parents","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",19,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$f","^21"]]],"^1K",["^1L",[["~$f","~$&","^21"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$f","^21"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",220,"^1I",220,"^1R",1,"^1W",true,"^1K",["^1L",[["~$f","~$&","^21"]]],"^1O","Given the same arg(s) as for file, creates all parent directories of\n   the file they represent.\n   @return {!boolean}"],"~$spit",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",177,"^1H",7,"^1I",177,"^1J",11,"^1K",["^1L",["^1M",["^1L",[["~$p","~$content","~$&","~$options"]]]]],"^1O","Writes content synchronously to file f.\n   :encoding {string} encoding to write the string. Ignored when content is a buffer\n   :append - {boolean} - if true add content to end of file\n   @return {nil} or throws","^1P",["^ ","^1Q",true,"^1R",2,"^1S",[["^1L",["~$p","^24","^25"]]],"^1K",["^1L",[["~$p","^24","~$&","^25"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/spit","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",11,"^1P",["^ ","^1Q",true,"^1R",2,"^1S",[["^1L",["~$p","^24","^25"]]],"^1K",["^1L",[["~$p","^24","~$&","^25"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$p","^24","^25"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",177,"^1I",177,"^1R",2,"^1W",true,"^1K",["^1L",[["~$p","^24","~$&","^25"]]],"^1O","Writes content synchronously to file f.\n   :encoding {string} encoding to write the string. Ignored when content is a buffer\n   :append - {boolean} - if true add content to end of file\n   @return {nil} or throws"],"~$Buffer?",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",147,"^1H",16,"^1I",147,"^1J",23,"~:tag","~$boolean","^1K",["^1L",["^1M",["^1L",[["~$b"]]]]],"^1O","sugar over Buffer.isBuffer\n   @param {*} b\n   @return {!boolean}"],"^I","~$cljs-node-io.core/Buffer?","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",23,"^1S",["^1L",[["~$b"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",147,"~:ret-tag","^29","^1I",147,"^1R",1,"^28","^29","^1W",true,"^1K",["^1L",["^1M",["^1L",[["~$b"]]]]],"^1O","sugar over Buffer.isBuffer\n   @param {*} b\n   @return {!boolean}"],"~$delete-file",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",104,"^1H",7,"^1I",104,"^1J",18,"^1K",["^1L",["^1M",["^1L",[["~$f","~$&",["~$silently"]]]]]],"^1O","Delete file f. Raise an exception if it fails unless silently is true.\n   @return {!boolean}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$f",["^2="]]]],"^1K",["^1L",[["~$f","~$&",["^2="]]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/delete-file","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",18,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$f",["^2="]]]],"^1K",["^1L",[["~$f","~$&",["^2="]]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$f",["^2="]]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",104,"^1I",104,"^1R",1,"^1W",true,"^1K",["^1L",[["~$f","~$&",["^2="]]]],"^1O","Delete file f. Raise an exception if it fails unless silently is true.\n   @return {!boolean}"],"~$path",["^ ","^I","~$cljs-node-io.core/path","^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1G",13,"^1H",1,"^1I",13,"^1J",10,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",13,"^1H",6,"^1I",13,"^1J",10],"^28","~$js"],"~$input-stream",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",129,"^1H",7,"^1I",129,"^1J",19,"^1K",["^1L",["^1M",["^1L",[["~$x","~$&","^1N"]]]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + buffers => BufferReadStream\n    + files + strings => FileInputStream\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/input-stream","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",19,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$x","^1N"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",129,"^1I",129,"^1R",1,"^1W",true,"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + buffers => BufferReadStream\n    + files + strings => FileInputStream\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}"],"~$Error?",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",154,"^1H",16,"^1I",154,"^1J",22,"^28","^29","^1K",["^1L",["^1M",["^1L",[["~$e"]]]]],"^1O","@param {*} e\n   @return {!boolean}"],"^I","~$cljs-node-io.core/Error?","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",22,"^1S",["^1L",[["~$e"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",154,"^2;","^29","^1I",154,"^1R",1,"^28","^29","^1W",true,"^1K",["^1L",["^1M",["^1L",[["~$e"]]]]],"^1O","@param {*} e\n   @return {!boolean}"],"~$as-relative-path",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",81,"^1H",7,"^1I",81,"^1J",23,"^1K",["^1L",["^1M",["^1L",[["~$x"]]]]],"^1O","a relative path, else IllegalArgumentException.\n   @param {(string|IFile|Uri)} x\n   @return {!string}"],"^I","~$cljs-node-io.core/as-relative-path","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",23,"^1S",["^1L",[["~$x"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",81,"^1I",81,"^1R",1,"^1W",true,"^1K",["^1L",["^1M",["^1L",[["~$x"]]]]],"^1O","a relative path, else IllegalArgumentException.\n   @param {(string|IFile|Uri)} x\n   @return {!string}"],"~$copy",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",290,"^1H",7,"^1I",290,"^1J",11,"^1K",["^1L",["^1M",["^1L",[["~$input","~$output","~$&","^1N"]]]]],"^1O","Copies input to output. Returns nil or throws.\n   Input may be an InputStream, File, Buffer, or string.\n   Output may be an String, OutputStream or File. \n   Unlike JVM, strings are coerced to files. If you have a big string, use a buffer.    \n   By default no encoding ops occur, just read & written as binary. \n   Options are passed to the output stream.\n    :encoding = destination encoding to use\n    ex: (copy 'foo.txt' 'bar.txt' :encoding 'utf8')","^1P",["^ ","^1Q",true,"^1R",2,"^1S",[["^1L",["^2I","^2J","^1N"]]],"^1K",["^1L",[["^2I","^2J","~$&","^1N"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/copy","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",11,"^1P",["^ ","^1Q",true,"^1R",2,"^1S",[["^1L",["^2I","^2J","^1N"]]],"^1K",["^1L",[["^2I","^2J","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["^2I","^2J","^1N"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",290,"^1I",290,"^1R",2,"^1W",true,"^1K",["^1L",[["^2I","^2J","~$&","^1N"]]],"^1O","Copies input to output. Returns nil or throws.\n   Input may be an InputStream, File, Buffer, or string.\n   Output may be an String, OutputStream or File. \n   Unlike JVM, strings are coerced to files. If you have a big string, use a buffer.    \n   By default no encoding ops occur, just read & written as binary. \n   Options are passed to the output stream.\n    :encoding = destination encoding to use\n    ex: (copy 'foo.txt' 'bar.txt' :encoding 'utf8')"],"~$input-stream?",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",228,"^1H",16,"^1I",228,"^1J",29,"^28","^29","^1K",["^1L",["^1M",["^1L",[["~$obj"]]]]],"^1O","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"^I","~$cljs-node-io.core/input-stream?","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",29,"^1S",["^1L",[["^2M"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",228,"^2;","^29","^1I",228,"^1R",1,"^28","^29","^1W",true,"^1K",["^1L",["^1M",["^1L",[["^2M"]]]]],"^1O","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"~$filepath",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",19,"^1H",8,"^1I",19,"^1J",16,"~:private",true,"^1K",["^1L",["^1M",["^1L",[["~$a"],["~$a","~$b"]]]]],"^1O","This is needed to mock the java.io.File constructor.\n   The java File constructor is polymorphic and accepts one or two args:\n   (Uri), (pathstring), (parentstring, childstring), (File, childstring)\n   @return {!string}","^1P",["^ ","^1Q",false,"^1R",2,"^1S",["^1L",[["~$a"],["~$a","~$b"]]],"^1K",["^1L",[["~$a"],["~$a","~$b"]]],"^1T",["^1L",[null,null]]]],"^2P",true,"^I","~$cljs-node-io.core/filepath","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",16,"^1P",["^ ","^1Q",false,"^1R",2,"^1S",["^1L",[["~$a"],["~$a","~$b"]]],"^1K",["^1L",[["~$a"],["~$a","~$b"]]],"^1T",["^1L",[null,null]]],"^1S",["^1L",[["~$a"],["~$a","~$b"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",19,"^1I",19,"^1R",2,"^1W",true,"^1K",["^1L",[["~$a"],["~$a","~$b"]]],"^1O","This is needed to mock the java.io.File constructor.\n   The java File constructor is polymorphic and accepts one or two args:\n   (Uri), (pathstring), (parentstring, childstring), (File, childstring)\n   @return {!string}"],"~$output-stream",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",138,"^1H",7,"^1I",138,"^1J",20,"^1K",["^1L",["^1M",["^1L",[["~$x","~$&","^1N"]]]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n   + Files & Strings become FileOutputStreams.\n   + goog.Uri's are treated as local files. No other protocols are supported at\n   this time.\n   @return {!IOutputStream}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/output-stream","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",20,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$x","^1N"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",138,"^1I",138,"^1R",1,"^1W",true,"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n   + Files & Strings become FileOutputStreams.\n   + goog.Uri's are treated as local files. No other protocols are supported at\n   this time.\n   @return {!IOutputStream}"],"~$file",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",92,"^1H",7,"^1I",92,"^1J",11,"^1K",["^1L",["^1M",["^1L",[["~$arg"],["~$parent","~$child"],["^2V","^2W","~$&","^21"]]]]],"^1O","Returns a reified file, passing each arg to as-file.  Multiple-arg\n   versions treat the first argument as parent and subsequent args as\n   children relative to the parent. Use in place of File constructor\n   @return {!IFile}","^1P",["^ ","^1Q",true,"^1R",2,"^1S",["^1L",[["^2U"],["^2V","^2W"]]],"^1K",["^1L",[["^2U"],["^2V","^2W"],["^2V","^2W","~$&","^21"]]],"^1T",["^1L",[null,null,null]]]],"^I","~$cljs-node-io.core/file","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",11,"^1P",["^ ","^1Q",true,"^1R",2,"^1S",["^1L",[["^2U"],["^2V","^2W"]]],"^1K",["^1L",[["^2U"],["^2V","^2W"],["^2V","^2W","~$&","^21"]]],"^1T",["^1L",[null,null,null]]],"^1S",["^1L",[["^2U"],["^2V","^2W"]]],"^1V",null,"^1T",["^1L",[null,null,null]],"^1H",1,"^1G",92,"^1I",92,"^1R",2,"^1W",true,"^1K",["^1L",[["^2U"],["^2V","^2W"],["^2V","^2W","~$&","^21"]]],"^1O","Returns a reified file, passing each arg to as-file.  Multiple-arg\n   versions treat the first argument as parent and subsequent args as\n   children relative to the parent. Use in place of File constructor\n   @return {!IFile}"],"~$file-seq",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",204,"^1H",7,"^1I",204,"^1J",15,"^1K",["^1L",["^1M",["^1L",[["~$dir"]]]]],"^1O","taken from clojurescript/examples/nodels.cljs"],"^I","~$cljs-node-io.core/file-seq","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",15,"^1S",["^1L",[["^2Z"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",204,"^1I",204,"^1R",1,"^1W",true,"^1K",["^1L",["^1M",["^1L",[["^2Z"]]]]],"^1O","taken from clojurescript/examples/nodels.cljs"],"~$aspit",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",187,"^1H",7,"^1I",187,"^1J",12,"^1K",["^1L",["^1M",["^1L",[["~$p","^24","~$&","^25"]]]]],"^1O","Async spit. Wait for result before writing again!\n   @return {!Channel} recieves [?err]","^1P",["^ ","^1Q",true,"^1R",2,"^1S",[["^1L",["~$p","^24","^25"]]],"^1K",["^1L",[["~$p","^24","~$&","^25"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/aspit","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",12,"^1P",["^ ","^1Q",true,"^1R",2,"^1S",[["^1L",["~$p","^24","^25"]]],"^1K",["^1L",[["~$p","^24","~$&","^25"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$p","^24","^25"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",187,"^1I",187,"^1R",2,"^1W",true,"^1K",["^1L",[["~$p","^24","~$&","^25"]]],"^1O","Async spit. Wait for result before writing again!\n   @return {!Channel} recieves [?err]"],"~$do-copy",["^ ","^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",259,"^1H",3,"^1I",259,"^1J",10,"^1O","Internal helper for copy","^2P",true,"^1K",["^1L",["^1M",["^1L",[["^2I","^2J","^1N"]]]]]],"^2P",true,"^I","~$cljs-node-io.core/do-copy","^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",10,"^1H",1,"^1G",255,"^1I",259,"^28","~$cljs.core/MultiFn","^1K",["^1L",["^1M",["^1L",[["^2I","^2J","^1N"]]]]],"^1O","Internal helper for copy"],"~$stream-type",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",240,"^1H",7,"^1I",240,"^1J",18,"^1K",["^1L",["^1M",["^1L",[["^2M"]]]]],"^1O","@param {*} obj The object to test"],"^I","~$cljs-node-io.core/stream-type","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",18,"^1S",["^1L",[["^2M"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",240,"^1I",240,"^1R",1,"^1W",true,"^1K",["^1L",["^1M",["^1L",[["^2M"]]]]],"^1O","@param {*} obj The object to test"],"~$output-stream?",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",234,"^1H",16,"^1I",234,"^1J",30,"^28","^29","^1K",["^1L",["^1M",["^1L",[["^2M"]]]]],"^1O","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"^I","~$cljs-node-io.core/output-stream?","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",30,"^1S",["^1L",[["^2M"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",234,"^2;","^29","^1I",234,"^1R",1,"^28","^29","^1W",true,"^1K",["^1L",["^1M",["^1L",[["^2M"]]]]],"^1O","@param {*} obj object to test\n   @return {!boolean} is object an input-stream?"],"~$xml-seq",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",212,"^1H",7,"^1I",212,"^1J",14,"^1K",["^1L",["^1M",["^1L",[["~$root"]]]]],"^1O","A tree seq on the xml elements as per xml/parse"],"^I","~$cljs-node-io.core/xml-seq","^1Q",false,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",14,"^1S",["^1L",[["^3:"]]],"^1V",null,"^1T",["^1L",[null,null]],"^1H",1,"^1G",212,"^1I",212,"^1R",1,"^1W",true,"^1K",["^1L",["^1M",["^1L",[["^3:"]]]]],"^1O","A tree seq on the xml elements as per xml/parse"],"~$writer",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",121,"^1H",7,"^1I",121,"^1J",13,"^1K",["^1L",["^1M",["^1L",[["~$x","~$&","^1N"]]]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + Files & Strings become FileOutputStreams.\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IOutputStream}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/writer","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",13,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$x","^1N"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",121,"^1I",121,"^1R",1,"^1W",true,"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n    + Files & Strings become FileOutputStreams.\n    + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IOutputStream}"],"~$reader",["^ ","^1D",null,"^1E",["^ ","^1F","/home/fode/src/huginn/target/js/compiled/test/cljs_node_io/core.cljs","^1G",112,"^1H",7,"^1I",112,"^1J",13,"^1K",["^1L",["^1M",["^1L",[["~$x","~$&","^1N"]]]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n     + buffers => BufferReadStream\n     + files + strings => FileInputStream\n     + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}","^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]]],"^I","~$cljs-node-io.core/reader","^1Q",true,"^1F","target/js/compiled/test/cljs_node_io/core.cljs","^1J",13,"^1P",["^ ","^1Q",true,"^1R",1,"^1S",[["^1L",["~$x","^1N"]]],"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1T",["^1L",[null]]],"^1S",[["^1L",["~$x","^1N"]]],"^1V",null,"^1T",["^1L",[null]],"^1H",1,"^1G",112,"^1I",112,"^1R",1,"^1W",true,"^1K",["^1L",[["~$x","~$&","^1N"]]],"^1O","For all streams it defers back to the stream. Note: stream objects are event driven.\n     + buffers => BufferReadStream\n     + files + strings => FileInputStream\n     + goog.Uri's are treated as local files. No other protocols are supported at this time.\n   @return {!IInputStream}"]],"~:require-macros",["^ ","^D","^D","^Q","^R","^R","^R"],"~:cljs.analyzer/constants",["^ ","~:seen",["^H",["~:encoding","~:else","~:content","~:default","~:File","~:OutputStream","~:InputStream","~:hierarchy"]],"~:order",["^3D","^3C","^3E","^3I","^3H","^3J","^3G","^3F"]],"^1O",null]